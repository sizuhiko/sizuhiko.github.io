<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2025-04-14T14:31:00+09:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>PHPカンファレンス小田原2025に参加しました</title>
    <link rel="alternate" href="http://blog.url.com/2025/04/14/phpcon-odawara-2025.html"/>
    <id>http://blog.url.com/2025/04/14/phpcon-odawara-2025.html</id>
    <published>2025-04-14T14:31:00+09:00</published>
    <updated>2025-04-14T15:16:54+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;この記事は &lt;a href="https://phpcon-odawara.jp/2025/"&gt;PHPカンファレンス小田原2025&lt;/a&gt; に参加したレポートです。&lt;/p&gt;

&lt;p&gt;今年も月刊PHPカンファレンスなようですが、昨年末ぐらいから多忙のため通常のPHP勉強会にも出れない日々が続いておりました。
ようやく落ち着いてきてイベントにも出れるようになってきたので、久々のイベント参加です（というか、もう小田原ぐらいには落ち着いてないとダメだろうという前提でチケットを購入していた）。&lt;/p&gt;

&lt;p&gt;小田原は新宿駅から乗り換えなしで行けるし、都民にとってはPHPカンファレンス東京と並んで行きやすいカンファレンスです。&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;ロマンスカー満車で乗れず。快速急行で行きます&lt;/p&gt;&amp;mdash; しずひこ (@sizuhiko) &lt;a href="https://twitter.com/sizuhiko/status/1910832536760037457?ref_src=twsrc%5Etfw"&gt;April 11, 2025&lt;/a&gt;&lt;/blockquote&gt; 

&lt;p&gt;なんか去年もそうだった記憶があるけど、ロマンスカーあんまり乗らないので事前に購入するという発想がなかった。ロマンスカーなら70分、快速急行だと100分ぐらいなのでギリ間に合うかなという感じ。&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;ギリ間に合ったー。着席&lt;br&gt; &lt;a href="https://twitter.com/hashtag/phpcon_odawara?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#phpcon_odawara&lt;/a&gt;&lt;/p&gt;&amp;mdash; しずひこ (@sizuhiko) &lt;a href="https://twitter.com/sizuhiko/status/1910860831165739432?ref_src=twsrc%5Etfw"&gt;April 12, 2025&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;はい。&lt;/p&gt;

&lt;p&gt;受付してノベルティをGETして会場へ急足。小田原のノベルティTシャツが今年もステキだった（写真撮り忘れた）。まだ着てないけど昨年のもお気に入りなんで、今年のも何度も切る場面がありそう。&lt;/p&gt;

&lt;h3&gt;参加したセッション&lt;/h3&gt;

&lt;h4&gt;AM&lt;/h4&gt;

&lt;p&gt;午前中はメイン会場の &lt;code&gt;かま&lt;/code&gt; で&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;キーノート OSSコントリビュートをphp-srcメンテナの立場から語る&lt;/li&gt;
&lt;li&gt;PHP 8.x 時代のクラス設計&lt;/li&gt;
&lt;li&gt;PHPと旅する OSI 7階層&lt;/li&gt;
&lt;li&gt;PHPバージョンアップから始めるOSSコントリビュート&lt;/li&gt;
&lt;li&gt;古き良きLaravelのシステムは関数型スタイルでリファクタできるのか&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OSSコントリビュートは普段から心がけているので、自分が使うライブラリだったり、自分が作るライブラリだったり、いろいろあるけど貢献する意識づけとかはチームメンバーにも植え付けていきたいし、カンファレンスとかにも出て刺激をうけてほしいですね。会場アンケートでコントリビュートしたことある人、というアンケートに、こういうところに来る人なんでバイアスかかってますけどね、というコメントがありましたけど、確かにーと思うところ。&lt;/p&gt;

&lt;p&gt;PHPは個人サービスを作る時のバックエンドで長らく使っていたけど、最近はNode.jsばかりなので昔のサービスのメンテぐらいでしか書いてないけど、クラス設計の話を聞くと昔から他の言語のいいところを取り入れて進化してきたので、クラスの話を聞くとJavaっぽいと思うのは自然な感じかな。いろいろ最新状況が知れてよかった。&lt;/p&gt;

&lt;p&gt;OSI7階層の話は、別のカンファレンスでそれぞれの層の話を聞いたりしてるので、全体の流れの話で聞けるのもよかった。僕はそういう突き詰める系はあんまりやらないけど、自分の好きな開発ができるときって楽しいですよね。僕だと個人Webサービス作ってる時が楽しいです。&lt;/p&gt;

&lt;p&gt;リファクタリングは、どのタイミングでやるかは非常に重要だけど、聞いた話レベルでやるのは大変そうだなーと思った。改善は一気にできないことが多いので、少しでもやりやすい方法で進められると良いですね。&lt;/p&gt;

&lt;h4&gt;ランチ&lt;/h4&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;美味しそう &lt;a href="https://twitter.com/hashtag/phpcon_odawara?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#phpcon_odawara&lt;/a&gt; &lt;a href="https://t.co/P3k13wST1Z"&gt;pic.twitter.com/P3k13wST1Z&lt;/a&gt;&lt;/p&gt;&amp;mdash; しずひこ (@sizuhiko) &lt;a href="https://twitter.com/sizuhiko/status/1910906627236253983?ref_src=twsrc%5Etfw"&gt;April 12, 2025&lt;/a&gt;&lt;/blockquote&gt; 

&lt;p&gt;ランチではランチコラボで、地元のお店でプチサービスが受けられるところが準備されていたり、ぼっち飯にならないようにランチマッチング企画が準備されていたり、すごい充実してました。
とはいえ、僕はタイミングを逃して1人で美味しそうな料理とお水があるお店に吸い込まれていきました。
小田原の路地にあるお店、どこも入り口が広くて開放していたので、様子が伺えてよかったです。&lt;/p&gt;

&lt;h4&gt;PM&lt;/h4&gt;

&lt;p&gt;午後は &lt;code&gt;あじ&lt;/code&gt; で&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;恣意性から考える、変更に強いモデルの作り方&lt;/li&gt;
&lt;li&gt;タイムゾーンの奥地は思ったよりも闇深いかもしれない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最後は &lt;code&gt;かま&lt;/code&gt; に戻って&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New RelicのAPMを活用したECサービスにおけるメール遅延解消の舞台裏&lt;/li&gt;
&lt;li&gt;スポンサーエレベータピッチ&lt;/li&gt;
&lt;li&gt;LT&lt;/li&gt;
&lt;li&gt;ぺちおだ大合戦&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;恣意性はふむふむ、そうだなーと思うところがあったり、自分はこうだなーと思うところがあったりして、考え方の整理ができてよかったです。&lt;/p&gt;

&lt;p&gt;タイムゾーンはちょっと思ってた内容と違ってたけど、まぁUTCにしとけってとことはそうですね！&lt;/p&gt;

&lt;p&gt;アプリの計測は大事で、最近はAWS使うことが多いのでX-Rayを使っていることが多いけど、何を使うにせよデータがないと困りますしね。最近業務でX-Ray使っていて新しい知見もあったので、ブログにも書いていこうと思います。&lt;/p&gt;

&lt;p&gt;ぺちおだ大合戦、最初はどんなことが起きるんだろう？と思ったけど、終わってみてこれはすごい企画だなーというのと、運営の準備大変だっただろうな、お疲れ様でした。とても楽しかったです！という一言です。とにかくすごい。&lt;/p&gt;

&lt;h4&gt;懇親会&lt;/h4&gt;

&lt;p&gt;万葉の湯で豪華な懇親会がありました。畳部屋での立食形式もあんまり体験したことない感じだった。こちらも写真は撮ってませんでした&amp;hellip;（楽しかったという記憶は間違いない）。
最終のロマンスカーの時間があるので、少し早く離脱して無事帰宅できました。&lt;/p&gt;

&lt;h3&gt;全体的な感想&lt;/h3&gt;

&lt;p&gt;昨年も参加して、今年もいろいろ考えられてて企画力がすごいですよね。&lt;/p&gt;

&lt;p&gt;来年のことについてはコメントしませんが、これだけの企画をやると燃え尽き症候群とかになっても不思議ではないと思うので、ゆっくり休んで他のカンファレンスに参加して充電？してかな。&lt;/p&gt;

&lt;p&gt;参加した方もためになったし、元気がもらえたし、楽しかったし、とても充実した1日でした。&lt;/p&gt;

&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content>
  </entry>
  <entry>
    <title>Next.js で作ったアプリケーションを AppRunner にデプロイする</title>
    <link rel="alternate" href="http://blog.url.com/2025/04/11/next-js-deploy-to-apprunner.html"/>
    <id>http://blog.url.com/2025/04/11/next-js-deploy-to-apprunner.html</id>
    <published>2025-04-11T17:59:00+09:00</published>
    <updated>2025-04-11T19:03:31+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;こちらの記事は &lt;a href="/2025/04/08/apprunner-deploy-from-cdk-is-easy-really.html"&gt;AppRunner へのデプロイは cdk でサクッとできるのか？&lt;/a&gt; の続編となります。
前編を読まないとわからない内容ではないですが、もし良ければ事前に確認してください。&lt;/p&gt;

&lt;p&gt;まず前編でも触れてますが、アプリケーションのリポジトリ構成は以下のようになっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Next.js のアプリケーションリポジトリ&lt;/li&gt;
&lt;li&gt;AWSのリソースを管理するインフラリポジトリ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;アプリのリポジトリでは、ECR へのデプロイまでやってます。
インフラのリポジトリで、AppRunner など AWS リソースを CDK で構築しています。&lt;/p&gt;

&lt;h2&gt;AppRunner で Next.js アプリケーションを動かすには&lt;/h2&gt;

&lt;p&gt;Next.js を standalone モードでビルドして、Docker コンテナで起動する。これだけで ok です。&lt;/p&gt;

&lt;h3&gt;ECR に Next.js の standalone モードビルドしたコンテナイメージを push する&lt;/h3&gt;

&lt;p&gt;まずは Next.js のアプケーションリポジトリの CI/CD で ECR に Docker イメージを push します。
アプリケーションリポジトリ側にも CDK を入れてあるので、以下のようなコードで ECR にデプロイしています。
タグは &lt;code&gt;package.json&lt;/code&gt; の &lt;code&gt;version&lt;/code&gt; から入手します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;imagedeploy&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cdk-docker-image-deployment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;ecr&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-cdk-lib/aws-ecr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;DeployStack&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stack&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Construct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StackProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;projectRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../..&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;projectRoot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;package.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;repository&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ecr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromRepositoryName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webapp-ect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webapp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;imagedeploy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DockerImageDeployment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DockerImageDeployment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;imagedeploy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;directory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;projectRoot&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;imagedeploy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Destination&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ecr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dockerfile は Next.js の公式サンプル&lt;a href="https://github.com/vercel/next.js/tree/canary/examples/with-docker"&gt;With Docker&lt;/a&gt; を参考に（というかほぼそのまま流用）すれば大丈夫です。
ベースイメージの Node.js バージョンが古かったりするので、そこは自分たちが使うバージョンに変更しておきましょう。&lt;/p&gt;

&lt;h3&gt;AppRunner で ECR からデプロイする&lt;/h3&gt;

&lt;p&gt;こちらは前編でも触れた &lt;code&gt;@aws-cdk/aws-apprunner-alpha&lt;/code&gt; が使えるので簡単にデプロイできます。
以下のような感じで書けば良いでしょう。ヘルスチェックを何でやるかは、いろいろだと思いますが、ここではいったん &lt;code&gt;favicon&lt;/code&gt; にしています。
CDK で作成した ECR のリポジトリと、デプロイ対象のアプリケーションバージョンはコンストラクタの引数で渡せるようにしています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Source&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-apprunner-alpha&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;WebAppConstruct&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stack&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Construct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;WebAppConstructProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;WebAppService&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromEcr&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;imageConfiguration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ecrRepository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;tagOrDigest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webAppVersion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="na"&gt;serviceName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webapp-service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;autoDeploymentsEnabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;healthCheck&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HealthCheck&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;healthyThreshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/favicon.ico&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;unhealthyThreshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;コラム: ヘルスチェックについて、いろいろと参考になった記事&lt;/h4&gt;

&lt;p&gt;実はヘルスチェックはちょっといろいろあって実際も &lt;code&gt;favicon&lt;/code&gt; にしたんですけど、そのときに参考になった記事があるので、載せておきます&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/seelog/articles/next_js_health_check"&gt;Next.js App Router でヘルスチェックをする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/57956476/how-to-set-up-an-endpoint-for-health-check-on-next-js"&gt;How to set up an endpoint for Health check on Next.js?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://repost.aws/questions/QUq9Sqy5hKQrSZdIuDgEJoSw/heath-check-failing-only-after-enabling-vpc-connector"&gt;Heath check failing only after enabling VPC connector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;デプロイできたので動かしてみるが動かない&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Error: listen EADDRNOTAVAIL: address not available 10.0.1.2:3000&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;何か動きません。&lt;/p&gt;

&lt;p&gt;あれ、Dockerfile に &lt;code&gt;HOSTNAME=0.0.0.0&lt;/code&gt; 入ってるのに何でだろう？
ローカルで build したイメージ動かしたときは大丈夫だったんだけど？と思ったら、1つ罠があります。&lt;/p&gt;

&lt;p&gt;こちらの記事がとても参考になりました。
&lt;a href="https://zenn.dev/kojipole/articles/7e0472e71dc19b"&gt;AWS App RunnerでNext.jsのstandaloneモードを動かす時のTips(ないしは失敗談)&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;App Runnerの環境では環境変数HOSTNAMEに対して、暗黙的にアタッチされているENIのprivate DNSが指定されるようです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;なんですって？
AppRunner が環境変数にセットしてくるの？？&lt;/p&gt;

&lt;p&gt;だから &lt;code&gt;10.0.1.2:3000&lt;/code&gt; みたいな ENI の private アドレスになるんですね。Dockerfile では&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; HOSTNAME="0.0.0.0"&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["node",  "server.js"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のように指定されていても、コンテナ起動時に HOSTNAME を指定されるので環境変数が上書きされてセットされます。&lt;/p&gt;

&lt;h2&gt;CDK で HOSTNAME を設定する&lt;/h2&gt;

&lt;p&gt;ということで、AppRunner のサービスを作るときに環境変数 &lt;code&gt;HOSTNAME&lt;/code&gt; を指定してあげます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight typescript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;WebAppService&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromEcr&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;imageConfiguration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;environmentVariables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;HOSTNAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.0.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでデプロイしたら無事起動しました。👏👏&lt;/p&gt;

&lt;p&gt;少しでも AppRunner で Next.js アプリを動かす人の役にたてばと思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>AppRunner へのデプロイは cdk でサクッとできるのか？</title>
    <link rel="alternate" href="http://blog.url.com/2025/04/08/apprunner-deploy-from-cdk-is-easy-really.html"/>
    <id>http://blog.url.com/2025/04/08/apprunner-deploy-from-cdk-is-easy-really.html</id>
    <published>2025-04-08T18:45:00+09:00</published>
    <updated>2025-04-09T11:07:45+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;AWS App Runner は、ソースコードまたはコンテナイメージから AWS クラウドのスケーラブルで安全なウェブアプリケーションに直接デプロイするための、高速でシンプル、かつ費用対効果の高い方法を提供する AWS サービスです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と&lt;a href="https://docs.aws.amazon.com/ja_jp/apprunner/latest/dg/what-is-apprunner.html"&gt;公式ドキュメント&lt;/a&gt; に書かれています。&lt;/p&gt;

&lt;p&gt;ソースコードからデプロイする場合は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;BitBucket&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったところのクラウドリポジトリを使っていれば簡単に連携して自動デプロイができます。&lt;/p&gt;

&lt;p&gt;一方、仕事でオンプレのソースコードリポジトリ、たとえば GitHub Enterprise とか BitBucket Server とか、GitLabs とかをパブリッククラウドでなく使っている場合はソースコード連携できないので、ECR にイメージをデプロイして AppRunner と連携することになります。
本ブログは、この方法について、ネット上で簡単にできそうに書いてある記事をやってみたら、実際はそんなことなかったということについて記録するものです。&lt;/p&gt;

&lt;h2&gt;CDK で AppRunner + ECR でデプロイする&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;cdk apprunner DockerImageDeployment&lt;/code&gt; みたいな検索条件でググると、まぁいっぱい出てきます。&lt;/p&gt;

&lt;p&gt;ここで &lt;code&gt;DockerImageDeployment&lt;/code&gt; というのは、Dockerfile をビルドして ECR に push までしてくれる CDK のライブラリです。
で、その ECR を AppRunner に関連づけてというのが流れです。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;code&gt;DockerImageAsset&lt;/code&gt; というのもあって、そちらの記事も多く見受けられます。こちらはあらかじめ ECR を作っておかなくてもいい感じに作ってくれるものですが、&lt;a href="https://qiita.com/rickey0808/items/1e715b016d50f1d4c094"&gt;[AWS CDK] コンテナイメージもまとめてデプロイ！？DockerImageAssetの動作確認をしてみた&lt;/a&gt; という記事のとおりお試しで使う分には良いと思いますが、ちゃんと管理して使いたい場合は &lt;code&gt;DockerImageDeployment&lt;/code&gt; を使った方が良いでしょう。&lt;/p&gt;

&lt;h2&gt;DockerImageDeployment を使って ECR にデプロイする&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/cdklabs/cdk-docker-image-deployment"&gt;DockerImageDeployment の公式GitHubリポジトリ&lt;/a&gt; にある例どおり簡単に利用できます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;ecr&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-cdk-lib/aws-ecr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;imagedeploy&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cdk-docker-image-deployment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ecr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromRepositoryName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MyRepository&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myrepository&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;imagedeploy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DockerImageDeployment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ExampleImageDeploymentWithTag&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;imagedeploy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;directory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path/to/directory&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;imagedeploy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Destination&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ecr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myspecialtag&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;AppRunner と連携でデプロイする&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;@aws-cdk/aws-apprunner-alpha&lt;/code&gt; というまだα版ですが、CDK のコンストラクタがあるので、これを利用します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;ecr&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-cdk-lib/aws-ecr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;apprunner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;apprunner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromEcr&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;imageConfiguration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ecr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromRepositoryName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NginxRepository&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nginx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;tagOrDigest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;latest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは CDK でいい感じにつなぎこんで、みたいな感じです。&lt;/p&gt;

&lt;h2&gt;やってみたがエラーになる&lt;/h2&gt;

&lt;p&gt;はい、エラーになりました。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The deployment will wait until the CodeBuild Project completes successfully before finishing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;というメッセージが出て失敗します。
メッセージどおり受け取ると、ECR のデプロイが終わってないので AppRunner にデプロイできないということです。&lt;/p&gt;

&lt;h2&gt;どうやって解決したか&lt;/h2&gt;

&lt;p&gt;実はアプリケーションのソースコードリポジトリと、AWSのリソース構成をデプロイするインフラリポジトリは分けていたので、アプリケーションコード側の CI/CD で &lt;code&gt;DockerImageDeployment&lt;/code&gt; を使って ECR までデプロイ。
ECR までデプロイされている状況で、インフラリポジトリ側の CI/CD で ECR と AppRunner の関連付けをやるようにしました。&lt;/p&gt;

&lt;p&gt;では最初はなんで両方を一緒にやっていたかというと、アプリケーションが外部サービスに連携しているため、開発環境ではモックサーバーを使っているのですが、それは Dockerfile 1つだけなんでそのファイルをインフラリポジトリ側において AppRunner にデプロイしようとしていたという感じでした。&lt;/p&gt;

&lt;p&gt;他の解決策としては、カスタムリソースを使って ECR へのデプロイを待ち合わせてデプロイするという方法があります。モノレポなどを使っているときにアプリケーションとインフラを同時にデプロイしたいときなどは有効な方法だと思います。
カスタムリソースも Lambda を作らないといけないというわけではなく、 AWS の API を実行する程度なら Lambda が不要なので、そういった選択肢も検討できます。&lt;/p&gt;

&lt;p&gt;参考記事: &lt;a href="https://dev.classmethod.jp/articles/create-custom-resources-with-aws-cdk-without-using-lambda-functions/"&gt;[AWS CDK] APIを呼び出すだけのカスタムリソースならLambda関数は不要な件&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;さいごに&lt;/h2&gt;

&lt;p&gt;AppRunner を cdk を使ってデプロイしたい、というときに参考になれば幸いです。
&lt;code&gt;@aws-cdk/aws-apprunner-alpha&lt;/code&gt; がαじゃなくなるときには、もう少し便利に（ちゃんと待ち合わせてくれるみたいな）ことができるようになるのかもしれないので期待はしたいですね。&lt;/p&gt;

&lt;p&gt;ちなみにモックサーバーは &lt;a href="https://mockoon.com/"&gt;Mockoon&lt;/a&gt; を使ってます。とても便利で助かる。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>PHP カンファレンス福岡2024に参加した</title>
    <link rel="alternate" href="http://blog.url.com/2024/06/23/php-conference-fukuoka-2024.html"/>
    <id>http://blog.url.com/2024/06/23/php-conference-fukuoka-2024.html</id>
    <published>2024-06-23T11:35:00+09:00</published>
    <updated>2024-06-23T14:18:27+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://phpcon.fukuoka.jp/2024/"&gt;PHP カンファレンス福岡2024&lt;/a&gt;に参加しました。&lt;/p&gt;

&lt;p&gt;2019年以来の PHP カンファレンス福岡。
そのときの記事が&lt;a href="/2019/06/30/phpconfuk2019.html"&gt;PHPカンファレンス福岡2019で、 標準インターフェースを使ったアプリケーション開発について発表してきました&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;昨年はチケットを購入できず、先に予約していたフライトやホテルをキャンセルするという形になってしまったので、今年はちゃんとチケット購入してから、フライトとホテルを予約しました。昨年の反省が活かされている。
昨年の盛り上がりは X で確認していて、うらやましーと思ってました。そこから今年の月刊 PHP con が始まったと言っても過言ではないわけで、とても楽しみにしていました。&lt;/p&gt;

&lt;p&gt;ちなみにプロポーザルはブログ記事にもした&lt;a href="/2024/03/20/story-for-migrate-hobby-web-service-while-a-year-part-1.html"&gt;GAE gen1 で動いている PHP5.5 で作った個人開発サービスを gen2 PHP8.2 へ移行した1年記&lt;/a&gt;と&lt;a href="/2024/06/03/get-started-with-graphql-api-server-with-appsync-js.html"&gt;APPSYNC_JS (AppSync JavaScript) で始める GraphQL API サーバー&lt;/a&gt;について出したのですが、どちらも落選しました。
プロポーザルの倍率がやばすぎる（僕が普段の仕事 PHP じゃないので、旬な話題じゃないというのは否定できない事実ですがw）。&lt;/p&gt;

&lt;p&gt;2019年が3年ぶり2回目だったので、今回は5年ぶり3回目ということになります。&lt;/p&gt;

&lt;h2&gt;前日入り&lt;/h2&gt;

&lt;p&gt;今回も前日入りしましたが、いきなり飛行機が遅延するというトラブルに。&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;福岡行の飛行機が40分遅延。ラウンジで暇つぶし&lt;/p&gt;&amp;mdash; しずひこ (@sizuhiko) &lt;a href="https://twitter.com/sizuhiko/status/1803936271016112448?ref_src=twsrc%5Etfw"&gt;June 20, 2024&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;この時点では 9:00 発が 9:40 になっただけだったけど、さらに 15分遅延となって 9:55 発に。
梅雨時期だし雨の影響もあるのでしかたがないですね。前日入りでよかったとポジティブに捉えましょう。&lt;/p&gt;

&lt;p&gt;福岡に到着したら &lt;a href="https://wework.co.jp/location/fukuoka/daimyo"&gt;WeWork 大名&lt;/a&gt;へ。永和システムマネジメントでは東京支社がWeWork京橋内になったため、今回のように福岡に前日入りしてもWeWork拠点があれば作業できるのでとても便利。夕方からは袋詰めボランティアに申し込んでいたので、それまで作業します。&lt;/p&gt;

&lt;p&gt;お昼はWeWork近くにあったウェストへ。&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;&lt;a href="https://twitter.com/hashtag/phpconfuk?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#phpconfuk&lt;/a&gt;&lt;br&gt;つけ忘れた。ウェスト天神にて &lt;a href="https://t.co/qEIf833QCB"&gt;https://t.co/qEIf833QCB&lt;/a&gt;&lt;/p&gt;&amp;mdash; しずひこ (@sizuhiko) &lt;a href="https://twitter.com/sizuhiko/status/1804015303929795068?ref_src=twsrc%5Etfw"&gt;June 21, 2024&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;夕方ぐらいになったらWeWorkに知っている人たちが続々来て？？ってなったんですが&lt;a href="https://prtimes.connpass.com/event/319375/"&gt;【非公式】PHPカンファレンス福岡2024・前日Meetup&lt;/a&gt; があったようです。気が付いてなかった&amp;hellip;.&lt;/p&gt;

&lt;p&gt;そして袋詰めをやってきました。&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="zxx" dir="ltr"&gt;&lt;a href="https://t.co/3yToNsWugm"&gt;pic.twitter.com/3yToNsWugm&lt;/a&gt;&lt;/p&gt;&amp;mdash; cakephper ichikawa (@cakephper) &lt;a href="https://twitter.com/cakephper/status/1804161620920406368?ref_src=twsrc%5Etfw"&gt;June 21, 2024&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;そのあとは特に予定もなかったので、エールズへ。&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;ウェーイ &lt;a href="https://t.co/gvj1XTXZ5q"&gt;pic.twitter.com/gvj1XTXZ5q&lt;/a&gt;&lt;/p&gt;&amp;mdash; しずひこ (@sizuhiko) &lt;a href="https://twitter.com/sizuhiko/status/1804110592988582281?ref_src=twsrc%5Etfw"&gt;June 21, 2024&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;野生のPHPerにも出会えたり、帰ろうかなーと思ったら店長から市川さん来るよ、って教えてもらったのでビールを追加して合流。
そのあとは Rummy 行って美味しいラムをいただいて、締めにやまちゃんでラーメンとビールを（3時ちょいに寝ました）。&lt;/p&gt;

&lt;h2&gt;当日&lt;/h2&gt;

&lt;p&gt;ちゃんと朝起きれて会場へ移動していたのですが、2日続けて朝にトラブルが&amp;hellip;&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;祇園駅で出ようと思ったらSUICAが無い。たぶん天神の駅でポケットに入れる前に落としたっぽい&lt;/p&gt;&amp;mdash; しずひこ (@sizuhiko) &lt;a href="https://twitter.com/sizuhiko/status/1804311768019431566?ref_src=twsrc%5Etfw"&gt;June 22, 2024&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;100円均一で売ってるこの手の定期入れを使ってたんですが、初めて中身だけ落ちました。&lt;/p&gt;

&lt;p&gt;&lt;img src="https://jp.daisonet.com/cdn/shop/products/4549131477177_10_d815145c-9bf2-4c6f-809e-0a7ae83867ef_130x.jpg?v=1619573190" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;祇園駅で駅員さんに天神駅へ連絡してもらって確認したら、それっぽいのがあるということでUターンして無事戻ってきました。
日本でよかった。改札通過してすぐポケットに入れた（いつもそう）ので、改札近くに落ちたのではないかと思います。
ギリギリ開始時間には間に合いました。&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;隔月PHPカンファレンスにチェックイン&lt;a href="https://twitter.com/hashtag/phpconfuk?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#phpconfuk&lt;/a&gt;&lt;br&gt;&lt;br&gt; &lt;a href="https://t.co/ObAL9Tbeuy"&gt;https://t.co/ObAL9Tbeuy&lt;/a&gt; &lt;a href="https://t.co/lTfGcPuNX2"&gt;pic.twitter.com/lTfGcPuNX2&lt;/a&gt;&lt;/p&gt;&amp;mdash; しずひこ (@sizuhiko) &lt;a href="https://twitter.com/sizuhiko/status/1804321244311150838?ref_src=twsrc%5Etfw"&gt;June 22, 2024&lt;/a&gt;&lt;/blockquote&gt; 

&lt;p&gt;今回は午前中はメイン会場でセッションに参加してました。PHP養分がたくさん補充されました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fortee.jp/phpcon-fukuoka-2024/proposal/559508e2-68c6-4b59-ab3a-3da6a6cccb0f"&gt;PHP コードの実行モデルを理解する by 新原 雅司&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fortee.jp/phpcon-fukuoka-2024/proposal/7efe2276-f8e0-4610-8586-e3901230e231"&gt;Fat Controller は悪か？ ~光のFat Controller・闇のガリController~ by スタヰル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fortee.jp/phpcon-fukuoka-2024/proposal/bdf2f1de-82f0-4468-989a-cb1fb70263c1"&gt;10社以上のCTO/技術顧問を経験して見えた、技術組織に起こる課題と対策 by 大谷 祐司&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fortee.jp/phpcon-fukuoka-2024/proposal/c2955129-264c-4807-b840-747c1ba23e08"&gt;有効な使い方を正しく理解して実装するPHP8.3の最新機能 by 清家史郎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;お昼は福岡の人と食べたいなーと思って、&lt;a href="https://x.com/nojimage"&gt;@nojimage&lt;/a&gt;さんに声をかけてご一緒させてもらいました。&lt;/p&gt;

&lt;p&gt;午後はアンカンファレンス会場、スポンサーブース、廊下で交流してました。&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;最新版👀&lt;br&gt; &lt;a href="https://twitter.com/hashtag/phpconfuk?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#phpconfuk&lt;/a&gt; &lt;a href="https://t.co/Ff4dSAI9jI"&gt;pic.twitter.com/Ff4dSAI9jI&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kanon (@samurai_se) &lt;a href="https://twitter.com/samurai_se/status/1804393754780184724?ref_src=twsrc%5Etfw"&gt;June 22, 2024&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;16:00からはアンカンファレンス会場で、会社で今月2回Webアクセシビリティのワークショップをやったのを発表しました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;さきほどアンカンで話したスライドです。&lt;br&gt;Webアクセシビリティワークショップを社内でやってみた&lt;a href="https://t.co/2jjPp9vFx2"&gt;https://t.co/2jjPp9vFx2&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/phpconfuk?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#phpconfuk&lt;/a&gt;&lt;/p&gt;&amp;mdash; しずひこ (@sizuhiko) &lt;a href="https://twitter.com/sizuhiko/status/1804416464855675307?ref_src=twsrc%5Etfw"&gt;June 22, 2024&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;専門家じゃなくても良い教材があるので「みんなで勉強会てきにやってみると良いよ」といったメッセージが伝わったら良いなと思っています。&lt;/p&gt;

&lt;p&gt;そのあとは懇親会（当日チケットあって嬉しかった）→ 非公式2次会 → やまちゃん の流れでした。
初めましての方、お久しぶりの方とたくさん話せました。楽しかった！&lt;/p&gt;

&lt;h2&gt;後日&lt;/h2&gt;

&lt;p&gt;帰京までの時間は&lt;a href="https://fusic.connpass.com/event/314905/"&gt;6/23(日)「（非公式）PHP Conference Fukuoka After Hack!!」&lt;/a&gt;に参加して、このブログ記事を書いています。&lt;/p&gt;

&lt;p&gt;2019年の記事の最後は&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;PHPカンファレンス福岡、来年も参加できると良いなー。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;で終えていました。
しかし翌年それが当たり前の光景でないことがわかったのです。当時はそんなことになると思っていなかったですよね。
もちろんそういったことだけでなく、当たり前にカンファレンスがある訳でなく、多くの人の努力によって開催されているわけで感謝です。&lt;/p&gt;

&lt;p&gt;あとはアンケートとフィードバックを入れてから帰ります。そしてまた参加できるように願っています。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>APPSYNC_JS (AppSync JavaScript) で始める GraphQL API サーバー</title>
    <link rel="alternate" href="http://blog.url.com/2024/06/03/get-started-with-graphql-api-server-with-appsync-js.html"/>
    <id>http://blog.url.com/2024/06/03/get-started-with-graphql-api-server-with-appsync-js.html</id>
    <published>2024-06-03T14:32:00+09:00</published>
    <updated>2024-06-03T18:12:20+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://aws.amazon.com/jp/appsync/"&gt;AppSync&lt;/a&gt; は、AWS上で GraphQL API をサーバーレスに構築できるサービスです。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/jp/amplify/"&gt;Amplify&lt;/a&gt; で利用されていることでも有名ですね。
Amplify から DynamoDB にアクセスするときや、通常の CRUD だけでなくクエリ条件を指定したい場合などのカスタマイズをするときは、自動生成されたリゾルバーを修正することになります。
このとき従来は &lt;a href="https://docs.aws.amazon.com/ja_jp/appsync/latest/devguide/resolver-mapping-template-reference.html"&gt;VTL&lt;/a&gt; というテンプレート言語を学ぶ必要がありましたが、今日ではJavaScript(TypeScript)を利用できます。&lt;/p&gt;

&lt;p&gt;最新の Amplify Gen2 でも TypeScript でリゾルバを指定できます。&lt;a href="https://dev.classmethod.jp/articles/amplify-gen2-nextjs/"&gt;Amplify Gen2でNextJSのアプリケーション作成まで&lt;/a&gt; というクラメソの記事が参考になります。&lt;/p&gt;

&lt;h3&gt;公式ドキュメントで学ぶ&lt;/h3&gt;

&lt;p&gt;AWS のデベロッパーガイドに&lt;a href="https://docs.aws.amazon.com/ja_jp/appsync/latest/devguide/tutorials-js.html"&gt;リゾルバーチュートリアル (JavaScript)&lt;/a&gt;があるので、これを読めば理解が進みます。
特に&lt;a href="https://docs.aws.amazon.com/ja_jp/appsync/latest/devguide/tutorial-dynamodb-resolvers-js.html"&gt;チュートリアル: DynamoDB JavaScript リゾルバー&lt;/a&gt;を読むと、DynamoDB にアクセスする GraphQL API の作り方が理解できるようになるでしょう。&lt;/p&gt;

&lt;h4&gt;TypeScript を使う&lt;/h4&gt;

&lt;p&gt;Amplify Gen2 を使っている場合は、すべて TypeScript で記述していて Amplify プロジェクトで管理されている Lint ルールなどを利用しているので、問題ないと思います。
一方で AppSync を直接使う（たとえば Terraform や CDK などを使って AppSync の API をデプロイする）場合は、JavaScript リゾルバーの概要の中にある&lt;a href="https://docs.aws.amazon.com/ja_jp/appsync/latest/devguide/resolver-reference-overview-js.html#additional-utilities"&gt;バンドル、TypeScript、ソースマップ&lt;/a&gt;を読むと良いです。&lt;/p&gt;

&lt;p&gt;ここを読むと、以下の理解が深まります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;esbuild を使って TypeScript ファイルをバンドルして 1 つの JavaScript ファイルにする方法&lt;/li&gt;
&lt;li&gt;リゾルバや関数を作るときの TypeScript 設定や記述方法（主に型定義）&lt;/li&gt;
&lt;li&gt;GraphQL スキーマ情報から TypeScript  型定義を生成する方法&lt;/li&gt;
&lt;li&gt;Linter の設定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特に Linter の設定は重要になります。
詳しくは&lt;a href="https://docs.aws.amazon.com/ja_jp/appsync/latest/devguide/resolver-reference-overview-js.html#utility-resolvers"&gt;ユーティリティ&lt;/a&gt;の &lt;code&gt;eslint プラグインの設定&lt;/code&gt; で確認できます。&lt;/p&gt;

&lt;h4&gt;APPSYNC_JS の制約&lt;/h4&gt;

&lt;p&gt;リゾルバや関数を JavaScript で記述できるようになったのは(VTLを書くことに比べ)嬉しいことなのですが、あくまでも JavaScript の文法が使える程度と思っていた方が良いです。もちろん単体テストコードが書きやすいなどのメリットはありつつも、制約が非常に多いことを理解しなくてはなりません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;コードサイズ: 32,000文字&lt;/li&gt;
&lt;li&gt;外部モジュール: npm でインストールされるようなものは、開発ツールを除いてほぼ使えないと思っていたほうが良い&lt;/li&gt;
&lt;li&gt;ネットワークアクセス: できない。すべてのリソースへのアクセスはデータソースを使って行う&lt;/li&gt;
&lt;li&gt;ファイルシステムアクセス: できない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どのようなものが向いているかは、&lt;a href="https://docs.aws.amazon.com/ja_jp/appsync/latest/devguide/resolver-reference-overview-js.html#choosing-data-source"&gt;データソースへの直接アクセスと Lambda データソース経由のプロキシのどちらかを選択する&lt;/a&gt;に書かれています。&lt;/p&gt;

&lt;h4&gt;ランタイム制約&lt;/h4&gt;

&lt;p&gt;次の制約を理解するとき読むべきは&lt;a href="https://docs.aws.amazon.com/ja_jp/appsync/latest/devguide/supported-features.html"&gt;サポートされているランタイム機能&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;さきほど&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;あくまでも JavaScript の文法が使える程度と思っていた方が良い&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と書きましたが、それがこのランタイム機能を理解した上での感想です。&lt;/p&gt;

&lt;p&gt;サポートされていない機能は以下のとおりです。&lt;/p&gt;

&lt;h5&gt;ステートメント&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;try / catch / finally&lt;/li&gt;
&lt;li&gt;throw

&lt;ul&gt;
&lt;li&gt;代わりに &lt;code&gt;util.error()&lt;/code&gt; 関数を利用する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;continue&lt;/li&gt;
&lt;li&gt;do-while&lt;/li&gt;
&lt;li&gt;for

&lt;ul&gt;
&lt;li&gt;ただし for-in および for-of 式は例外でサポートされている。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;while&lt;/li&gt;
&lt;li&gt;ラベル付きステートメント&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;数学&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;次の Math 関数はサポートされていません。

&lt;ul&gt;
&lt;li&gt;Math.random()&lt;/li&gt;
&lt;li&gt;Math.min()&lt;/li&gt;
&lt;li&gt;Math.max()&lt;/li&gt;
&lt;li&gt;Math.round()&lt;/li&gt;
&lt;li&gt;Math.floor()&lt;/li&gt;
&lt;li&gt;Math.ceil()&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;関数&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;apply、bind call メソッドはサポートされていません。&lt;/li&gt;
&lt;li&gt;関数コンストラクタはサポートされていません。&lt;/li&gt;
&lt;li&gt;関数を引数として渡すことはサポートされていません。&lt;/li&gt;
&lt;li&gt;再帰的な関数呼び出しはサポートされていません。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;promise&lt;/h5&gt;

&lt;p&gt;非同期プロセスはサポートされておらず、Promise もサポートされていません。&lt;/p&gt;

&lt;h4&gt;制約を理解した上で進める&lt;/h4&gt;

&lt;p&gt;と途中まででも読んだ段階で、これは &lt;code&gt;JavaScript の文法が使える程度&lt;/code&gt; になるということが理解できたでしょう。
外部ライブラリにこれらの記述を使っていないかというと、大抵どれか1つぐらいは該当してしまいます。
つまり実質的にテストコードを除いてバンドルするコードには、外部モジュールを使うという選択肢はなくなります。
ただ実際にはそれでは困ることが多いので、組み込むユーティリティや、ヘルパー関数などが揃っています。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/ja_jp/appsync/latest/devguide/resolver-util-reference-js.html"&gt;リゾルバーおよび関数の JavaScript runtime 機能&lt;/a&gt;のページから、それらのユーティリティやヘルパーへのドキュメントページに遷移できるので、確認してください。&lt;/p&gt;

&lt;p&gt;ただ一部 VTL のドキュメントには書いてあるユーティリティやヘルパーのうち、 JavaScript のリファレンスには記述されていないけど、利用可能なものもあります。
これらはドキュメントバグと思いますが、TypeScript で作っている場合はインポートで利用する型定義ファイルと、VTLのリファレンスを突き合わせてみると良いでしょう。&lt;/p&gt;

&lt;p&gt;たとえば多くの Math 関数がサポートされていない代わりに、mathヘルパーがあるのですが、これは JavaScript 側のドキュメントからは漏れています。もちろん利用可能なので、どのような機能があるかは VTL 側の&lt;a href="https://docs.aws.amazon.com/ja_jp/appsync/latest/devguide/math-helpers-in-util-math.html"&gt;$util.math の math ヘルパー&lt;/a&gt;を読むことになります。&lt;/p&gt;

&lt;h3&gt;Lambda データソースを使うという選択&lt;/h3&gt;

&lt;p&gt;もちろん、これは AppSync のリゾルバや関数で JavaScript を利用する場合の制約であって、AppSync のリゾルバから Lambda データソースを呼び出してそちらで処理する分には制約はありません。&lt;/p&gt;

&lt;p&gt;AppSync のリゾルバや関数の実行に関する料金が AppSync に全て含まれているのに対し、Lambda データソースで実行される計算リソースは別途 Lambda の料金がかかるので、Lambda でないとできない場合だけとしておくとコストを抑えることができるでしょう。&lt;/p&gt;

&lt;h3&gt;困っていること&lt;/h3&gt;

&lt;p&gt;AppSync の JavaScript ランタイムには様々な制約があるので、AWS のコンソールからソースコードを書いているとリアルタイムで制約違反を教えてくれます。もちろん手元のエディタを使っていても ESLint のルールでチェックできるようになっています。
とくに TypeScript で記述すると、より厳密に ESLint のルールで確認できるようになっています。&lt;/p&gt;

&lt;p&gt;多くのシンプルなリゾルバや関数では、ここで書く困りごとには遭遇しないかもしれません。
しかし運良く？その事象を引き当てたのです。&lt;/p&gt;

&lt;h4&gt;サンプルコード&lt;/h4&gt;

&lt;p&gt;例として（実際のケースとほぼ一緒ですが）、DynamoDB データソースに対して、複数のテーブルに跨った TransactWriteItem や BatchWriteItem を実行したいと仮定します。&lt;/p&gt;

&lt;p&gt;サンプルコードとして&lt;a href="https://github.com/aws-samples/amazon-dynamodb-item-tagging/"&gt;Amazon DynamoDB Item Tagging&lt;/a&gt;という、aws-samples オーガナイゼーションにあるリポジトリを利用します。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/aws-samples/amazon-dynamodb-item-tagging/blob/main/src/lambda/create.ts#L49"&gt;DynamoDBに保存するコード例&lt;/a&gt; は Lambda の実装ですが、ここでは書き込みのパターンについて注目してください。
このコードは、タスクを保存するときにタグ付けされていた場合は、タグの &lt;code&gt;WriteRequest&lt;/code&gt; を配列に追加しています（&lt;a href="https://github.com/aws-samples/amazon-dynamodb-item-tagging/blob/main/src/lambda/create.ts#L88"&gt;L88&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;特に何の変哲も無い、DynamoDB で TransactWriteItem や BatchWriteItem を使うときに書きそうなコードですが、ここに落とし穴があります。&lt;/p&gt;

&lt;p&gt;このコードは TypeScript で、配列に追加するとき &lt;code&gt;WriteRequest&lt;/code&gt; 型を指定しています。タグ付けするときも追加する型は &lt;code&gt;WriteRequest&lt;/code&gt; なので、配列に追加される型が一致するためエラーにはなりません。&lt;/p&gt;

&lt;h4&gt;同じようなコードを AppSync のリゾルバや関数で書くと TS2322 になる&lt;/h4&gt;

&lt;p&gt;では同じようなコードを AppSync のリゾルバや関数で書いたとします。
TypeScript で書いていて、 AppSync が指定する ESLint のルールなどがあっても問題なく通過するとします。
では結果を esbuild でバンドルしてデプロイしてみましょう。&lt;/p&gt;

&lt;p&gt;なんと、デプロイすると &lt;code&gt;TS2322&lt;/code&gt; エラーになります。&lt;/p&gt;

&lt;p&gt;えっ、AppSync って JavaScript はサポートしているけど、 TypeScript はサポートしてないよね？&lt;/p&gt;

&lt;p&gt;というのが、最初の驚きです。
またまたー、と思って先頭行に &lt;code&gt;// @ts-nocheck&lt;/code&gt; を書くと、デプロイできるようになります。&lt;/p&gt;

&lt;p&gt;ふぁぁっ！何だと、 &lt;code&gt;tsc&lt;/code&gt; が実行されているのか？！という疑惑が生まれてきます。&lt;/p&gt;

&lt;p&gt;いずれにせよ、このままではデプロイできないので、神様/AWSサポート様に問い合わせを行いました。
この問い合わせ、めっちゃ最終回答まで時間かかったのです&amp;hellip;..&lt;/p&gt;

&lt;p&gt;で、現時点これの回避策は、先頭行に &lt;code&gt;// @ts-nocheck&lt;/code&gt; を書く、が正式回答になります。まじかー&amp;hellip;.&lt;/p&gt;

&lt;p&gt;現時点 AppSync では JavaScript の制約をチェックするため、デプロイ時に JavaScript ファイルを TypeScript コードとしてチェックしているそうです。まじかー&amp;hellip;.&lt;/p&gt;

&lt;p&gt;先ほどのコードを再度確認してみてください。TypeScript のコードをコンパイルして型情報を取り除くと、以下のようなコードになります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;taskDbItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;PutRequest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// we set the pk and sk to the item id. we prefix both with `task#` to allow filtering by task items&lt;/span&gt;
          &lt;span class="na"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`task#&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;sk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`task#&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="c1"&gt;// we are using a gsi to allow listing all items of a certain type, which in this case is task items&lt;/span&gt;
          &lt;span class="c1"&gt;// task: GSI key sharding&lt;/span&gt;
          &lt;span class="na"&gt;siKey1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;task&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="c1"&gt;// tags are duplicated here to simplify retrieval&lt;/span&gt;
          &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tags&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RequestItems&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tableName&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;taskDbItem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// next we write all the tags as separate DynamoDB items. We use the tag name as the partition key, and the tag value and the TaskItem id as a composite sort key.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;tagName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tagValue&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tagDbItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;PutRequest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`tag#&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;tagName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;sk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;tagValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;#task#&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RequestItems&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tableName&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tagDbItem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;いうて &lt;code&gt;DocumentClient.WriteRequest&lt;/code&gt; という型情報が消える程度ですが、これが落とし穴です。
型情報がなくなった &lt;code&gt;params.RequestItems[this.tableName]&lt;/code&gt; の配列は、TypeScript の型推論が働くために、最初の &lt;code&gt;taskDbItem&lt;/code&gt; 構造の型の要素を持つことが期待されます。&lt;/p&gt;

&lt;p&gt;そこに &lt;code&gt;item.tags&lt;/code&gt; があったときに構造が異なる &lt;code&gt;taskDbItem&lt;/code&gt; を配列に追加しようとしたら、どうなるかわかりますね。 &lt;code&gt;TS2322&lt;/code&gt; です。&lt;/p&gt;

&lt;p&gt;おそらく Amplify Gen2 でリゾルバを上書きして書いたときも、同じようなコードを書くとエラーになると推測されます(CDKがesbuildした結果をデプロイするので)。&lt;/p&gt;

&lt;h4&gt;回避策を入れる&lt;/h4&gt;

&lt;p&gt;回避策の、先頭行に &lt;code&gt;// @ts-nocheck&lt;/code&gt; を入れる方法として、esbuild の &lt;code&gt;banner&lt;/code&gt; オプションを利用します。
バンドルのリンティングで紹介されているサンプルコードに設定を追加します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* eslint-disable */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;build&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;esbuild&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;eslint&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;esbuild-plugin-eslint&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;glob&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;glob&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/**/*.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;esm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;esnext&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;external&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-appsync/utils&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;outdir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dist/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;entryPoints&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;eslint&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;useEslintrc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})],&lt;/span&gt;
  &lt;span class="na"&gt;banner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;js&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;// @ts-nocheck&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この例のままだと、全部のファイルに &lt;code&gt;// @ts-nocheck&lt;/code&gt; が入ってしまうので、特定のファイルだけにしたい場合は、esbuild を2つに分割して特定のリゾルバや関数だけに追加されるようにすると良いでしょう。&lt;/p&gt;

&lt;p&gt;なお、AWSサポートへは TypeScript かつデベロッパーガイドに書いてあるとおり &lt;code&gt;eslint プラグインの設定&lt;/code&gt;  をしてあれば、同じ効果を期待できるそうなので、全ファイルに入っていたとしても大きな問題はないのかな？とも思います。 &lt;code&gt;// @ts-nocheck&lt;/code&gt; を入れたAPIについては念入りに動作確認をするようにコメントが入っていたこともお伝えしておきます。&lt;/p&gt;

&lt;h3&gt;まとめ&lt;/h3&gt;

&lt;p&gt;AppSync のリゾルバーや関数を JavaScript (TypeScript) で書けるようになって、VTL を書くよりも生産性があがったり、ユニットテストが書けるようになって品質を維持しやすくなるといった効果が期待できます。&lt;/p&gt;

&lt;p&gt;一方で TS2322 に遭遇するといった落とし穴もあったりするので、注意は必要ですね。&lt;/p&gt;

&lt;p&gt;APPSYNC_JS でそういったトラブルになった記事だったり StackOverflow の投稿だったりはまだ少ないので、問題や回避策がわかったら積極的に記事にしておくと良いかな？というのが今回ブログ記事にするきっかけにもなりました。&lt;/p&gt;

&lt;p&gt;僕は JavaScript で書けるようになってすごく嬉しいので、今後も使っていきたいなと思っています。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>CodeCommit で Renovate を使う</title>
    <link rel="alternate" href="http://blog.url.com/2024/05/30/renovate-on-codecommit.html"/>
    <id>http://blog.url.com/2024/05/30/renovate-on-codecommit.html</id>
    <published>2024-05-30T17:03:00+09:00</published>
    <updated>2024-06-06T11:05:19+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://www.mend.io/renovate/"&gt;Renovate&lt;/a&gt;は依存関係の更新を自動化（PRを生成してくれたり、マージしてくれたり） するツールで、dependabot などと並んで有名なツールです。&lt;/p&gt;

&lt;p&gt;CodeCommit で依存関係の更新を公式にサポートしているツールを探していたのですが、Renovate しか見つからなかったので、選択肢を検討することもなく導入してみることにしました。&lt;/p&gt;

&lt;h3&gt;導入方法&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.renovatebot.com/modules/platform/codecommit/"&gt;CodeCommit に導入するための公式ドキュメント&lt;/a&gt;があります。&lt;/p&gt;

&lt;p&gt;前回のブログ&lt;a href="/2024/05/28/using-codecommit-codebuild-like-a-github-and-the-actions.html"&gt;CodeCommit と CodeBuild を GitHub と Actions の組み合わせのように使う&lt;/a&gt;で CodeCommit と CodeBuild の環境は設定済みで、かつ PR に対してビルド結果が連携できるようにしてあります。&lt;/p&gt;

&lt;p&gt;Renovate を導入するときもこの手順は重要で、ライブラリをアップデートするときにビルドが通過するかわからないものはマージできないので、まず導入前に連携できるように設定しておきましょう。&lt;/p&gt;

&lt;h4&gt;AWS 環境の設定&lt;/h4&gt;

&lt;p&gt;ドキュメントどおり IAM や Role の設定を行います。
ここはプロジェクトによってやり方がいろいろあると思いますが、結果として CodeBuild から CodeCommit に PR が出せる様な設定になっていれば良いです。
必要なポリシーなども列挙されているので、ドキュメントをよく読んで進めれば大丈夫です。&lt;/p&gt;

&lt;h4&gt;AWS 環境ではできないこと&lt;/h4&gt;

&lt;p&gt;これもドキュメントに明記されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PR への担当アサイン&lt;/li&gt;
&lt;li&gt;PRの自動マージ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rebaseLabel&lt;/code&gt; オプションの有効化&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;環境設定ファイルを記述する&lt;/h4&gt;

&lt;p&gt;ドキュメントでは &lt;code&gt;config.js&lt;/code&gt; で書かれていますが、 &lt;code&gt;renovate.json&lt;/code&gt; でも大丈夫です。
このあたりはお好きな&lt;a href="https://docs.renovatebot.com/configuration-options/"&gt;設定ファイル形式&lt;/a&gt;を利用すると良いでしょう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"$schema"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://docs.renovatebot.com/renovate-schema.json"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;スキーマ定義やパッケージルールなどを設定しておきます。
Renovate の対象リポジトリごとにリポジトリルートにファイルを設置します。&lt;/p&gt;

&lt;h4&gt;CodeBuild の設定&lt;/h4&gt;

&lt;h5&gt;導入方法の選択&lt;/h5&gt;

&lt;p&gt;Renovate を導入するときの単位として、2つの選択肢があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Renovate を複数のリポジトリに対して実行する管理リポジトリを1つと、対になる CodeBuild プロジェクトを作成する&lt;/li&gt;
&lt;li&gt;Renovate の対象リポジトリごとに CodeBuild のプロジェクトを作成する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前者の良いところは、Renovate の対象リポジトリが多数あるとき、管理リポジトリに設定している CodeBuild の buildspec ファイルでリポジトリ名を列挙していき、対象リポジトリ側は、リポジトリルートに設定ファイルを入れておくだけで良いことです。
ただしリポジトリごとに実行スケジュールを変更するといったことはできないので、すべての対象リポジトリに対して順番に PR が作成されていきます。&lt;/p&gt;

&lt;p&gt;後者の良いところは、リポジトリごとに実行スケジュールを柔軟に変更できることです。ただしリポジトリ数ぶんの CodeBuild プロジェクトが必要になるので対象リポジトリ数が多くなると面倒に感じるかもしれません（IaC で構築していればそうでもないかも？）。&lt;/p&gt;

&lt;h5&gt;buildspec ファイルの設置&lt;/h5&gt;

&lt;p&gt;今回は導入リポジトリ数も少なかったのと、実行スケジュールをリポジトリごとに変更したいという要望があったので、後者の方式で導入してみました。&lt;/p&gt;

&lt;p&gt;どちらの方法でも CodeCommit / CodeBuild では実現可能です。&lt;/p&gt;

&lt;p&gt;前回の記事で build.yml や deploy.yml を作っているので、そこに renovate.yml といった名前で buildspec ファイルを記述します。&lt;/p&gt;

&lt;p&gt;ドキュメントでは Docker を使う方法と CLI を使う方法が紹介されていますが、私たちは CLI の方式を採用しました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;
&lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;shell&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bash&lt;/span&gt;
  &lt;span class="na"&gt;git-credential-helper&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yes&lt;/span&gt;
  &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;RENOVATE_PLATFORM&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;codecommit'&lt;/span&gt;
    &lt;span class="na"&gt;RENOVATE_REPOSITORIES&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;["repoName1"]'&lt;/span&gt;
    &lt;span class="na"&gt;RENOVATE_CONFIG&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;{"extends":["config:recommended"]}'&lt;/span&gt;
    &lt;span class="na"&gt;LOG_LEVEL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;debug'&lt;/span&gt;
    &lt;span class="na"&gt;AWS_REGION&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;ap-northeast-1'&lt;/span&gt;
&lt;span class="na"&gt;phases&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;install&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runtime-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;nodejs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;on-failure&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CONTINUE&lt;/span&gt;
    &lt;span class="na"&gt;commands&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;npm install -g renovate&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;renovate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;RENOVATE_REPOSITORIES&lt;/code&gt; が違うだけで、各リポジトリに入れておきます。&lt;/p&gt;

&lt;h5&gt;CodeBuild プロジェクトの作成して実行スケジュールを設定する&lt;/h5&gt;

&lt;p&gt;CodeBuild プロジェクトを新規作成してリポジトリを紐づけておきます。
あとは実行スケジュールを EventBridge に設定して、作成した CodeBuild プロジェクトを実行 ( &lt;code&gt;StartBuild&lt;/code&gt; ) するように設定します。&lt;/p&gt;

&lt;p&gt;ここまでで実行スケジュールに応じて PR が生成できるようになります。&lt;/p&gt;

&lt;h3&gt;セキュリティアップデートに対応する&lt;/h3&gt;

&lt;p&gt;Renovate は標準では CVE などに対応するパッチの PR は生成されません。
この機能を有効にするためのオプションは2つあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.renovatebot.com/configuration-options/#vulnerabilityalerts"&gt;vulnerabilityAlerts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.renovatebot.com/configuration-options/#osvvulnerabilityalerts"&gt;osvVulnerabilityAlerts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前者は GitHub のみサポートしており CodeCommit では利用できません。
後者は実験的な機能という位置付けのようですが、すべてのプラットフォームで動作する様になっています。&lt;/p&gt;

&lt;h4&gt;osvVulnerabilityAlerts を有効にする&lt;/h4&gt;

&lt;p&gt;環境設定ファイル（この記事では renovate.json）に設定を追加します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"$schema"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://docs.renovatebot.com/renovate-schema.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"osvVulnerabilityAlerts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;実は GitHub が必要なんです&lt;/h4&gt;

&lt;p&gt;ドキュメントを読むとこれだけで良いのかと思っていたのですが、実際に Renovate を実行しても CVE の PR は生成されません。&lt;/p&gt;

&lt;p&gt;おや？っと思ってログを確認したりしたのですが、原因がわからず Renovate のソースコード自体を確認してみました。&lt;/p&gt;

&lt;p&gt;すると、なんと OSV のデータソースが GitHub に固定してハードコードされてるじゃないですか。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/process/vulnerabilities.ts#L52"&gt;該当のコード&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// hard-coded logic to use authentication for github.com based on the githubToken for api.github.com&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findGithubToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;hostType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;github&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.github.com/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;osvOffline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;OsvOffline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ドキュメントからリンクされている&lt;a href="https://github.com/renovatebot/renovate/discussions/20542"&gt;ディスカッション&lt;/a&gt;には、&lt;a href="https://github.com/renovatebot/renovate/discussions/20542#discussioncomment-8889250"&gt;違うデータソースを使う場合の書き方&lt;/a&gt;があって、OSVの任意のデータソースを利用する場合は独自にzipファイルをダウンロードしてやるのも良いでしょう。&lt;/p&gt;

&lt;p&gt;で、そのまま GitHub のデータソースを利用する場合は、GitHub の PAT を生成して（権限は &lt;code&gt;public_repo&lt;/code&gt; ぐらいでok） renovate.yml に設定を追加します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;secrets-manager&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;GITHUB_COM_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;[シークレットの名前]:[シークレットのキー]"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CodeBuild の buildspec では環境変数に設定する値を SecretsManager から取得できるので、GitHub で生成した PAT はそこに格納しておいて、CodeBuild から参照できるようにしておきましょう。&lt;/p&gt;

&lt;p&gt;プロジェクト都合で GitHub 使えないから CodeCommit 使っているのに！という声はごもっともだと思うので、そういう場合は zip ファイルをダウンロードして実行する手順を試してみることをお勧めします。&lt;/p&gt;

&lt;h3&gt;さいごに&lt;/h3&gt;

&lt;p&gt;できれば CodeCommit も GitHub と Dependabot の関係のように標準で脆弱性の PR 対応して欲しいですよね。
ビルド結果の通知とか脆弱性の対応とか、Code兄弟の機能として不足しているなーという部分の強化に期待しましょう。&lt;/p&gt;
</content>
  </entry>
</feed>
