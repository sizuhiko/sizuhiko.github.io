<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2014-08-17T07:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>CakePHP2のプラグインをTravis.ciで継続的インテグレーションする</title>
    <link rel="alternate" href="http://blog.url.com/2014/08/17/cakephp2_plugin_travis.html"/>
    <id>http://blog.url.com/2014/08/17/cakephp2_plugin_travis.html</id>
    <published>2014-08-17T07:00:00Z</published>
    <updated>2014-08-17T17:58:09+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;春先ぐらいからBlogの更新が滞っていましたが、その要因となったアレが大分落ち着いてきたので、たまっていたネタを順番に書き出します。&lt;/p&gt;

&lt;p&gt;CakePHP2のプラグインを作成／公開していて、継続的インテグレーションってどうするの？と思っていました。
もちろんユニットテスト書いてあるし、素晴らしい協力者の方がPull Requestを送ってくれれば、developブランチに取り込んでテストしたりします。&lt;/p&gt;

&lt;p&gt;Githubを徘徊していると、よく見る&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakephp2_plugin_ci_1.png" /&gt;&lt;/p&gt;

&lt;p&gt;これを表示したいと思ったのです。&lt;/p&gt;

&lt;p&gt;ただCakePHP2のプラグインは当然それだけではユニットテストを実行できません。CakePHPのアプリケーションがあって、テスト用データベースとその設定があって…、ぬーん。
早い話、テスト用のアプリケーション作って、そこからテスト実行すれば良いの？ということをずっと思っていました。&lt;/p&gt;

&lt;h3&gt;CakePHPの有名プラグインはどうしているのだろう？&lt;/h3&gt;

&lt;p&gt;と思い、最初にチェックしたのはCakeDC/searchプラグイン。
大抵のアプリケーションで使う、もっともメジャーなプラグインではないかと思います。
Searchプラグインにも、あのビルド成功やダウンロード数、バージョン番号の画像が表示されています。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakephp2_plugin_ci_2.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.travis.yml&lt;/code&gt; ファイルがあるので、内容を確認してみます。
すると、&lt;/p&gt;
&lt;pre class="highlight yaml"&gt;&lt;span class="s"&gt;before_script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;git clone https://github.com/burzum/travis.git --depth 1 ../travis&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;../travis/before_script.sh&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;if [ "$PHPCS" != 1 ]; then&lt;/span&gt;
            &lt;span class="s"&gt;echo "&lt;/span&gt;
                &lt;span class="s"&gt;require_once APP . DS . 'vendor' . DS . 'phpunit' . DS . 'phpunit' . DS . 'PHPUnit' . DS . 'Autoload.php';&lt;/span&gt;
            &lt;span class="s"&gt;" &amp;gt;&amp;gt; ../cakephp/app/Config/bootstrap.php;&lt;/span&gt;
    &lt;span class="s"&gt;fi&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;https://github.com/burzum/travis.git&lt;/code&gt;をcloneしてきて、何かやっているようです。&lt;/p&gt;

&lt;h3&gt;CakePHPプラグインを簡単にTravis.ciで継続的インテグレーションできる&lt;/h3&gt;

&lt;p&gt;早速、ページにアクセスしてみると、どうもそれはあの&lt;code&gt;FriendsOfCake&lt;/code&gt;からForkされたもののようです。
&lt;code&gt;FriendsOfCake&lt;/code&gt;の&lt;a href="https://github.com/FriendsOfCake/travis"&gt;元リポジトリ&lt;/a&gt;を確認します。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Easy travis setup for CakePHP plugins
This repository helps easy travis integration for CakePHP plugins, primarily focused on FriendsOfCake projects, but can be used within any plugin when satisfying the requirements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;おぉ、正に私の求めていたもの。&lt;/p&gt;

&lt;h4&gt;Fabricateに導入してみた&lt;/h4&gt;

&lt;p&gt;最近作った中で、最も思い入れのあるCakePHPプラグイン&lt;code&gt;Fabricate&lt;/code&gt;を継続的インテグレーションするため、上記の&lt;code&gt;FriendsOfCake/travis&lt;/code&gt;を導入してみます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Quick Install&lt;/code&gt;に書いてるとおり、以下の手順で進めます。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/develop/fabricate

git clone https://github.com/FriendsOfCake/travis.git

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PLUGIN_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Fabricate"&lt;/span&gt;

travis/setup.sh

rm -rf travis
&lt;/pre&gt;

&lt;p&gt;私がやったときはこの手順ではなかったのですが、最近変わったみたいです…
まぁ細かい事は気にせずですね。&lt;/p&gt;

&lt;p&gt;実行すると、以下のファイルが自動生成されます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.travis.yml : Travis.ciで継続的インテグレーションを実行するための設定ファイル&lt;/li&gt;
&lt;li&gt;Test/Case/AllFabricateTest.php : プラグインのユニットテストをすべて実行するテストスイート。すでにこの命名規則で生成されていれば作られません。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以前のバージョンでは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.editorconfig&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.semver&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.travis.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.AllPluginNameTest.php&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;composer.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CONTRIBUTING.markdown&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LICENSE.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;README.markdown&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;が生成されていましたが、継続的インテグレーションには必要がないファイルも混在していたので、整理されたものと思います。&lt;/p&gt;

&lt;p&gt;後はTravis.ciにサインアップして、リポジトリを追加するだけです。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakephp2_plugin_ci_3.png" /&gt;&lt;/p&gt;

&lt;p&gt;実は、これが最初のビルド。&lt;code&gt;PLUGIN_NAME&lt;/code&gt;をexportしていなかったので、正しくテストの実行が動いていませんでした。&lt;code&gt;PLUGIN_NAME&lt;/code&gt;はちゃんとexportするようにした方が良いです。
.travis.ymlの&lt;code&gt;PLUGIN_NAME&lt;/code&gt;を&lt;code&gt;Fabricate&lt;/code&gt;に設定して実行した結果が以下の画面です。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakephp2_plugin_ci_4.png" /&gt;&lt;/p&gt;

&lt;p&gt;現在のtravis.gitではPHP5.4以上のようなので、問題ないのですが、当時（と言っても数ヶ月前）はPHP5.3もテスト対象になっていたので、ショートArrayシンタックスを使っている私のコードはテストが失敗していました。.travis,ymlのPHP部分を以下のように変更して&lt;/p&gt;
&lt;pre class="highlight yaml"&gt;&lt;span class="s"&gt;php&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;5.4&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;5.5&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;pushすると、ビルド結果は以下のようになります。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakephp2_plugin_ci_5.png" /&gt;&lt;/p&gt;

&lt;p&gt;PHPCS以外は成功しています。&lt;/p&gt;

&lt;p&gt;PHPCSではCakePHPのコード標準がチェックされます。
CakePHPの標準コードチェックだと厳しい部分だったり、パラメータを変更してチェックさせたくないディレクトリがあったりすると思うので、&lt;code&gt;PHPCS_ARGS&lt;/code&gt;でphpcsを実行するときのパラメータを上書きできるようになっています。&lt;/p&gt;
&lt;pre class="highlight yaml"&gt;&lt;span class="s"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;include&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;php&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;5.4&lt;/span&gt;
      &lt;span class="s"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;COVERALLS=1&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;php&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;5.4&lt;/span&gt;
      &lt;span class="s"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;PHPCS=1&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;PHPCS_ARGS="-p -s --extensions=php --standard=ruleset.xml --ignore='*/Test/*,*/Vendor/*' ."&lt;/span&gt;

&lt;/pre&gt;

&lt;p&gt;拡張子phpのファイルを対象とし、TestやVendorのディレクトリを対象外として実行します。
ruleset.xmlは以下のようにしました。&lt;/p&gt;
&lt;pre class="highlight xml"&gt;&lt;span class="nt"&gt;&amp;lt;ruleset&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"Custom Standard"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;rule&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;"CakePHP"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;exclude&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"CakePHP.NamingConventions.ValidVariableName.PrivateNoUnderscore"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;exclude&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"CakePHP.NamingConventions.ValidFunctionName.PrivateNoUnderscore"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;exclude&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"CakePHP.NamingConventions.ValidVariableName.ProtectedNoUnderscore"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;exclude&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"CakePHP.NamingConventions.ValidFunctionName.ProtectedNoUnderscore"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;exclude&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"CakePHP.NamingConventions.ValidFunctionName.ScopeNotCamelCaps"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;exclude&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"CakePHP.NamingConventions.ValidVariableName.MemberVarNotCamelCaps"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;exclude&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"CakePHP.WhiteSpace.TabAndSpace"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ruleset&amp;gt;&lt;/span&gt;

&lt;/pre&gt;

&lt;p&gt;CakePHPのコード標準ではprivateやprotectedの変数、関数の先頭にアンダースコアが求められるので、それを無効にしたのと、キャメルケースではない変数や関数名を使いたい箇所があったので、それを無効にしています。
最後の&lt;code&gt;CakePHP.WhiteSpace.TabAndSpace&lt;/code&gt;では、以下のように&lt;code&gt;=&lt;/code&gt;のインデント位置を合わせたコードがエラーになってしまうので、無効にしています（わかりづらいですが、=の位置が揃っています）。&lt;/p&gt;
&lt;pre class="highlight php"&gt;public function __construct($name) {
    $this-&amp;gt;name  = $name;
    $this-&amp;gt;items = [];
}
&lt;/pre&gt;

&lt;h3&gt;どうなっているのか？&lt;/h3&gt;

&lt;p&gt;プラグインのリポジトリには&lt;code&gt;.travis.yml&lt;/code&gt;が追加されるぐらいです。
この設定内で、FriendsOfCakeのtravisリポジトリがcloneされ、以下に記述されている手順が実行されます。&lt;/p&gt;
&lt;pre class="highlight yaml"&gt;&lt;span class="s"&gt;before_script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;git clone -b master https://github.com/FriendsOfCake/travis.git --depth 1 ../travis&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;../travis/before_script.sh&lt;/span&gt;

&lt;span class="s"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;../travis/script.sh&lt;/span&gt;

&lt;span class="s"&gt;after_success&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;../travis/after_success.sh&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;実行されるパターンは.travis.ymlに記述されている&lt;code&gt;php&lt;/code&gt;と&lt;code&gt;env-matrix&lt;/code&gt;の組み合わせと、&lt;code&gt;matrix&lt;/code&gt;のパターンになります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PHP5.4, DB=mysql CAKE_VERSION=2.4&lt;/li&gt;
&lt;li&gt;PHP5,4, DB=mysql CAKE_VERSION=2.5&lt;/li&gt;
&lt;li&gt;PHP5.5, DB=mysql CAKE_VERSION=2.4&lt;/li&gt;
&lt;li&gt;PHP5,5, DB=mysql CAKE_VERSION=2.5&lt;/li&gt;
&lt;li&gt;PHP5.4, COVERALLS=1&lt;/li&gt;
&lt;li&gt;PHP5.4, PHPCS=1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この6パターン毎に、&lt;code&gt;before_script&lt;/code&gt;、&lt;code&gt;script&lt;/code&gt;、&lt;code&gt;after_success&lt;/code&gt;が呼び出されます。&lt;/p&gt;

&lt;h4&gt;事前準備&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;before_script.sh&lt;/code&gt;は実行準備のためのスクリプトで、PHPCSが1にセットされている場合は、以下のとおりpearチャンネルからCakePHPのコード標準とphpcsが依存関係としてインストールされます。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$PHPCS&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;; &lt;span class="k"&gt;then
    &lt;/span&gt;pear channel-discover pear.cakephp.org
    pear install --alldeps cakephp/CakePHP_CodeSniffer
    phpenv rehash
    &lt;span class="nb"&gt;exit &lt;/span&gt;0
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;続いて、CakePHP本体が1つ親のディレクトリにインストールされます。Travis.ciではプラグインのリポジトリが最初にcloneされるのですが、結果として以下のようなディレクトリ構成となります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$HOME/sizuhiko/Fabricate : プラグイン本体&lt;/li&gt;
&lt;li&gt;$HOME/sizuhiko/travis : FriendsOfCakeのtravis.gitクローン先&lt;/li&gt;
&lt;li&gt;$HOME/sizuhiko/cakephp : CakePHP本体&lt;/li&gt;
&lt;li&gt;$HOME/sizuhiko/cakephp/app/Plugin/$PLUGIN_NAME : プラグイン本体がコピーされる先&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記ディレクトリ構成ができた後で、composer で依存関係を解決します。COVERALL用のカバレッジレポートも生成されるようにファイルが準備されます。&lt;/p&gt;

&lt;h4&gt;実行&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;script.sh&lt;/code&gt;がPHPCSが1の場合はphpcsを、それ以外の場合はユニットテストを実行します。&lt;/p&gt;

&lt;h4&gt;実行が成功したら&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;after_success.sh&lt;/code&gt;がCOVERALLのカバレッジレポートを生成します。&lt;/p&gt;

&lt;h3&gt;そして現在&lt;/h3&gt;

&lt;p&gt;最初のスクリーンショットがFabricateの現在の状態です。すべて成功しています。&lt;/p&gt;

&lt;p&gt;最後にREADMEにバッジを表示させる方法を紹介します。&lt;/p&gt;

&lt;h4&gt;Travis.ciのバッジを表示する&lt;/h4&gt;

&lt;p&gt;Travis.ciの画面にアクセスして&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakephp2_plugin_ci_6.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;build:failing&lt;/code&gt;のように表示されている画像をクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakephp2_plugin_ci_7.png" /&gt;&lt;/p&gt;

&lt;p&gt;ブランチを選択して、表示形式からマークダウンを選択したら、表示内容をREADME.mdに貼り付けます。&lt;/p&gt;

&lt;h4&gt;カバレッジのバッジを表示する&lt;/h4&gt;

&lt;p&gt;カバレッジは&lt;a href="https://coveralls.io/"&gt;COVERALL&lt;/a&gt;というサービスを使って表示します。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakephp2_plugin_ci_8.png" /&gt;&lt;/p&gt;

&lt;p&gt;サイトにアクセスして、サインアップはGithubのアカウントでできるの簡単です。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakephp2_plugin_ci_9.png" /&gt;&lt;/p&gt;

&lt;p&gt;サインアップ後に、上部のメニュー表示から&lt;code&gt;REPOS&lt;/code&gt;を選択して、&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakephp2_plugin_ci_10.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ADD REPO&lt;/code&gt;をクリックしてリポジトリを追加します。
その後、追加したリポジトリのページを表示します。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakephp2_plugin_ci_11.png" /&gt;&lt;/p&gt;

&lt;p&gt;今度は表示される画像ではなく、&lt;code&gt;GET BADGE URL&lt;/code&gt;というボタンをクリックします。このあたりのUIは統一されると嬉しいですね&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakephp2_plugin_ci_12.png" /&gt;&lt;/p&gt;

&lt;p&gt;いろいろな記述形式のコードが表示されるのでマークダウンのコードを選択してREADME.mdに貼り付けます。&lt;/p&gt;

&lt;h4&gt;ダウンロード数、バージョンを表示する&lt;/h4&gt;

&lt;p&gt;ここからはCIとは関係ないのですが、よく見るバッジであるダウンロード数とバージョン番号も表示してみたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://poser.pugx.org"&gt;Badge Poser&lt;/a&gt;というサイトにアクセスします。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakephp2_plugin_ci_13.png" /&gt;&lt;/p&gt;

&lt;p&gt;ダウンロード数やバージョン番号は、Packagistで表示されている情報を画像に変換するので、リポジトリがPackagistに登録されていることが条件となります。
&lt;code&gt;Show the markdown for your Badges&lt;/code&gt;にダウンロード数を表示したいPackagistのパッケージ名を入力します。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakephp2_plugin_ci_14.png" /&gt;&lt;/p&gt;

&lt;p&gt;表示形式からマークダウンを選択して、コードをREADME.mdに貼り付けます。&lt;/p&gt;

&lt;h3&gt;最後に&lt;/h3&gt;

&lt;p&gt;CakePHPのプラグインを継続的インテグレーションする方法は、実はとても簡単でした。
これを機に、まだプラグインを継続的インテグレーションしていない&lt;code&gt;そこのあなた&lt;/code&gt;も、Travis.ciとCOVERALLを使って継続的インテグレーションをしてみましょう。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>CakePHP3 もくもく会#5 に参加して Model の新機能を試してきた</title>
    <link rel="alternate" href="http://blog.url.com/2014/06/27/cake3_mokumoku_5.html"/>
    <id>http://blog.url.com/2014/06/27/cake3_mokumoku_5.html</id>
    <published>2014-06-27T05:19:00Z</published>
    <updated>2014-06-27T15:34:20+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;2013/6/16(月) に &lt;a href="http://www.coworking.tokyo.jp/"&gt;コワーキングスペース茅場町 Co-Edo（コエド）&lt;/a&gt; で行われた「&lt;a href="http://coedo-cakephp.doorkeeper.jp/events/12132"&gt;CakePHP3 もくもく会 #5&lt;/a&gt;」に参加しました。&lt;/p&gt;

&lt;p&gt;前回のイベントではBakeすることに成功したので、今回は大きく変更となったモデル周辺についてテストコードから把握してみる目標をたてました。&lt;/p&gt;

&lt;h3&gt;環境構築する（前回との差分）&lt;/h3&gt;

&lt;p&gt;3回目に参加した記事では&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;環境構築でも利用した Friends Of Cake のリポジトリにはCakePHPのアプリケーションスケルトンを作成する app-template というリポジトリがあります。
すでにCakePHP3用のスケルトンも(cake3ブランチとして)用意されているので、GitHubのREADMEに書いてあるとおりのコマンドでCakePHPのアプリケーション環境を構築します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;composer -sdev create-project friendsofcake/app-template app dev-cake3
&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;のように記述したのですが、その後devが上がったところでこちらのスケルトンは最新追従していなかったので、CakePHPの公式スケルトンを使っています。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;composer create-project -s dev cakephp/app dev-cake3
&lt;/pre&gt;

&lt;h3&gt;CakePHP3におけるモデル&lt;/h3&gt;

&lt;p&gt;CakePHP3では従来モデル（Model）と呼んでいたクラスはなくなり、テーブル（Table）とエンティティ（Entity）という2つのクラスに別れます。従来のモデルがテーブルに変更になりfindなどの責務を持っています。find結果は従来arrayで返却されてきたのですが、CakePHP3からはエンティティと呼ばれるオブジェクトで返却されます。
CakePHP1から2にかけてbasukeさんが作られた&lt;a href="https://github.com/josegonzalez/cakephp-entity"&gt;CakeEntity&lt;/a&gt;というプラグインがあります。このプラグインはCakePHP3の新しいモデルのベースになったものでもあり、利用したことがあればそれほど違和感なく移行できるのではないかと思います。&lt;/p&gt;

&lt;h3&gt;Bakeされた結果を見てみる&lt;/h3&gt;

&lt;p&gt;前回bakeコマンドで生成したモデル層のファイルを見てみると&lt;/p&gt;

&lt;p&gt;App/Model/Table/PostsTable.php&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;App\Model\Table&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;Cake\ORM\Table&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;Cake\Validation\Validator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="sd"&gt;/**
 * Posts Model
 */&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostsTable&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Table&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="sd"&gt;/**
 * Initialize method
 *
 * @param array $config The configuration for the Table.
 * @return void
 */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'posts'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;displayField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;primaryKey&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addBehavior&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Timestamp'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="sd"&gt;/**
 * Default validation rules.
 *
 * @param \Cake\Validation\Validator $validator
 * @return \Cake\Validation\Validator
 */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;validationDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Validator&lt;/span&gt; &lt;span class="nv"&gt;$validator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$validator&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'valid'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'rule'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'numeric'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;allowEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'create'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;allowEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;allowEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'body'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$validator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;App/Model/Entity/Post.php&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;App\Model\Entity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;Cake\ORM\Entity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="sd"&gt;/**
 * Post Entity.
 */&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Entity&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="sd"&gt;/**
 * Fields that can be mass assigned using newEntity() or patchEntity().
 *
 * @var array
 */&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$_accessible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'title'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'body'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;のようになっています。&lt;/p&gt;

&lt;p&gt;PostsTable::initialize()は従来publicプロパティとして定義していたテーブル名などの情報です。
validationDefault()は$validatesで定義していたバリデーション定義です。&lt;/p&gt;

&lt;p&gt;Postクラスはエンティティで$&lt;em&gt;accesibleに利用可能なフィールド名を列挙します。これはRailsでattr&lt;/em&gt;accessorを定義するとプロパティにアクセス可能になるのと同様の効果を持つようになると推測されますが、現時点では何も実装はされていないようです。&lt;/p&gt;

&lt;h3&gt;コアのテストコード見てみる&lt;/h3&gt;
&lt;pre class="highlight php"&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;testRewind&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'all'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$results&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$first&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$results&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$second&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/pre&gt;

&lt;p&gt;とてもザックリしたところを切り抜きましたが、まぁそういうことです。
これを2系のコードで似せて書くと&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;testRewind&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'all'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$results&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$first&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$results&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$second&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/pre&gt;

&lt;p&gt;えっ！行数3の方が増えてないか？！とかいうツッコミはいらないですよ！！
なんか聞いている程変わってないですよね。&lt;/p&gt;

&lt;p&gt;ではもう少し複雑な例を&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;testFindAllNoFieldsAndNoHydration&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
            &lt;span class="s1"&gt;'table'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'users'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'connection'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="nv"&gt;$results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'all'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'id IN'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;hydrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$expected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'id'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'username'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'mariano'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'password'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'$2a$10$u05j8FjsvLBNdfhBhc21LOuVMpzpabVXQ9OpC2wO3pSO0q6t7HHMO'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'created'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Carbon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'2007-03-17 01:16:23'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="s1"&gt;'updated'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Carbon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'2007-03-17 01:18:31'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'id'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'username'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'nate'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'password'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'$2a$10$u05j8FjsvLBNdfhBhc21LOuVMpzpabVXQ9OpC2wO3pSO0q6t7HHMO'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'created'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Carbon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'2008-03-17 01:18:23'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="s1"&gt;'updated'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Carbon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'2008-03-17 01:20:31'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$expected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$results&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/pre&gt;

&lt;p&gt;どうもテーブルには findやwhere,orderなどのメソッドがあり、それをチェインさせてクエリを組み立てるようです。これも他のActiveRecord系の記述とほぼ変わらない形式になります。
hydrate(false)を指定するとエンティティでなく従来の配列形式で値を戻すことができるようになっています。
メソッドチェインの最後のtoArray()はエンティティを配列形式で取得するという意味ではありません。CakePHP3からはfindの戻りがイテレータになります（配列ではないので注意が必要）。なのでイテレータからすべて配列形式で取得するという意味になります。&lt;/p&gt;

&lt;p&gt;ではいくつかそれ以外の例を見てみましょう。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
        &lt;span class="nv"&gt;$query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'all'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'created &amp;gt;='&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Carbon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'2010-01-22 00:00'&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;hydrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;たとえば取得するカラムを絞り込むためにはselect()を利用するようです。従来はfieldsで指定していたカラム名の配列です。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
        &lt;span class="nv"&gt;$query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'list'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'fields'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;hydrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;とはいえ、従来っぽい書き方もできるようです。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
        &lt;span class="nv"&gt;$results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'all'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'threaded'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'parent_id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;！！！！
findがチェインの中で2回呼ばれています。&lt;/p&gt;

&lt;h3&gt;これがCakePHP3のモデルだ！&lt;/h3&gt;

&lt;p&gt;findが2回とはどういうことなのか、ソースを調べてみました。
まずTable::find()とは何者なのか&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'all'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;callFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;どうもクエリオブジェクトを取得して、それにselect()をかけて….. callFinder って何ですか？を返すみたいです。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;callFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Query&lt;/span&gt; &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;applyOptions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getOptions&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$finder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'find'&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;ucfirst&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;          &lt;span class="c1"&gt;// ココ
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;method_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$finder&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="c1"&gt;// とココに注目
&lt;/span&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$finder&lt;/span&gt;&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_behaviors&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_behaviors&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;hasFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;_behaviors&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;callFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;\BadMethodCallException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nb"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Unknown finder method "%s"'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;find(&amp;lsquo;all&amp;rsquo;) と呼ぶと&lt;code&gt;findAll&lt;/code&gt;メソッドがあるかどうか（ビヘイビアも含めて）調べて、なければ例外になる。
ということはTableにfindAllとかあるの？&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Query&lt;/span&gt; &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;あるよ！&lt;/p&gt;

&lt;p&gt;そういうことか、これがCakePHP3のモデルか。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;条件やら何やらメソッドチェインである&lt;/li&gt;
&lt;li&gt;旧来の配列形式に変換できる&lt;/li&gt;
&lt;li&gt;findXxxで独自の条件などをメソッドチェインに組み込める（今ココ）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;独自の条件をメソッドチェインに組み込む&lt;/h3&gt;

&lt;p&gt;まずPostsテーブルにfindOrderIdDescというIDの降順で検索するメソッドを作成します。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;findOrderIdDesc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Query&lt;/span&gt; &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;order&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'desc'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;でそれを使うときは&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TableRegistry&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Posts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="nv"&gt;$posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Posts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'all'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'orderIdDesc'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;みたいに書けるわけです。
もちろんいくつチェインしても良いです。
例えば様々なテーブルで利用できるファインダ（findXxxメソッド）をtraitで共通化するもの面白そうです。&lt;/p&gt;

&lt;p&gt;このように新しいモデルはかなり期待の持てる作りにもなっています。
CakePHP3もAlphaになりました。
Alphaを使ってみての感想などはまた書きたいと思います&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Test the Web Forward Meetup (仮), Tokyo#2 に参加して Shadow DOM のテストを書いてきた</title>
    <link rel="alternate" href="http://blog.url.com/2014/04/19/twfm_2014_04.html"/>
    <id>http://blog.url.com/2014/04/19/twfm_2014_04.html</id>
    <published>2014-04-19T07:38:00Z</published>
    <updated>2014-04-19T17:31:21+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;html5jテスト部の活動「&lt;a href="http://html5j-testing.doorkeeper.jp/events/10161"&gt;Test the Web Forward Meetup (仮), Tokyo#2&lt;/a&gt;」に参加してきました。&lt;/p&gt;

&lt;p&gt;当日は1回目の反省をふまえて以下の仕様について実施することとなっていました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTMLのルビ（のパーサ周り）&lt;/li&gt;
&lt;li&gt;CSS Text Decoration&lt;/li&gt;
&lt;li&gt;Shadow DOM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;私は Shadow DOM を選択しました。理由はGoogle JapanのHayatoさんがSpecを書いているので、テストがマージされやすいんじゃないか？！という不純な動機と、仕様が難しいので参加者が少ないかな？という妄想からでした（ただ実際は一番人気でした！）。&lt;/p&gt;

&lt;p&gt;そもそもこの活動は何なのか？というと、&lt;code&gt;みんなでHTML5やCSS、API仕様のテストケースを書こうというミートアップです&lt;/code&gt;と書いてある通りです。
私たちWebに関わるデベロッパーであれば必ず利用するHTMLやCSS、ブラウザによって実装がマチマチでとか、IEがぁーとか言ってますよね。&lt;/p&gt;

&lt;p&gt;なぜそうなるのか？&lt;/p&gt;

&lt;p&gt;まずHTMLとかCSSはW3Cの仕様があってそれを各ブラウザベンダが実装するわけです（もちろん先に実装されているケースもあります）。ですが結果としてどのように見えるのか？という部分に関して言うと、特に&lt;code&gt;こうなるべき&lt;/code&gt;という具体的な結果が書いてある訳ではありません。そうなると各ベンダは自分の実装は正しいと思ってリリースするのですが、それぞれバラバラだったという結果が起きるのです。
そのため、W3Cではテストの充実に力を入れているのですが、現時点ではリソース不足であったり、そもそもスペックの理解不足という自体が起こります。W3Cのスペックを読んだことがあると何となく想像できるかな、と思います。
そこでTest the Web Forwardという公式イベントや、今回のようなコミュニティ主導のミートアップでテストコードを充実させようという機会が増えてきています。&lt;/p&gt;

&lt;h3&gt;テストの準備をする&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://testthewebforward.org/docs/github-101.html"&gt;Test the Web Forwardのドキュメント&lt;/a&gt;を見れば、今時のWebデベロッパーであれば問題なく環境を構築することができます。
pythonのバージョンが2.7系だったり、&lt;code&gt;pip install html5lib&lt;/code&gt; が必要なのに漏れていた（これについては今回のミートアップでPRが出されてマージされたはずです）り、ちょっと面倒なのですがまぁ問題ないでしょう。GitHub便利。そのうちVagrantファイルでも作ろうかなーと思っています。
ここまでは事前の準備としてやっておきました。&lt;/p&gt;

&lt;h3&gt;当日やったこと&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://w3c.github.io/webcomponents/spec/shadow/"&gt;W3Cのスペック&lt;/a&gt;を見ましょう。
当日はHayato Itoさんから仕様の説明を受けて進めるという流れだったのですが、それにしても仕様がむずい。
新しいテストケースはちょっと置いておき、既存のテストを流してみることにしました。すると１つエラーがあって、typoであることがわかったので&lt;a href="https://github.com/w3c/web-platform-tests/pull/861"&gt;Pull Request&lt;/a&gt;。これはすぐ取り込まれました。嬉しい！W3Cへの貢献ですよ！！&lt;/p&gt;

&lt;p&gt;続けて Fail しているテストについて、スペシャリストの方に確認して修正方針を聞いたりして、テストを黙々と書いていきます。
1日作業でしたが、2つのテスト失敗を修正してタイムアップ。&lt;/p&gt;

&lt;h3&gt;テストのやり方&lt;/h3&gt;

&lt;p&gt;テストには&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;refテスト
期待値:新しい仕様で書いたものと同じになるように既存の仕様で書いたもの、実際:新しい仕様で書いたもの、をスクリーンショットで比較する&lt;br&gt;&lt;/li&gt;
&lt;li&gt;domテスト
testharness.js という xUnit ベースのテスティングフレームワークが使える&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2通りのやり方があって、Shadow DOMはtestharness.jsでDOMのテストをする段階でした。
testharness.jsはxUnit系なんですが、equals(:actual, :expected) の記法になっていて、キモい！という話をしたら、開発者がmozilla系の方でfire方面ではそういう記述になっているという話を（FireFoxのcontributorの方から）伺うことができました。
これもミートアップでこその体験です。&lt;/p&gt;

&lt;p&gt;モダンなテストの書き方という意味では、サーバサイドスクリプトとか今時のJavaScriptのテスティングフレームワークの方がイケてる感じにできますが、これも歴史的な背景（DOMの細かい評価をするのにtestharness.jsが最適であるという理由）ということです。今後についてはわからないけど、各ブラウザベンダなどがテストするときに利用しているということで変更（例えばJasmineに変えるとか）には高い壁があるのかもしれないです。&lt;/p&gt;

&lt;h3&gt;最後に&lt;/h3&gt;

&lt;p&gt;W3Cの活動に貢献する作業は今後も続けて行きたいので、ミートアップなくてもテストコードを書き続けて行きたいとおもいました。
ただmetaデータの書き方とかちょっと特殊なところもあったので、新しくやる場合は既存のテストコードをいくつか参照して、書き方のテンプレート部分を把握した方が良いと思いました。&lt;/p&gt;

&lt;p&gt;それと今回はW3Cのテストスペシャリストとして Gérard Talbot 氏が初来日ということで基調講演を聴く事ができました。&lt;a href="http://test.csswg.org/suites/css2.1/nightly-unstable/html4/vertical-align-117a.htm"&gt;2年間かかって作ったという最高傑作テストケース&lt;/a&gt;を見てスペックのテストとは！を感じれたのも良かった。早速 Ahem フォントもインストールしました。&lt;/p&gt;

&lt;p&gt;ミートアップ終了後は懇親会もあったのですが、体調不良のため最後までは持たずに帰宅いたしました&amp;hellip;.&lt;/p&gt;

&lt;p&gt;会場を提供いただいた Adobe さん（ノベルティまでいただき感謝！）、スポンサー各社様の協力でとても楽しいイベント（部活）でした。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>CakePHP3 もくもく会#3 に参加して Bake してきた</title>
    <link rel="alternate" href="http://blog.url.com/2014/04/19/cake3_mokumoku_3.html"/>
    <id>http://blog.url.com/2014/04/19/cake3_mokumoku_3.html</id>
    <published>2014-04-19T05:04:00Z</published>
    <updated>2014-04-19T16:34:28+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;2013/4/4(金) に &lt;a href="http://www.coworking.tokyo.jp/"&gt;コワーキングスペース茅場町 Co-Edo（コエド）&lt;/a&gt; で行われた「&lt;a href="http://coedo-cakephp.doorkeeper.jp/events/10020"&gt;CakePHP3 もくもく会 #3&lt;/a&gt;」に参加しました。&lt;/p&gt;

&lt;p&gt;CakePHP3もdev preview2、せっかくの機会なので初Cake3を体験しようということです。&lt;/p&gt;

&lt;h3&gt;環境構築する&lt;/h3&gt;

&lt;p&gt;イベントページからリンクされていたCo-Edo謹製Vagrantを使っても良かったのですが、私はCakePHPのコアデベロッパも参加するコミュニティ &lt;a href="http://friendsofcake.com/"&gt;Friends Of Cake&lt;/a&gt; の &lt;a href="https://github.com/FriendsOfCake/vagrant-chef"&gt;Vagrant Chef&lt;/a&gt; を使いました。&lt;/p&gt;

&lt;p&gt;事前に用意するものは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.virtualbox.org/"&gt;Virtual Box&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です。概ね最新版で大丈夫でしょう。
ダウンロード＆インストールしたら、任意のディレクトリに先程のVagrant Chefをクローン（またはダウンロード）します。後は&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;cd vagrant-chef
vagrant up
&lt;/pre&gt;

&lt;p&gt;を実行してしばらく待ちましょう。Chefでインストールされるものは Vagrant Chef のREADMEに書いてあるので、そちらを参照してください。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;INFO: Chef Run complete in 541.542816 seconds
INFO: Running report handlers
INFO: Report handlers complete
&lt;/pre&gt;

&lt;p&gt;なメッセージが出て、コンソールが戻ってきたらインストールの完了です。
動作確認として、http://192.168.13.37/ にアクセスしてみてください。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakephp3_vagrant_chef.png" /&gt;&lt;/p&gt;

&lt;p&gt;デフォルト画面が出たら環境構築の完了です。&lt;/p&gt;

&lt;h3&gt;CakePHP3をインストールする&lt;/h3&gt;

&lt;p&gt;Vagrant ChefにはCakePHPをインストールするレシピも入っているのですが、Friends Of CakeにCakePHPの環境を作るスケルトンコマンドが別途用意されているので、レシピの編集は必要ないです。
生成したVagrant環境にログインします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;vagrant ssh
&lt;/pre&gt;

&lt;p&gt;ログイン直後&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;vagrant@precise64:/vagrant$ ls -la
total 20
drwxr-xr-x  1 vagrant vagrant  306 Apr 19 05:37 .
drwxr-xr-x 25 root    root    4096 Apr 19 05:37 ..
drwxr-xr-x  1 vagrant vagrant  102 Apr 19 05:37 app
drwxr-xr-x  1 vagrant vagrant  510 Apr 19 05:30 cookbooks
drwxr-xr-x  1 vagrant vagrant  442 Apr 19 05:30 .git
-rw-r--r--  1 vagrant vagrant   12 Apr 19 05:30 .gitignore
-rw-r--r--  1 vagrant vagrant 5489 Apr 19 05:30 README.markdown
drwxr-xr-x  1 vagrant vagrant  102 Apr 19 05:31 .vagrant
-rw-r--r--  1 vagrant vagrant 1179 Apr 19 05:30 Vagrantfile
&lt;/pre&gt;

&lt;p&gt;のようになっていて、すでにappディレクトリが存在します。ここには先程のデフォルト画面が入っているのですが、今回は新しくアプリを作成するのでappディレクトリは削除します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;rm -rf app
&lt;/pre&gt;

&lt;p&gt;環境構築でも利用した Friends Of Cake のリポジトリにはCakePHPのアプリケーションスケルトンを作成する app-template というリポジトリがあります。
すでにCakePHP3用のスケルトンも(cake3ブランチとして)用意されているので、GitHubのREADMEに書いてあるとおりのコマンドでCakePHPのアプリケーション環境を構築します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;composer -sdev create-project friendsofcake/app-template app dev-cake3
&lt;/pre&gt;

&lt;p&gt;app の部分がアプリケーション名です。Vagrant Chefを使った場合はappを指定してください。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;Do you want to remove the existing VCS (.git, .svn..) history? [Y,n]? 
&lt;/pre&gt;

&lt;p&gt;最後に上記のような確認メッセージが出てくるので、履歴が気にならなければそのままEnterを押して終了します。
インストールの確認として、http://192.168.13.37/ にアクセスしてみてください。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakephp3_installed.png" /&gt;&lt;/p&gt;

&lt;p&gt;おなじみのCakePHP画面が表示されます。tmpディレクトリが書き込みできないと警告されます。これはwebサーバのデフォルトuserがvagrantでなくwww-dataであるためですが、開発環境用なの気にせず&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;sudo chmod -R 777 app/tmp
&lt;/pre&gt;

&lt;p&gt;などのコマンドで権限を書き換えてください。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakephp3_tmp_ok.png" /&gt;&lt;/p&gt;

&lt;h3&gt;データベースを設定する&lt;/h3&gt;

&lt;p&gt;vagrant-chefを使うとデフォルトで database&lt;em&gt;name, test&lt;/em&gt;database_name というデータベースが生成されています。
ただ文字コードの指定などの問題もあると思うので、ここは自分でデータベースを作成します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;mysql -u root -p
&lt;/pre&gt;

&lt;p&gt;vagrant-chefのMySQL rootパスワードは、vagrant-chefのREADMEを参照ください（現時点ではbananasです）。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;mysql&amp;gt; CREATE DATABASE cake3_mokumoku CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
mysql&amp;gt; CREATE DATABASE test_cake3_mokumoku CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
&lt;/pre&gt;

&lt;p&gt;続けておなじみのpostsテーブルを作成します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;mysql&amp;gt; use cake3_mokumoku;
mysql&amp;gt; CREATE TABLE `posts` (
          `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
          `title` varchar(50) DEFAULT NULL,
          `body` text,
          `created` datetime DEFAULT NULL,
          `modified` datetime DEFAULT NULL,
          PRIMARY KEY (`id`)
        ) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;
&lt;/pre&gt;

&lt;p&gt;app-templateで作成したCakePHPアプリケーションは、&lt;a href="https://github.com/josegonzalez/php-dotenv"&gt;php-dotenv&lt;/a&gt;というライブラリを使って環境設定できるようになっています。
&lt;code&gt;app/App/Config/.env.default&lt;/code&gt; ファイルをコピーして &lt;code&gt;app/App/Config/.env&lt;/code&gt;ファイルを作成します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;// app/App/Config/.env
export DATABASE_URL="mysql://my_app:secret@localhost/my_app?encoding=utf8"
export DATABASE_TEST_URL="mysql://my_app:secret@localhost/test_myapp?encoding=utf8"
&lt;/pre&gt;

&lt;p&gt;の部分を&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;// mysql://ユーザ名:パスワード@URL/データベース名
export CAKEDATABASE_URL="mysql://root:bananas@localhost/cake3_mokumoku?encoding=utf8"
export CAKEDATABASE_TEST_URL="mysql://root:bananas@localhost/test_cake3_mokumoku?encoding=utf8"
&lt;/pre&gt;

&lt;p&gt;のように書き換えます。データベースの詳しい設定方法は &lt;a href="https://github.com/AD7six/php-dsn"&gt;AD7six/php-dsn&lt;/a&gt;を参照ください。
exportの名前を変更しているのは、nginxのfastcgiパラメータとしてvagrantインストール時に&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;fastcgi_param DATABASE_URL          "mysql://root:&amp;lt;%= node[:mysql][:server_root_password] %&amp;gt;@localhost/database_name?encoding=utf8";
fastcgi_param DATABASE_TEST_URL     "mysql://root:&amp;lt;%= node[:mysql][:server_root_password] %&amp;gt;@localhost/test_database_name?encoding=utf8";
&lt;/pre&gt;

&lt;p&gt;のような指定がされているため、設定値が重複してしまいfastcgi側が優先される仕組みとなっています。
このため異なる名前に変更しておきます。
合わせて、app.phpでDATABASE&lt;em&gt;URLを利用している箇所もCAKEDATABASE&lt;/em&gt;URLに変更します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;// app/Config/app.php#L211-
/**
 * Connection information used by the ORM to connect
 * to your application's datastores.
 */
    'Datasources' =&amp;gt; [
        'default' =&amp;gt; DbDsn::parse(env('CAKEDATABASE_URL')),

        /**
         * The test connection is used during the test suite.
         */
        'test' =&amp;gt; DbDsn::parse(env('CAKEDATABASE_TEST_URL'))
    ],
&lt;/pre&gt;

&lt;h3&gt;Cakeシェルを利用する&lt;/h3&gt;

&lt;p&gt;コンソールから&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;cd app/App
Console/cake -h
&lt;/pre&gt;

&lt;p&gt;とヘルプを表示してみたいのですが、もし&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;Exception: Shell class for "-working" could not be found. in [/vagrant/app/vendor/cakephp/cakephp/src/Console/ShellDispatcher.php, line 178]
&lt;/pre&gt;

&lt;p&gt;というエラーが表示されたら、app/App/Console/cake を編集して&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;exec php -q "$CONSOLE"/cake.php -working "$APP" "$@"
&lt;/pre&gt;

&lt;p&gt;の行を&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;exec php -q "$CONSOLE"/cake.php "$@"
&lt;/pre&gt;

&lt;p&gt;のように変更してください。現時点では -working オプションがあるとうまく動作しないためです。
うまく動作した場合は&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;Console/cake -h

Welcome to CakePHP v3.0.0-dev2 Console
---------------------------------------------------------------
App : App
Path: /vagrant/app/App/
---------------------------------------------------------------
Current Paths:

&lt;span class="k"&gt;*&lt;/span&gt; app: App
&lt;span class="k"&gt;*&lt;/span&gt; root: /vagrant/app
&lt;span class="k"&gt;*&lt;/span&gt; core: /vagrant/app/vendor/cakephp/cakephp

Available Shells:

&lt;span class="o"&gt;[&lt;/span&gt;CORE] bake, i18n, server, &lt;span class="nb"&gt;test&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;app] console

To run an app or core &lt;span class="nb"&gt;command&lt;/span&gt;, &lt;span class="nb"&gt;type &lt;/span&gt;cake shell_name &lt;span class="o"&gt;[&lt;/span&gt;args]
To run a plugin &lt;span class="nb"&gt;command&lt;/span&gt;, &lt;span class="nb"&gt;type &lt;/span&gt;cake Plugin.shell_name &lt;span class="o"&gt;[&lt;/span&gt;args]
To get &lt;span class="nb"&gt;help &lt;/span&gt;on a specific &lt;span class="nb"&gt;command&lt;/span&gt;, &lt;span class="nb"&gt;type &lt;/span&gt;cake shell_name --help
&lt;/pre&gt;

&lt;p&gt;のように表示されるはずです。&lt;/p&gt;

&lt;h3&gt;Bakeする&lt;/h3&gt;

&lt;p&gt;では早速Bakeしましょう&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$ Console/cake bake model Posts

Welcome to CakePHP v3.0.0-dev2 Console
---------------------------------------------------------------
App : App
Path: /vagrant/app/App/
---------------------------------------------------------------
One moment while associations are detected.

Baking table class for Posts...

Creating file /vagrant/app/App/Model/Table/PostsTable.php
Wrote `/vagrant/app/App/Model/Table/PostsTable.php`

Baking entity class for Post...

Creating file /vagrant/app/App/Model/Entity/Post.php
Wrote `/vagrant/app/App/Model/Entity/Post.php`

Baking test fixture for Posts...

Creating file /vagrant/app/Test/Fixture/PostFixture.php
Wrote `/vagrant/app/Test/Fixture/PostFixture.php`

Baking test case for App\Model\Table\PostsTable ...

Creating file /vagrant/app/Test/TestCase/Model/Table/PostsTableTest.php
Wrote `/vagrant/app/Test/TestCase/Model/Table/PostsTableTest.php`
&lt;/pre&gt;

&lt;p&gt;うまく動きます！！&lt;/p&gt;

&lt;p&gt;続けてコントローラとビューも&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$ Console/cake bake controller Posts
$ Console/cake bake view Posts
&lt;/pre&gt;

&lt;p&gt;で生成します。&lt;/p&gt;

&lt;p&gt;一通りbakeしたら、http://192.168.13.37/posts/ にアクセスしてみます。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakephp3_baked_posts.png" /&gt;&lt;/p&gt;

&lt;p&gt;おなじみのBake画面が表示されます。追加、変更、削除などもうまく動作するようです（執筆時においては）。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakephp3_baked_saved.png" /&gt;&lt;/p&gt;

&lt;h3&gt;最後に&lt;/h3&gt;

&lt;p&gt;このブログはもくもく会から2週間ぐらい経過してしまいましたが、今回再度新しい環境を作って試しています。
もくもく会のときも同様の手順で進めていたのですが、いくらかbake周辺でコードの変更があったようで、うまく動いていた箇所が動かなくなっていたり、動かなかった箇所が動いていたりします。
開発者用のプレビュー2ということで、今後もコードは変わって行くと思いますが、Bakeが動く事で取り急ぎ動作するプログラムのベースは作れるようになっています。
実際にアプリケーションを作ってみてCakePHP3の新機能について感想を書いてみたり、要望を出してみたりすることも実リリースまでの期間としては大切なことだと思うので、今回簡単ではありますがブログとして公開してみました。&lt;/p&gt;

&lt;p&gt;Co-Edo では今後も CakePHP3もくもく会が開かれると思うので、イベントページをチェックしておくと良いと思います。私も可能な範囲で参加していこうと思っています。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Composerのautoloadを使いこなす</title>
    <link rel="alternate" href="http://blog.url.com/2014/03/30/composer-autoload.html"/>
    <id>http://blog.url.com/2014/03/30/composer-autoload.html</id>
    <published>2014-03-30T09:22:00Z</published>
    <updated>2014-03-30T18:41:51+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Composerにはautoloadを自動生成する機能があり、これを利用するとrequire_onceなどを使わなくとも自動的にソースコードがロードされます。言葉のとおりautoloadですね。&lt;/p&gt;

&lt;p&gt;例えばCakePHPでは&lt;code&gt;App::uses()&lt;/code&gt;という記述で利用するクラスがどこにあるのか識別して、クラスをロードできるようにするのですが、これを使わなくても Composer のautoload機能を使うとクラスが利用可能になります。&lt;/p&gt;

&lt;p&gt;app/composer.json に以下のような定義を記述してみましょう。&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"autoload"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"classmap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Model"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Controller"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;ここで &lt;code&gt;autoloadだけ&lt;/code&gt; を更新するコマンドを実行します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;composer dumpautoload
&lt;/pre&gt;

&lt;p&gt;コマンド名からはちょっと想像がつきにくいのですが、これを実行すると &lt;code&gt;Generating autoload files&lt;/code&gt; という結果が表示されてautoload定義が更新されます。&lt;/p&gt;
&lt;pre class="highlight php"&gt;// app/Vendor/composer/autoload_classmap.php
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="c1"&gt;// autoload_classmap.php @generated by Composer
&lt;/span&gt;
&lt;span class="nv"&gt;$vendorDir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;__FILE__&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nv"&gt;$baseDir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$vendorDir&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;'AppController'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$baseDir&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/Controller/AppController.php'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'AppModel'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$baseDir&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/Model/AppModel.php'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'PagesController'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$baseDir&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/Controller/PagesController.php'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'Post'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$baseDir&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/Model/Post.php'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'PostsController'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$baseDir&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/Controller/PostsController.php'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;今回は予めpostsテーブルからbakeしてPostモデルとPostsコントローラを生成しておきました。
こうすると、App::uses()を記述しなくても、composerのautoloadがクラス名からPHPファイルを自動解決してくれます。App::uses()の記述が多過ぎてコードの見通しが悪い場合などに利用を検討されてはいかがでしょうか？&lt;/p&gt;

&lt;p&gt;この他にもComposerのautoload機能は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PSR-4&lt;/li&gt;
&lt;li&gt;PSR-0&lt;/li&gt;
&lt;li&gt;Files（ファイルを直接指定できる）&lt;/li&gt;
&lt;li&gt;include-path(どうしてもphp.ini的なincludeパスで解決しなくてはならない時のためにある)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったパス解決方法を用意していますので、namespaceが入ったものなどのサポートも万全です。&lt;/p&gt;

&lt;p&gt;詳しくは &lt;a href="https://getcomposer.org/doc/04-schema.md#autoload"&gt;Composerの公式ドキュメントのautoload&lt;/a&gt;を参照ください。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>テスト駆動web開発勉強会 Vol.1で発表しました</title>
    <link rel="alternate" href="http://blog.url.com/2014/03/22/web-testing-2014.html"/>
    <id>http://blog.url.com/2014/03/22/web-testing-2014.html</id>
    <published>2014-03-22T06:24:00Z</published>
    <updated>2014-03-22T16:17:20+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;2014/3/18に&lt;a href="http://blog.coworking.tokyo.jp/"&gt;コワーキングスペース茅場町Co-Edo&lt;/a&gt;で開催された「&lt;a href="http://tdd-web.doorkeeper.jp/events/9439"&gt;テスト駆動web開発勉強会 Vol.1&lt;/a&gt;」で「Webアプリケーションテスト手法2014」の発表をしました。&lt;/p&gt;

&lt;p&gt;第一回目ということと、1時間枠と限られた時間の中でCakePHPとJavaScriptについてのテストの話をしたので、ざっくりした内容となっています。&lt;/p&gt;

&lt;p&gt;今後ハンズオンなども計画しているようなので、DoorKeeperのページをチェックしておくと良いかなーと思います。
また当日は「&lt;a href="https://japheego.jp/"&gt;Java,PHPエンジニアの派遣、求人を探すならJapheego（ジャフィーゴ）&lt;/a&gt;」さんに懇親会スポンサーになっていただき、美味いビールとSUBWAYのサンドイッチをいただきました。感謝!
勉強会の懇親会はピザが多いのですが、連続すると飽きるのでたまには&lt;a href="http://demae-can.com/shop/menu/3007411/"&gt;SUBWAYのデリバリー&lt;/a&gt;とか良いと思いますよ！（SUBWAY大好きです）&lt;/p&gt;

&lt;div id="file_embed"&gt;
    &lt;div id="embedded_doc"&gt;&lt;p class="no_javascript"&gt;To see files inline you need to enable JavaScript.&lt;br /&gt;Yahoo has some &lt;a href="http://help.yahoo.com/l/us/yahoo/help/faq/browsers/browsers-63474.html" target="_blank"&gt;instructions for enabling JavaScript&lt;/a&gt; if you&amp;rsquo;re unsure how to do it.&lt;/p&gt;&lt;/div&gt;

    &lt;script type="text/javascript"&gt;
    var scribd_doc = scribd.Document.getDoc(213088053, 'key-c8og2igawuh9o7wx4j7');

    var onDocReady = function(e){
        // scribd_doc.api.setPage(3);
    }

    scribd_doc.addParam('jsapi_version', 2);
    scribd_doc.addEventListener('docReady', onDocReady);
    scribd_doc.addParam('height', 494);
    scribd_doc.addParam('width', 600);
    scribd_doc.write('embedded_doc');
    &lt;/script&gt;

    &lt;p class="download"&gt;&lt;a href="http://twileshare.com/uploads/WebTest201403_pub.pdf" class="big_green_button_link" title="Filename: WebTest201403_pub.pdf"&gt;Download this file&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;最後に、当日紹介したサンプルのCakePHPテストコードを掲載しておきます。&lt;/p&gt;

&lt;h5&gt;モデルのテスト例：&lt;/h5&gt;
&lt;pre class="highlight php"&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostTest&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;CakeTestCase&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nv"&gt;$fixture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'app.Post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'app.Comment'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ClassRegistry&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Post'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getMockForModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Post'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getMockForModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'save'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="err"&gt;タイトルがない場合はバリデーションエラーになること&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="err"&gt;データベースへの保存に失敗した場合は&lt;/span&gt;&lt;span class="nx"&gt;false&lt;/span&gt;&lt;span class="err"&gt;が戻ること&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="err"&gt;データベースへの保存に成功した場合は&lt;/span&gt;&lt;span class="nx"&gt;true&lt;/span&gt;&lt;span class="err"&gt;が戻ること&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="err"&gt;データベースに新規登録できること&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;モデルの初期化方法には3つのやり方があり、通常は&lt;code&gt;ClassRegistry::init()&lt;/code&gt;で良いのですが、モデルをモックしたい場合は&lt;code&gt;getMockForModel()&lt;/code&gt;というCakeTestCaseが用意してくれているモデル専用のモックジェネレータを使います。第二引数にメソッドの配列を指定するとパーシャルモックとなり、特定のメソッドのみモックします。&lt;/p&gt;

&lt;h5&gt;コントローラのテスト例:&lt;/h5&gt;
&lt;pre class="highlight php"&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostsControllerTest&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;ControllerTestCase&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Posts'&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;
            &lt;span class="s1"&gt;'components'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'Session'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'RequestHandler'&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'isPost'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'models'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'Post'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'findById'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'delete'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'methods'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'redirect'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'render'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="sd"&gt;/**
     * @expectedException NotFoundException
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="err"&gt;存在しない記事を表示すると&lt;/span&gt;&lt;span class="nx"&gt;NotFound&lt;/span&gt;&lt;span class="err"&gt;例外になること&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;testAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/posts/view/999'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="sd"&gt;/**
     * @expectedException BadRequestException
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="err"&gt;保存が&lt;/span&gt;&lt;span class="nx"&gt;POST&lt;/span&gt;&lt;span class="err"&gt;以外で呼び出されたら&lt;/span&gt;&lt;span class="nx"&gt;BadResuest&lt;/span&gt;&lt;span class="err"&gt;例外になること&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;testAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/posts/save/1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'method'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'get'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="err"&gt;削除が成功したら&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="err"&gt;にリダイレクトする&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;expects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;once&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'delete'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;will&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;returnValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;expects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;once&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'redirect'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'index'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;testAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/posts/delete/1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'method'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'delete'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="err"&gt;新しいトピックを追加できたら画面にメッセージが戻ること&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;コントローラのテストをするとき、testActionメソッドを呼び出すわけですが、そのときコントローラ自体をモックするには&lt;code&gt;ControllerTestCase&lt;/code&gt;が用意してくれているコントローラ専用のモックジェネレータである&lt;code&gt;generate()&lt;/code&gt;を利用します。generateで作成したインスタンスをテストケースクラスの&lt;code&gt;controller&lt;/code&gt;メンバ変数にセットすることでControllerTestCaseがURLからディスパッチするときに、このモックオブジェクトを利用してくれます。&lt;/p&gt;

&lt;p&gt;コントローラから依存関係にある、コンポーネント、モデルについてそれぞれサンプルのようにモックでき、コントローラ自体のメソッドも&lt;code&gt;methods&lt;/code&gt;に列挙することでモックできます。例えば&lt;code&gt;redirect()&lt;/code&gt;や&lt;code&gt;render()&lt;/code&gt;などがよく使われると思います。&lt;/p&gt;
</content>
  </entry>
</feed>
