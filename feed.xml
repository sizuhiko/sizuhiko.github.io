<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2025-04-16T10:40:00+09:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Next.js standalone ビルドしたアプリを App Runner で動かして X-Ray で計測する</title>
    <link rel="alternate" href="http://blog.url.com/2025/04/16/next-js-standalone-build-on-app-runner-with-x-ray-tracing.html"/>
    <id>http://blog.url.com/2025/04/16/next-js-standalone-build-on-app-runner-with-x-ray-tracing.html</id>
    <published>2025-04-16T10:40:00+09:00</published>
    <updated>2025-04-16T12:43:57+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;こちらの記事は &lt;a href="/2025/04/11/next-js-deploy-to-apprunner.html"&gt;Next.js で作ったアプリケーションを AppRunner にデプロイする&lt;/a&gt; の続編となります。
前編を読まないとわからない内容ではないですが、もし良ければ事前に確認してください。&lt;/p&gt;

&lt;p&gt;前の記事で Next.js を standalone ビルドしたアプリを App Runner にデプロイするところまで書きました。
さらに別の流れで&lt;a href="/2025/04/15/next-js-standalone-build-with-iast-agent.html"&gt;Next.js を standalone ビルドしたアプリで New Relic エージェントを動かす&lt;/a&gt;という記事も公開しましたが、こちらはテスト環境での IAST 用でした。
本番の計測は X-Ray を使う（なぜ New Relic でない？とかは置いておいて）ので、 CDK / App Runner / Next.js standalone という構成でどうやって実現したのかを記録していきます。&lt;/p&gt;

&lt;h3&gt;App Runner と X-Ray&lt;/h3&gt;

&lt;p&gt;AWS のサービスで X-Ray を使うとき、たとえば Lambda や StepFunctions で利用したいなと思ったときは簡単に利用できます。&lt;/p&gt;

&lt;p&gt;たとえば StepFunctions では CDK を使って、以下のように &lt;code&gt;tracingEnabled&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; すると X-Ray トレーシングが有効になります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Define a second state machine with the Task state above&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;sfn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StateMachine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ParentStateMachine&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;definition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;tracingEnabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lambda の場合は、以下のように &lt;code&gt;tracing&lt;/code&gt; を &lt;code&gt;Active&lt;/code&gt; にすると X-Ray トレーシングが有効になります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;codeSigningConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODEJS_18_X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;tracing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Tracing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ACTIVE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index.handler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromAsset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lambda-handler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;簡単ですね。&lt;/p&gt;

&lt;p&gt;で、App Runner ではどうするのかな？と思って調べていたら、&lt;a href="https://dev.classmethod.jp/articles/x-ray-with-cdk-with-app-runner/"&gt;AWS App RunnerでAWS X-Rayを使った分散トレースをAWS CDKで構築してみる(App Runner + Aurora Serverless v2)&lt;/a&gt; という記事を見つけました。&lt;/p&gt;

&lt;p&gt;なるほど、OpenTelemetry 必要なのか。単にフラグをONにするだけではできないんですね。&lt;/p&gt;

&lt;p&gt;この時点で役に立ちそうな記事もいくつか読んでおきました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.ojisan.io/next-otel/"&gt;Next.js の OpenTelemetry サポートを使う方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.classmethod.jp/articles/trace-nextjs-with-aws-xray/"&gt;Next.jsのサーバーサイド処理をX-Rayでトレースしてみた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;参考記事からやり方を検討する&lt;/h3&gt;

&lt;p&gt;参考記事を確認して、タスクを整理しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CDK で OpenTelemetry 計測を有効にする（最初の参考記事）&lt;/li&gt;
&lt;li&gt;Next.js の OpenTelemetry サポートを有効にする（次の2つの参考記事）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;CDK で OpenTelemetry 計測を有効にする&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://dev.classmethod.jp/articles/x-ray-with-cdk-with-app-runner/"&gt;AWS App RunnerでAWS X-Rayを使った分散トレースをAWS CDKで構築してみる(App Runner + Aurora Serverless v2)&lt;/a&gt; の &lt;code&gt;App Runnerサービスを作成&lt;/code&gt; でやっているように、App Runner で OpenTelemetryを有効にするにはコンストラクタではなく、CloudFormation クラスを使って作っていますが、現時点は Service の props に &lt;code&gt;observabilityConfiguration&lt;/code&gt; があるので、これにセットすると良さそうです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight typescript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observabilityConfiguration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ObservabilityConfiguration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ObservabilityConfiguration&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;observabilityConfigurationName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webapp-observability&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;traceConfigurationVendor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TraceConfigurationVendor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AWSXRAY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;WebAppService&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromEcr&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;imageConfiguration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ecrRepository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;tagOrDigest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webAppVersion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="na"&gt;serviceName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webapp-service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;autoDeploymentsEnabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;observabilityConfiguration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;healthCheck&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HealthCheck&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;healthyThreshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/favicon.ico&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;unhealthyThreshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;元々の Service に &lt;code&gt;ObservabilityConfiguration&lt;/code&gt; で生成した設定を &lt;code&gt;observabilityConfiguration&lt;/code&gt; に渡すだけです。ここは簡単ですね。
ポイントとしては &lt;code&gt;traceConfigurationVendor&lt;/code&gt; を &lt;code&gt;AWSXRAY&lt;/code&gt; に設定するところぐらいかな。&lt;/p&gt;

&lt;h4&gt;Next.js の OpenTelemetry サポートを有効にする&lt;/h4&gt;

&lt;p&gt;こちらも参考記事を元に設定していきます。&lt;/p&gt;

&lt;p&gt;まず依存ライブラリを追加します。今回はこのあたりを利用しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;@opentelemetry/api&lt;/li&gt;
&lt;li&gt;@opentelemetry/exporter-trace-otlp-grpc&lt;/li&gt;
&lt;li&gt;@opentelemetry/id-generator-aws-xray&lt;/li&gt;
&lt;li&gt;@opentelemetry/instrumentation-aws-sdk&lt;/li&gt;
&lt;li&gt;@opentelemetry/instrumentation-http&lt;/li&gt;
&lt;li&gt;@opentelemetry/instrumentation-undici&lt;/li&gt;
&lt;li&gt;@opentelemetry/propagator-aws-xray&lt;/li&gt;
&lt;li&gt;@opentelemetry/sdk-node&lt;/li&gt;
&lt;li&gt;@opentelemetry/sdk-trace-node&lt;/li&gt;
&lt;li&gt;@opentelemetry/semantic-conventions&lt;/li&gt;
&lt;li&gt;@opentelemetry/resources&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://nextjs.org/docs/14/app/building-your-application/optimizing/instrumentation"&gt;Next.js の公式ドキュメント Instrumentation 章&lt;/a&gt; を読むと&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To set up instrumentation, create instrumentation.ts|js file in the root directory of your project (or inside the src folder if using one).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ということなので &lt;code&gt;instrumentation.ts&lt;/code&gt; をルートディレクトリか、&lt;code&gt;src&lt;/code&gt; フォルダを使っている場合はその中に入れる必要がありそうなので、&lt;code&gt;src/instrumentation.ts&lt;/code&gt; を設置しました。&lt;/p&gt;

&lt;p&gt;続きのページに &lt;a href="https://nextjs.org/docs/14/pages/building-your-application/optimizing/open-telemetry"&gt;Next.js の公式ドキュメント OpenTelemetry 章&lt;/a&gt; があったので、こちらも確認しました。&lt;/p&gt;

&lt;p&gt;今回は Vercel を使うわけではないので、 &lt;code&gt;Manual OpenTelemetry configuration&lt;/code&gt; の部分を参考にしていきます。&lt;/p&gt;

&lt;p&gt;そうすると以下のようにランタイム判定してダイナミックローディングする必要がありそうなので、&lt;code&gt;instrumentation.ts&lt;/code&gt; から &lt;code&gt;instrumentation.node.ts&lt;/code&gt; を呼ぶように設定します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// `instrumentation.ts`&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_RUNTIME&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nodejs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./instrumentation.node.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは &lt;code&gt;instrumentation.node.ts&lt;/code&gt; で X-Ray に出力されるような設定をします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// instrumentation.node.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;OTLPTraceExporter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@opentelemetry/exporter-trace-otlp-grpc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AWSXRayIdGenerator&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@opentelemetry/id-generator-aws-xray&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AwsInstrumentation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@opentelemetry/instrumentation-aws-sdk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;HttpInstrumentation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@opentelemetry/instrumentation-http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;UndiciInstrumentation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@opentelemetry/instrumentation-undici&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AWSXRayPropagator&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@opentelemetry/propagator-aws-xray&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Resource&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@opentelemetry/resources&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NodeSDK&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@opentelemetry/sdk-node&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BatchSpanProcessor&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@opentelemetry/sdk-trace-base&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ATTR_SERVICE_NAME&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@opentelemetry/semantic-conventions&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NodeSDK&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;idGenerator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AWSXRayIdGenerator&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;  &lt;span class="c1"&gt;// AWS X-RayフォーマットのIDを生成&lt;/span&gt;
  &lt;span class="na"&gt;textMapPropagator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AWSXRayPropagator&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="c1"&gt;// AWS X-Ray Trace ヘッダー伝播プロトコルを利用&lt;/span&gt;
  &lt;span class="na"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ATTR_SERVICE_NAME&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webapp-service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})),&lt;/span&gt; &lt;span class="c1"&gt;// App Runner のサービス名を指定&lt;/span&gt;
  &lt;span class="na"&gt;instrumentations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="c1"&gt;// 利用する拡張機能&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpInstrumentation&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="c1"&gt;// HTTP API をトレース&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AwsInstrumentation&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;suppressInternalInstrumentation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="c1"&gt;// aws-sdk をトレース&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;UndiciInstrumentation&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="c1"&gt;// Node fetch API をトレース&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;spanProcessors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BatchSpanProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;OTLPTraceExporter&lt;/span&gt;&lt;span class="p"&gt;())],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こんな感じです。&lt;/p&gt;

&lt;h4&gt;ビルドして確認してみたがコードが生成されない&lt;/h4&gt;

&lt;p&gt;ここで &lt;code&gt;next build&lt;/code&gt; してコードが生成されるか確認してみました。&lt;/p&gt;

&lt;p&gt;すると、&lt;code&gt;instrumentation.ts&lt;/code&gt; が識別されてないのか？ビルド結果にコードが生成されません。&lt;/p&gt;

&lt;p&gt;こういうときはソースコードを読むしかないですね。Next.js のビルドコードは &lt;a href="https://github.com/vercel/next.js/blob/v14.2.28/packages/next/src/build/index.ts"&gt;next.js/packages/next/src/build/index.ts&lt;/a&gt; にあるようです。&lt;/p&gt;

&lt;p&gt;で、それっぽいところを検索していると、これか？という部分&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// #L882-L886&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;instrumentationHookDetectionRegExp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;`^&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;INSTRUMENTATION_HOOK_FILENAME&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\\.(?:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageExtensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;|&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;)$`&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;おやおやおや？拡張子のマッチが &lt;code&gt;pageExtensions&lt;/code&gt; なんですけど。少し前の公式ドキュメントに何て書いてありましたっけ？&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To set up instrumentation, create instrumentation.ts|js file in the root directory of your project (or inside the src folder if using one).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;です。&lt;code&gt;ts&lt;/code&gt; か &lt;code&gt;js&lt;/code&gt; なんでしょ。なんで &lt;code&gt;pageExtensions&lt;/code&gt; 使ってんのよ？？このファイルはページなのか？&lt;/p&gt;

&lt;p&gt;おそらくほとんどの人は &lt;code&gt;ts&lt;/code&gt; のままで動くんでしょうが、僕らはこのコンフィグパラメータに覚えがあります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/** @type {import('next').NextConfig} */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nextConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;reactStrictMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;pageExtensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;api.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;tsx&lt;/code&gt; と &lt;code&gt;api.ts&lt;/code&gt; だけにしてるんですわ。今回は PagesRouter 使ってるんですけど、 &lt;code&gt;/pages/api/&lt;/code&gt; の下の API コードのテストコードを同じディレクトリに設定したいんですね。
ルートで src と test を分けたくない。めんどいじゃないですか、そういうの。なんで実装とテストコードは同じディレクトリに入れたいんです。で、テストコードは API ではないので、pageExtensions を設定してページやAPIは
&lt;code&gt;.tsx&lt;/code&gt; か &lt;code&gt;.api.ts&lt;/code&gt; としています。たとえばこうすると &lt;code&gt;user.api.ts&lt;/code&gt; というのがあったとき、同じディレクトリに &lt;code&gt;user.test.ts&lt;/code&gt; というのを入れることができ、これはテストコードなのでビルドに含まれず、API でもないコードという対応ができます。
あとは API ではないコードとかも入れることができます（それはやってないけど）。&lt;/p&gt;

&lt;p&gt;なんで、 &lt;code&gt;instrumentation&lt;/code&gt; のファイル名を &lt;code&gt;pageExtensions&lt;/code&gt; にするとは、何やってくれてんねん！って感じなんですけど、いったん従うしかないので、 &lt;code&gt;instrumentation.api.ts&lt;/code&gt; というファイル名にし&amp;hellip;.ませんでした。&lt;/p&gt;

&lt;p&gt;いろいろ理由はあるんですけど、CI/CD でビルドする直前に &lt;code&gt;instrumentation.ts&lt;/code&gt; を &lt;code&gt;instrumentation.api.ts&lt;/code&gt;  にコピーする対応にしています。
たとえば、これは &lt;code&gt;pageExtensions&lt;/code&gt; じゃおかしい！という issue を僕が出して &lt;code&gt;ts|js&lt;/code&gt; になったときファイル名をリネームするのは嫌だなぁというとこで、CI/CDでコピーするところだけなら修正しても良いかなと。&lt;/p&gt;

&lt;p&gt;で、手元では手動でファイルをコピーして &lt;code&gt;next build&lt;/code&gt; したらファイルがビルドされていることが確認できました👏&lt;/p&gt;

&lt;h3&gt;デプロイして動かしてみる&lt;/h3&gt;

&lt;p&gt;出ない&amp;hellip;&amp;hellip;&lt;/p&gt;

&lt;p&gt;全体的には良さそうなんですが、何でかねー&lt;/p&gt;

&lt;p&gt;困ったときは初心に戻って AWS の公式ドキュメントを漁ります。
&lt;a href="https://docs.aws.amazon.com/ja_jp/apprunner/latest/dg/monitor-xray.html"&gt;X-Ray を使用した App Runner アプリケーションのトレース&lt;/a&gt; というのが App Runner のドキュメントの中にありました。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;App Runner サービスで X-Ray トレースを使用するには、サービスのインスタンスに X-Ray サービスとやり取りするためのアクセス許可を付与する必要があります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;なるほどー、それはそうか。OpenTelemetry 指定で X-Ray のポリシー適用されるかな？と思ったけど、ObservabilityConfiguration の vendor 判断してまではやってくれないようです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight typescript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observabilityConfiguration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ObservabilityConfiguration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ObservabilityConfiguration&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;observabilityConfigurationName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webapp-observability&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;traceConfigurationVendor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TraceConfigurationVendor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AWSXRAY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;WebAppService&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromEcr&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;imageConfiguration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ecrRepository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;tagOrDigest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webAppVersion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="na"&gt;serviceName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webapp-service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;autoDeploymentsEnabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;observabilityConfiguration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;healthCheck&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HealthCheck&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;healthyThreshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/favicon.ico&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;unhealthyThreshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="na"&gt;instanceRole&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;WebAppServiceXRayWrite&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;assumedBy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ServicePrincipal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tasks.apprunner.amazonaws.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;managedPolicies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ManagedPolicy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromAwsManagedPolicyName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AWSXRayDaemonWriteAccess&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CDK で Service を作るときのプロパティに &lt;code&gt;instanceRole&lt;/code&gt; を追加しました。&lt;/p&gt;

&lt;h3&gt;まとめ&lt;/h3&gt;

&lt;p&gt;Next.js standalone ビルドしたアプリを App Runner で動かしていたところに、 X-Ray での計測を追加してみました。
他の AWS サービスと違って X-Ray を有効にするのがちょっと面倒だったり、 &lt;code&gt;pageExtensions&lt;/code&gt; いじっているとビルド時に工夫が必要だったりとか、いくつかハマりポイントはありますが、わかってしまえば対策は難しくありませんでした。
実際はものすごい調べるの時間かかったりするところもあったので、同じような課題になった人の解決に役立てば幸いです。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Next.js を standalone ビルドしたアプリで New Relic エージェントを動かす</title>
    <link rel="alternate" href="http://blog.url.com/2025/04/15/next-js-standalone-build-with-iast-agent.html"/>
    <id>http://blog.url.com/2025/04/15/next-js-standalone-build-with-iast-agent.html</id>
    <published>2025-04-15T10:36:00+09:00</published>
    <updated>2025-04-15T18:45:39+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;こちらの記事は &lt;a href="/2025/04/11/next-js-deploy-to-apprunner.html"&gt;Next.js で作ったアプリケーションを AppRunner にデプロイする&lt;/a&gt; の続編となります。
前編を読まないとわからない内容ではないですが、もし良ければ事前に確認してください。&lt;/p&gt;

&lt;p&gt;前の記事で Next.js を standalone ビルドしたアプリを App Runner にデプロイするところまで書きました。&lt;/p&gt;

&lt;p&gt;そのアプリでテスト環境のとき New Relic エージェントを入れたいということでやってみたんですが、ものすごいハマりどころが多かったので誰かの役に立てばと思い記事にします。&lt;/p&gt;

&lt;h3&gt;エージェントのインストールと起動方法&lt;/h3&gt;

&lt;p&gt;New Relic の Node.js エージェントは &lt;a href="https://github.com/newrelic/node-newrelic"&gt;node-newrelic&lt;/a&gt; というリポジトリにある OSS ライブラリです。
利用するときは以下のように &lt;a href="https://nodejs.org/api/cli.html#-r---require-module"&gt;Node.js の &amp;ndash;require module&lt;/a&gt; オプションを使って起動するようです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node &lt;span class="nt"&gt;-r&lt;/span&gt; newrelic your-program.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next.js で利用する場合の例として &lt;a href="https://github.com/newrelic/node-newrelic/tree/main?tab=readme-ov-file#nextjs-instrumentation"&gt;Next.js example projects&lt;/a&gt; というのも用意されていますが、今回は standalone モードでビルドされてますので、 &lt;code&gt;Custom Next.js servers&lt;/code&gt; というところのやり方と一緒で結局 &lt;code&gt;--require module&lt;/code&gt; モードで起動することになります。&lt;/p&gt;

&lt;h3&gt;やってみる&lt;/h3&gt;

&lt;p&gt;まず &lt;code&gt;npm install newrelic&lt;/code&gt; でパッケージを追加しておいて、 Next.js のリポジトリにある standalone ビルドの Dockerfile で起動スクリプトを以下のように変更します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# server.js is created by next build from the standalone output&lt;/span&gt;
&lt;span class="c"&gt;# https://nextjs.org/docs/pages/api-reference/config/next-config-js/output&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; HOSTNAME="0.0.0.0"&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["node", "-r", "newrelic", "server.js"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;はい、起動しません。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Error: Cannot find module &amp;lsquo;/app/node&lt;em&gt;modules/lodash/lodash.js&amp;rsquo;. Please verify that the package.json has a valid &amp;ldquo;main&amp;rdquo; entry
at Object.&lt;anonymous&gt; (/app/node&lt;/em&gt;modules/@newrelic/security-agent/lib/nr-security-agent/lib/core/commonUtils.js:20:16)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;調べよう&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/newrelic/csec-node-agent/blob/main/package.json"&gt;newrelic/csec-node-agent という依存モジュールの package,json&lt;/a&gt; の中に &lt;code&gt;lodash&lt;/code&gt; があるのを見つけました。&lt;/p&gt;

&lt;p&gt;で、使っている場所は&lt;a href="https://github.com/newrelic/csec-node-agent/blob/main/lib/nr-security-agent/lib/core/commonUtils.js#L20"&gt;この行&lt;/a&gt;なんですが、いやな使い方をしていますね。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lodash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// ここを&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isEmpty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash/isEmpty&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下のように記述してくれていれば良い（実際 &lt;code&gt;isEmpty&lt;/code&gt; しか使ってない）のですけど&amp;hellip;
まぁとはいえ動きません。&lt;/p&gt;

&lt;p&gt;まず何でかっていうと、そもそも Next.js は standalone モードでビルドされていて、コンテナサイズを小さくするために Next.js から依存関係にないパッケージは入りません。
つまり New Relic のエージェントを &lt;code&gt;--require module&lt;/code&gt; モードで起動すると、依存しているパッケージがないので動かないという、まぁ至極その通りな感じであります。&lt;/p&gt;

&lt;p&gt;で、いろいろネットの情報を調べていたら、サーバー起動する直前で &lt;code&gt;npm i newrelic&lt;/code&gt; すると良いよというのを見つけました。
&lt;a href="https://gist.github.com/bizob2828/0fa170a9194838cab5dc8fbb00109425"&gt;以下のソース&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# Install the next.js plugin after it copies the standalone server and static bits to workdir&lt;/span&gt;
&lt;span class="c"&gt;# I cannot figure out why If I just install `@newrelic/next` and add to project's package.json&lt;/span&gt;
&lt;span class="c"&gt;# why it does not copy them over but it does not for some reason so we will add it after all the copying&lt;/span&gt;
&lt;span class="c"&gt;# occurs&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm i newrelic

&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="s"&gt; nextjs&lt;/span&gt;

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 3000&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; PORT 3000&lt;/span&gt;

&lt;span class="c"&gt;# server.js is created by next build from the standalone output&lt;/span&gt;
&lt;span class="c"&gt;# https://nextjs.org/docs/pages/api-reference/next-config-js/output&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; HOSTNAME="0.0.0.0"&lt;/span&gt;

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["node", "-r", "newrelic", "server.js"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なるほどねー、ってことでやってみました。&lt;/p&gt;

&lt;p&gt;&amp;hellip;. 動かない&amp;hellip;.&lt;/p&gt;

&lt;p&gt;なんでかって言うと、僕らのアプリでは、依存関係で（厳密にいうと依存の依存に）すでに lodash があったんですね。つまりこの状況( &lt;code&gt;/app/node_modules/lodash/&lt;/code&gt; が存在する )で依存の依存で lodash 入れようと思ってもすでに入っているので、追加(上書き)では入りません。
まぁそうですよね。npm とはそういうものです。で、その lodash は standalone モードで使ってないモジュールは消されているので &lt;code&gt;lodash.js&lt;/code&gt; という一等地の全部インポートファイルはありません。せめて &lt;code&gt;require(&amp;#39;lodash/isEmpty&amp;#39;)&lt;/code&gt; なっていれば&amp;hellip;（isEmptyはあった）。
とはいえ、他にも依存モジュールあったんで、lodash だけの問題とも言い切れませんね。&lt;/p&gt;

&lt;h3&gt;先人が通った道&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://zenn.dev/collabostyle/articles/c13ca438a37874"&gt;Next.js に New Relic 導入し、docker コンテナの起動に失敗した話&lt;/a&gt; に出会いました。
&lt;code&gt;node_modules&lt;/code&gt; の下のファイルをコピーする&amp;hellip;.。まぁ動きそうな気はするけど、コピーはいやだなぁ&amp;hellip;.ということで違う方法を模索します。&lt;/p&gt;

&lt;p&gt;過去には、Next.js 用のライブラリがあったようで、そのときの issue も見つけました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://forum.newrelic.com/s/hubtopic/aAX8W0000008d6sWAA/node-nextjs-with-newrelicnext-and-outputstandalone"&gt;[Node] Next.js with @newrelic/next and outputStandalone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;でそのときの対応が &lt;code&gt;node-newrelic&lt;/code&gt; リポジトリになるときのマイグレーション issue も見つけました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/newrelic/node-newrelic/issues/2127#issuecomment-2125591318"&gt;Migrate @newrelic/next into repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ということで、何だか standalone モードへの対応は考慮されているようですが、前述のとおり Web アプリ側でも依存関係にあってエージェント側でも使っているみたいなケースでは失敗してしまうこともありえます。
僕がソースコードを見回った結果は lodash だけっぽかったので、そこだけ修正すれば大丈夫なのかもですけど。&lt;/p&gt;

&lt;h3&gt;グローバルインストールという脇道（ハック）&lt;/h3&gt;

&lt;p&gt;アプリケーションの下の node_modules だと入らないので、別のところでクリーンインストールすれば良いのでは？という結論に至りました。
とりあえずアプリと別のディレクトリを掘ってやってもよかったんですけど、面倒だったのでグローバルインストールを使います。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# Install dependencies only when needed&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;base&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;deps&lt;/span&gt;

&lt;span class="c"&gt;# 長いので省略 一番下に追加&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm i &lt;span class="nt"&gt;-g&lt;/span&gt; newrelic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;マルチステージビルドの  &lt;code&gt;deps&lt;/code&gt; の最後でグローバルインストールします。
続いて standalone ビルドしたファイルをコピーした後で、グローバルインストールフォルダを丸っとコピーして持ってきます。
で、そこに &lt;code&gt;NODE_PATH&lt;/code&gt; 環境変数を通すというハックを入れました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# Automatically leverage output traces to reduce image size&lt;/span&gt;
&lt;span class="c"&gt;# https://nextjs.org/docs/advanced-features/output-file-tracing&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=builder --chown=nextjs:nodejs /app/.next/standalone ./&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=deps /usr/local/lib/node_modules /usr/local/lib/node_modules&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; NODE_PATH=/usr/local/lib/node_modules&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;おそらく gist の例とかは newrelic が依存しているライブラリを Next.js のアプリが使っていない前提で書かれていると思われる。&lt;/p&gt;

&lt;p&gt;結局 newrelic が依存しているものを Next が良い感じに standalone ビルドすると当然 newrelic なんぞ？みたいになって動かないからな。ライブラリ作者はそこまで気が回ってないのだろう&lt;/p&gt;

&lt;p&gt;グローバルはハックな方法だと思うけど、正しいやり方をサポートは対応してくれるんかな&amp;hellip;.&lt;/p&gt;

&lt;p&gt;ライブラリは OSS なんで issue 書いてよ、というのは、まぁそのとおり（まだやってません、すみません）。&lt;/p&gt;

&lt;h3&gt;やってみる（2回目）&lt;/h3&gt;

&lt;p&gt;動きません&amp;hellip;.. 😭&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cannot find module &amp;lsquo;@newrelic/native-metrics&amp;rsquo;\nRequire stack:\n- /usr/local/lib/node&lt;em&gt;modules/newrelic/lib/sampler.js\n- /usr/local/lib/node&lt;/em&gt;modules/newrelic/lib/agent.js\n- /usr/local/lib/node_modules/newrelic/index.js\n- internal/preload&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;Cannot find module&lt;/code&gt; ？？なんですって？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"optionalDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@contrast/fn-inspect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@newrelic/native-metrics"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^11.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@prisma/prisma-fmt-wasm"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.17.0-16.27eb2449f178cd9fe1a4b892d732cc4795f75085"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なんか &lt;a href="https://github.com/newrelic/node-newrelic/blob/main/package.json#L221-L224"&gt;optionalDependencies&lt;/a&gt; があるんですけど、 &lt;code&gt;npm i newrelic&lt;/code&gt; だけじゃないの？ドキュメントに書いてあった？&lt;/p&gt;

&lt;h3&gt;調べよう（2回目）&lt;/h3&gt;

&lt;p&gt;ありましたよ、ドキュメント。
&lt;a href="https://docs.newrelic.com/jp/docs/apm/agents/nodejs-agent/extend-your-instrumentation/nodejs-vm-measurements/#install-modules"&gt;Node.jsのVM測定&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;New Relic Node.js エージェントの v2.0.0 以降、ネイティブモジュールはオプションの依存関係となり、自動的にインストールされるようになりました。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;じゃぁインストールされんのかな？と思うじゃないですか。ダメです。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;展開プラットフォームでネイティブ モジュールをコンパイルするには、 node-gypパッケージの手順に従います。ネイティブ Node.js モジュールをインストールするための前提条件は次のとおりです。
プラットフォーム 前提条件
Unix/Linux Python（v2.7推奨、v3.x.xは未サポート）、make、C/C++コンパイラ（GCCなど）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;いやいや、 Python 必要なん？ （&lt;code&gt;node-gyp&lt;/code&gt; だから当然だけど）。
つまり自動インストールしようとした結果、インストールに必要なもの（今回でいうとgccとかPytnonとか）がインストールされてないので、自動インストール自体が失敗するということになります。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.newrelic.com/jp/docs/apm/agents/nodejs-agent/installation-configuration/install-nodejs-agent/"&gt;Node.jsエージェントのインストール&lt;/a&gt; という公式ドキュメントをみると&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;オプション：追加のNode.jsランタイムレベル統計情報を取得するため、@newrelic/native-metricsパッケージがインストールされていることを確認してください。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ってことで、まぁこれは必要なようです。&lt;/p&gt;

&lt;p&gt;結局のところの &lt;code&gt;deps&lt;/code&gt; は以下のようになりました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# Install dependencies only when needed&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;base&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;deps&lt;/span&gt;
&lt;span class="c"&gt;# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.&lt;/span&gt;
&lt;span class="c"&gt;# RUN apk add --no-cache libc6-compat&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;apk update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;  apk upgrade &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;  apk add &lt;span class="nt"&gt;--no-cache&lt;/span&gt; libc6-compat make gcc g++ python3
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="c"&gt;# Install dependencies based on the preferred package manager&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package.json yarn.lock* package-lock.json* pnpm-lock.yaml* .npmrc* ./&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="se"&gt;\
&lt;/span&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; yarn.lock &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then &lt;/span&gt;yarn &lt;span class="nt"&gt;--frozen-lockfile&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;  &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; package-lock.json &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then &lt;/span&gt;npm ci&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;  &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; pnpm-lock.yaml &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then &lt;/span&gt;corepack &lt;span class="nb"&gt;enable &lt;/span&gt;pnpm &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; pnpm i &lt;span class="nt"&gt;--frozen-lockfile&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;  &lt;span class="k"&gt;else &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Lockfile not found."&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;exit &lt;/span&gt;1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;  &lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;npm i &lt;span class="nt"&gt;-g&lt;/span&gt; newrelic
&lt;span class="k"&gt;RUN &lt;/span&gt;npm i &lt;span class="nt"&gt;-g&lt;/span&gt; @newrelic/native-metrics
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;やってみる（3回目）&lt;/h3&gt;

&lt;p&gt;動いたー🎉&lt;/p&gt;

&lt;h3&gt;まとめ&lt;/h3&gt;

&lt;p&gt;以下、苦労したところ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ドキュメントが分散していてわかりずらい（最初から github でなく公式 Docs みておいた方が良かったかも）&lt;/li&gt;
&lt;li&gt;Next.js の standalone モードとは驚くほど相性が悪い&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前者は改善の余地ありそうだけど、後者は何ともならなそうですね。
今回は別の場所で入れて &lt;code&gt;NODE_PATH&lt;/code&gt; するというハックを使いましたが、結局エージェントとWebアプリで依存関係の競合が起きたときに困ると言うことには違いないです。たとえば違うバージョン使っていたら？とかそれが原因で動かなかったら？ということは今後容易に起きそうです。
希望としてはエージェントは1ファイルにパッキングしておいて欲しいということですね。というか &lt;code&gt;require module&lt;/code&gt; で動くんだから自分が必要なパッケージは固めておいて欲しいですよね。Node.js のアプリだったらみんながみんなフルセットの node_modules を使っていないことがあるのは Node.js 使っている人ならわかりそうなのになぁという気分です。&lt;/p&gt;

&lt;p&gt;ちゃんと時間が取れて、良い感じの英文が書けたら issue 出そうかな。それも OSS への貢献ですね。
この記事で同じような境遇になった人が、解決の助けになったら、と思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>PHPカンファレンス小田原2025に参加しました</title>
    <link rel="alternate" href="http://blog.url.com/2025/04/14/phpcon-odawara-2025.html"/>
    <id>http://blog.url.com/2025/04/14/phpcon-odawara-2025.html</id>
    <published>2025-04-14T14:31:00+09:00</published>
    <updated>2025-04-14T15:16:54+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;この記事は &lt;a href="https://phpcon-odawara.jp/2025/"&gt;PHPカンファレンス小田原2025&lt;/a&gt; に参加したレポートです。&lt;/p&gt;

&lt;p&gt;今年も月刊PHPカンファレンスなようですが、昨年末ぐらいから多忙のため通常のPHP勉強会にも出れない日々が続いておりました。
ようやく落ち着いてきてイベントにも出れるようになってきたので、久々のイベント参加です（というか、もう小田原ぐらいには落ち着いてないとダメだろうという前提でチケットを購入していた）。&lt;/p&gt;

&lt;p&gt;小田原は新宿駅から乗り換えなしで行けるし、都民にとってはPHPカンファレンス東京と並んで行きやすいカンファレンスです。&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;ロマンスカー満車で乗れず。快速急行で行きます&lt;/p&gt;&amp;mdash; しずひこ (@sizuhiko) &lt;a href="https://twitter.com/sizuhiko/status/1910832536760037457?ref_src=twsrc%5Etfw"&gt;April 11, 2025&lt;/a&gt;&lt;/blockquote&gt; 

&lt;p&gt;なんか去年もそうだった記憶があるけど、ロマンスカーあんまり乗らないので事前に購入するという発想がなかった。ロマンスカーなら70分、快速急行だと100分ぐらいなのでギリ間に合うかなという感じ。&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;ギリ間に合ったー。着席&lt;br&gt; &lt;a href="https://twitter.com/hashtag/phpcon_odawara?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#phpcon_odawara&lt;/a&gt;&lt;/p&gt;&amp;mdash; しずひこ (@sizuhiko) &lt;a href="https://twitter.com/sizuhiko/status/1910860831165739432?ref_src=twsrc%5Etfw"&gt;April 12, 2025&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;はい。&lt;/p&gt;

&lt;p&gt;受付してノベルティをGETして会場へ急足。小田原のノベルティTシャツが今年もステキだった（写真撮り忘れた）。まだ着てないけど昨年のもお気に入りなんで、今年のも何度も切る場面がありそう。&lt;/p&gt;

&lt;h3&gt;参加したセッション&lt;/h3&gt;

&lt;h4&gt;AM&lt;/h4&gt;

&lt;p&gt;午前中はメイン会場の &lt;code&gt;かま&lt;/code&gt; で&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;キーノート OSSコントリビュートをphp-srcメンテナの立場から語る&lt;/li&gt;
&lt;li&gt;PHP 8.x 時代のクラス設計&lt;/li&gt;
&lt;li&gt;PHPと旅する OSI 7階層&lt;/li&gt;
&lt;li&gt;PHPバージョンアップから始めるOSSコントリビュート&lt;/li&gt;
&lt;li&gt;古き良きLaravelのシステムは関数型スタイルでリファクタできるのか&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OSSコントリビュートは普段から心がけているので、自分が使うライブラリだったり、自分が作るライブラリだったり、いろいろあるけど貢献する意識づけとかはチームメンバーにも植え付けていきたいし、カンファレンスとかにも出て刺激をうけてほしいですね。会場アンケートでコントリビュートしたことある人、というアンケートに、こういうところに来る人なんでバイアスかかってますけどね、というコメントがありましたけど、確かにーと思うところ。&lt;/p&gt;

&lt;p&gt;PHPは個人サービスを作る時のバックエンドで長らく使っていたけど、最近はNode.jsばかりなので昔のサービスのメンテぐらいでしか書いてないけど、クラス設計の話を聞くと昔から他の言語のいいところを取り入れて進化してきたので、クラスの話を聞くとJavaっぽいと思うのは自然な感じかな。いろいろ最新状況が知れてよかった。&lt;/p&gt;

&lt;p&gt;OSI7階層の話は、別のカンファレンスでそれぞれの層の話を聞いたりしてるので、全体の流れの話で聞けるのもよかった。僕はそういう突き詰める系はあんまりやらないけど、自分の好きな開発ができるときって楽しいですよね。僕だと個人Webサービス作ってる時が楽しいです。&lt;/p&gt;

&lt;p&gt;リファクタリングは、どのタイミングでやるかは非常に重要だけど、聞いた話レベルでやるのは大変そうだなーと思った。改善は一気にできないことが多いので、少しでもやりやすい方法で進められると良いですね。&lt;/p&gt;

&lt;h4&gt;ランチ&lt;/h4&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;美味しそう &lt;a href="https://twitter.com/hashtag/phpcon_odawara?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#phpcon_odawara&lt;/a&gt; &lt;a href="https://t.co/P3k13wST1Z"&gt;pic.twitter.com/P3k13wST1Z&lt;/a&gt;&lt;/p&gt;&amp;mdash; しずひこ (@sizuhiko) &lt;a href="https://twitter.com/sizuhiko/status/1910906627236253983?ref_src=twsrc%5Etfw"&gt;April 12, 2025&lt;/a&gt;&lt;/blockquote&gt; 

&lt;p&gt;ランチではランチコラボで、地元のお店でプチサービスが受けられるところが準備されていたり、ぼっち飯にならないようにランチマッチング企画が準備されていたり、すごい充実してました。
とはいえ、僕はタイミングを逃して1人で美味しそうな料理とお水があるお店に吸い込まれていきました。
小田原の路地にあるお店、どこも入り口が広くて開放していたので、様子が伺えてよかったです。&lt;/p&gt;

&lt;h4&gt;PM&lt;/h4&gt;

&lt;p&gt;午後は &lt;code&gt;あじ&lt;/code&gt; で&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;恣意性から考える、変更に強いモデルの作り方&lt;/li&gt;
&lt;li&gt;タイムゾーンの奥地は思ったよりも闇深いかもしれない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最後は &lt;code&gt;かま&lt;/code&gt; に戻って&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New RelicのAPMを活用したECサービスにおけるメール遅延解消の舞台裏&lt;/li&gt;
&lt;li&gt;スポンサーエレベータピッチ&lt;/li&gt;
&lt;li&gt;LT&lt;/li&gt;
&lt;li&gt;ぺちおだ大合戦&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;恣意性はふむふむ、そうだなーと思うところがあったり、自分はこうだなーと思うところがあったりして、考え方の整理ができてよかったです。&lt;/p&gt;

&lt;p&gt;タイムゾーンはちょっと思ってた内容と違ってたけど、まぁUTCにしとけってとことはそうですね！&lt;/p&gt;

&lt;p&gt;アプリの計測は大事で、最近はAWS使うことが多いのでX-Rayを使っていることが多いけど、何を使うにせよデータがないと困りますしね。最近業務でX-Ray使っていて新しい知見もあったので、ブログにも書いていこうと思います。&lt;/p&gt;

&lt;p&gt;ぺちおだ大合戦、最初はどんなことが起きるんだろう？と思ったけど、終わってみてこれはすごい企画だなーというのと、運営の準備大変だっただろうな、お疲れ様でした。とても楽しかったです！という一言です。とにかくすごい。&lt;/p&gt;

&lt;h4&gt;懇親会&lt;/h4&gt;

&lt;p&gt;万葉の湯で豪華な懇親会がありました。畳部屋での立食形式もあんまり体験したことない感じだった。こちらも写真は撮ってませんでした&amp;hellip;（楽しかったという記憶は間違いない）。
最終のロマンスカーの時間があるので、少し早く離脱して無事帰宅できました。&lt;/p&gt;

&lt;h3&gt;全体的な感想&lt;/h3&gt;

&lt;p&gt;昨年も参加して、今年もいろいろ考えられてて企画力がすごいですよね。&lt;/p&gt;

&lt;p&gt;来年のことについてはコメントしませんが、これだけの企画をやると燃え尽き症候群とかになっても不思議ではないと思うので、ゆっくり休んで他のカンファレンスに参加して充電？してかな。&lt;/p&gt;

&lt;p&gt;参加した方もためになったし、元気がもらえたし、楽しかったし、とても充実した1日でした。&lt;/p&gt;

&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content>
  </entry>
  <entry>
    <title>Next.js で作ったアプリケーションを AppRunner にデプロイする</title>
    <link rel="alternate" href="http://blog.url.com/2025/04/11/next-js-deploy-to-apprunner.html"/>
    <id>http://blog.url.com/2025/04/11/next-js-deploy-to-apprunner.html</id>
    <published>2025-04-11T17:59:00+09:00</published>
    <updated>2025-04-11T19:03:31+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;こちらの記事は &lt;a href="/2025/04/08/apprunner-deploy-from-cdk-is-easy-really.html"&gt;AppRunner へのデプロイは cdk でサクッとできるのか？&lt;/a&gt; の続編となります。
前編を読まないとわからない内容ではないですが、もし良ければ事前に確認してください。&lt;/p&gt;

&lt;p&gt;まず前編でも触れてますが、アプリケーションのリポジトリ構成は以下のようになっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Next.js のアプリケーションリポジトリ&lt;/li&gt;
&lt;li&gt;AWSのリソースを管理するインフラリポジトリ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;アプリのリポジトリでは、ECR へのデプロイまでやってます。
インフラのリポジトリで、AppRunner など AWS リソースを CDK で構築しています。&lt;/p&gt;

&lt;h2&gt;AppRunner で Next.js アプリケーションを動かすには&lt;/h2&gt;

&lt;p&gt;Next.js を standalone モードでビルドして、Docker コンテナで起動する。これだけで ok です。&lt;/p&gt;

&lt;h3&gt;ECR に Next.js の standalone モードビルドしたコンテナイメージを push する&lt;/h3&gt;

&lt;p&gt;まずは Next.js のアプケーションリポジトリの CI/CD で ECR に Docker イメージを push します。
アプリケーションリポジトリ側にも CDK を入れてあるので、以下のようなコードで ECR にデプロイしています。
タグは &lt;code&gt;package.json&lt;/code&gt; の &lt;code&gt;version&lt;/code&gt; から入手します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;imagedeploy&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cdk-docker-image-deployment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;ecr&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-cdk-lib/aws-ecr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;DeployStack&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stack&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Construct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StackProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;projectRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../..&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;projectRoot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;package.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;repository&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ecr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromRepositoryName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webapp-ect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webapp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;imagedeploy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DockerImageDeployment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DockerImageDeployment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;imagedeploy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;directory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;projectRoot&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;imagedeploy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Destination&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ecr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dockerfile は Next.js の公式サンプル&lt;a href="https://github.com/vercel/next.js/tree/canary/examples/with-docker"&gt;With Docker&lt;/a&gt; を参考に（というかほぼそのまま流用）すれば大丈夫です。
ベースイメージの Node.js バージョンが古かったりするので、そこは自分たちが使うバージョンに変更しておきましょう。&lt;/p&gt;

&lt;h3&gt;AppRunner で ECR からデプロイする&lt;/h3&gt;

&lt;p&gt;こちらは前編でも触れた &lt;code&gt;@aws-cdk/aws-apprunner-alpha&lt;/code&gt; が使えるので簡単にデプロイできます。
以下のような感じで書けば良いでしょう。ヘルスチェックを何でやるかは、いろいろだと思いますが、ここではいったん &lt;code&gt;favicon&lt;/code&gt; にしています。
CDK で作成した ECR のリポジトリと、デプロイ対象のアプリケーションバージョンはコンストラクタの引数で渡せるようにしています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Source&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-apprunner-alpha&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;WebAppConstruct&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stack&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Construct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;WebAppConstructProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;WebAppService&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromEcr&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;imageConfiguration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ecrRepository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;tagOrDigest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webAppVersion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="na"&gt;serviceName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webapp-service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;autoDeploymentsEnabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;healthCheck&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HealthCheck&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;healthyThreshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/favicon.ico&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;unhealthyThreshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;コラム: ヘルスチェックについて、いろいろと参考になった記事&lt;/h4&gt;

&lt;p&gt;実はヘルスチェックはちょっといろいろあって実際も &lt;code&gt;favicon&lt;/code&gt; にしたんですけど、そのときに参考になった記事があるので、載せておきます&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/seelog/articles/next_js_health_check"&gt;Next.js App Router でヘルスチェックをする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/57956476/how-to-set-up-an-endpoint-for-health-check-on-next-js"&gt;How to set up an endpoint for Health check on Next.js?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://repost.aws/questions/QUq9Sqy5hKQrSZdIuDgEJoSw/heath-check-failing-only-after-enabling-vpc-connector"&gt;Heath check failing only after enabling VPC connector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;デプロイできたので動かしてみるが動かない&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Error: listen EADDRNOTAVAIL: address not available 10.0.1.2:3000&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;何か動きません。&lt;/p&gt;

&lt;p&gt;あれ、Dockerfile に &lt;code&gt;HOSTNAME=0.0.0.0&lt;/code&gt; 入ってるのに何でだろう？
ローカルで build したイメージ動かしたときは大丈夫だったんだけど？と思ったら、1つ罠があります。&lt;/p&gt;

&lt;p&gt;こちらの記事がとても参考になりました。
&lt;a href="https://zenn.dev/kojipole/articles/7e0472e71dc19b"&gt;AWS App RunnerでNext.jsのstandaloneモードを動かす時のTips(ないしは失敗談)&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;App Runnerの環境では環境変数HOSTNAMEに対して、暗黙的にアタッチされているENIのprivate DNSが指定されるようです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;なんですって？
AppRunner が環境変数にセットしてくるの？？&lt;/p&gt;

&lt;p&gt;だから &lt;code&gt;10.0.1.2:3000&lt;/code&gt; みたいな ENI の private アドレスになるんですね。Dockerfile では&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; HOSTNAME="0.0.0.0"&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["node",  "server.js"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のように指定されていても、コンテナ起動時に HOSTNAME を指定されるので環境変数が上書きされてセットされます。&lt;/p&gt;

&lt;h2&gt;CDK で HOSTNAME を設定する&lt;/h2&gt;

&lt;p&gt;ということで、AppRunner のサービスを作るときに環境変数 &lt;code&gt;HOSTNAME&lt;/code&gt; を指定してあげます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight typescript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;WebAppService&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromEcr&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;imageConfiguration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;environmentVariables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;HOSTNAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.0.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでデプロイしたら無事起動しました。👏👏&lt;/p&gt;

&lt;p&gt;少しでも AppRunner で Next.js アプリを動かす人の役にたてばと思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>AppRunner へのデプロイは cdk でサクッとできるのか？</title>
    <link rel="alternate" href="http://blog.url.com/2025/04/08/apprunner-deploy-from-cdk-is-easy-really.html"/>
    <id>http://blog.url.com/2025/04/08/apprunner-deploy-from-cdk-is-easy-really.html</id>
    <published>2025-04-08T18:45:00+09:00</published>
    <updated>2025-04-09T11:07:45+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;AWS App Runner は、ソースコードまたはコンテナイメージから AWS クラウドのスケーラブルで安全なウェブアプリケーションに直接デプロイするための、高速でシンプル、かつ費用対効果の高い方法を提供する AWS サービスです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と&lt;a href="https://docs.aws.amazon.com/ja_jp/apprunner/latest/dg/what-is-apprunner.html"&gt;公式ドキュメント&lt;/a&gt; に書かれています。&lt;/p&gt;

&lt;p&gt;ソースコードからデプロイする場合は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;BitBucket&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったところのクラウドリポジトリを使っていれば簡単に連携して自動デプロイができます。&lt;/p&gt;

&lt;p&gt;一方、仕事でオンプレのソースコードリポジトリ、たとえば GitHub Enterprise とか BitBucket Server とか、GitLabs とかをパブリッククラウドでなく使っている場合はソースコード連携できないので、ECR にイメージをデプロイして AppRunner と連携することになります。
本ブログは、この方法について、ネット上で簡単にできそうに書いてある記事をやってみたら、実際はそんなことなかったということについて記録するものです。&lt;/p&gt;

&lt;h2&gt;CDK で AppRunner + ECR でデプロイする&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;cdk apprunner DockerImageDeployment&lt;/code&gt; みたいな検索条件でググると、まぁいっぱい出てきます。&lt;/p&gt;

&lt;p&gt;ここで &lt;code&gt;DockerImageDeployment&lt;/code&gt; というのは、Dockerfile をビルドして ECR に push までしてくれる CDK のライブラリです。
で、その ECR を AppRunner に関連づけてというのが流れです。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;code&gt;DockerImageAsset&lt;/code&gt; というのもあって、そちらの記事も多く見受けられます。こちらはあらかじめ ECR を作っておかなくてもいい感じに作ってくれるものですが、&lt;a href="https://qiita.com/rickey0808/items/1e715b016d50f1d4c094"&gt;[AWS CDK] コンテナイメージもまとめてデプロイ！？DockerImageAssetの動作確認をしてみた&lt;/a&gt; という記事のとおりお試しで使う分には良いと思いますが、ちゃんと管理して使いたい場合は &lt;code&gt;DockerImageDeployment&lt;/code&gt; を使った方が良いでしょう。&lt;/p&gt;

&lt;h2&gt;DockerImageDeployment を使って ECR にデプロイする&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/cdklabs/cdk-docker-image-deployment"&gt;DockerImageDeployment の公式GitHubリポジトリ&lt;/a&gt; にある例どおり簡単に利用できます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;ecr&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-cdk-lib/aws-ecr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;imagedeploy&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cdk-docker-image-deployment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ecr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromRepositoryName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MyRepository&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myrepository&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;imagedeploy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DockerImageDeployment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ExampleImageDeploymentWithTag&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;imagedeploy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;directory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path/to/directory&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;imagedeploy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Destination&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ecr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myspecialtag&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;AppRunner と連携でデプロイする&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;@aws-cdk/aws-apprunner-alpha&lt;/code&gt; というまだα版ですが、CDK のコンストラクタがあるので、これを利用します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;ecr&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-cdk-lib/aws-ecr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;apprunner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;apprunner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromEcr&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;imageConfiguration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ecr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromRepositoryName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NginxRepository&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nginx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;tagOrDigest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;latest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは CDK でいい感じにつなぎこんで、みたいな感じです。&lt;/p&gt;

&lt;h2&gt;やってみたがエラーになる&lt;/h2&gt;

&lt;p&gt;はい、エラーになりました。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The deployment will wait until the CodeBuild Project completes successfully before finishing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;というメッセージが出て失敗します。
メッセージどおり受け取ると、ECR のデプロイが終わってないので AppRunner にデプロイできないということです。&lt;/p&gt;

&lt;h2&gt;どうやって解決したか&lt;/h2&gt;

&lt;p&gt;実はアプリケーションのソースコードリポジトリと、AWSのリソース構成をデプロイするインフラリポジトリは分けていたので、アプリケーションコード側の CI/CD で &lt;code&gt;DockerImageDeployment&lt;/code&gt; を使って ECR までデプロイ。
ECR までデプロイされている状況で、インフラリポジトリ側の CI/CD で ECR と AppRunner の関連付けをやるようにしました。&lt;/p&gt;

&lt;p&gt;では最初はなんで両方を一緒にやっていたかというと、アプリケーションが外部サービスに連携しているため、開発環境ではモックサーバーを使っているのですが、それは Dockerfile 1つだけなんでそのファイルをインフラリポジトリ側において AppRunner にデプロイしようとしていたという感じでした。&lt;/p&gt;

&lt;p&gt;他の解決策としては、カスタムリソースを使って ECR へのデプロイを待ち合わせてデプロイするという方法があります。モノレポなどを使っているときにアプリケーションとインフラを同時にデプロイしたいときなどは有効な方法だと思います。
カスタムリソースも Lambda を作らないといけないというわけではなく、 AWS の API を実行する程度なら Lambda が不要なので、そういった選択肢も検討できます。&lt;/p&gt;

&lt;p&gt;参考記事: &lt;a href="https://dev.classmethod.jp/articles/create-custom-resources-with-aws-cdk-without-using-lambda-functions/"&gt;[AWS CDK] APIを呼び出すだけのカスタムリソースならLambda関数は不要な件&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;さいごに&lt;/h2&gt;

&lt;p&gt;AppRunner を cdk を使ってデプロイしたい、というときに参考になれば幸いです。
&lt;code&gt;@aws-cdk/aws-apprunner-alpha&lt;/code&gt; がαじゃなくなるときには、もう少し便利に（ちゃんと待ち合わせてくれるみたいな）ことができるようになるのかもしれないので期待はしたいですね。&lt;/p&gt;

&lt;p&gt;ちなみにモックサーバーは &lt;a href="https://mockoon.com/"&gt;Mockoon&lt;/a&gt; を使ってます。とても便利で助かる。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>PHP カンファレンス福岡2024に参加した</title>
    <link rel="alternate" href="http://blog.url.com/2024/06/23/php-conference-fukuoka-2024.html"/>
    <id>http://blog.url.com/2024/06/23/php-conference-fukuoka-2024.html</id>
    <published>2024-06-23T11:35:00+09:00</published>
    <updated>2024-06-23T14:18:27+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://phpcon.fukuoka.jp/2024/"&gt;PHP カンファレンス福岡2024&lt;/a&gt;に参加しました。&lt;/p&gt;

&lt;p&gt;2019年以来の PHP カンファレンス福岡。
そのときの記事が&lt;a href="/2019/06/30/phpconfuk2019.html"&gt;PHPカンファレンス福岡2019で、 標準インターフェースを使ったアプリケーション開発について発表してきました&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;昨年はチケットを購入できず、先に予約していたフライトやホテルをキャンセルするという形になってしまったので、今年はちゃんとチケット購入してから、フライトとホテルを予約しました。昨年の反省が活かされている。
昨年の盛り上がりは X で確認していて、うらやましーと思ってました。そこから今年の月刊 PHP con が始まったと言っても過言ではないわけで、とても楽しみにしていました。&lt;/p&gt;

&lt;p&gt;ちなみにプロポーザルはブログ記事にもした&lt;a href="/2024/03/20/story-for-migrate-hobby-web-service-while-a-year-part-1.html"&gt;GAE gen1 で動いている PHP5.5 で作った個人開発サービスを gen2 PHP8.2 へ移行した1年記&lt;/a&gt;と&lt;a href="/2024/06/03/get-started-with-graphql-api-server-with-appsync-js.html"&gt;APPSYNC_JS (AppSync JavaScript) で始める GraphQL API サーバー&lt;/a&gt;について出したのですが、どちらも落選しました。
プロポーザルの倍率がやばすぎる（僕が普段の仕事 PHP じゃないので、旬な話題じゃないというのは否定できない事実ですがw）。&lt;/p&gt;

&lt;p&gt;2019年が3年ぶり2回目だったので、今回は5年ぶり3回目ということになります。&lt;/p&gt;

&lt;h2&gt;前日入り&lt;/h2&gt;

&lt;p&gt;今回も前日入りしましたが、いきなり飛行機が遅延するというトラブルに。&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;福岡行の飛行機が40分遅延。ラウンジで暇つぶし&lt;/p&gt;&amp;mdash; しずひこ (@sizuhiko) &lt;a href="https://twitter.com/sizuhiko/status/1803936271016112448?ref_src=twsrc%5Etfw"&gt;June 20, 2024&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;この時点では 9:00 発が 9:40 になっただけだったけど、さらに 15分遅延となって 9:55 発に。
梅雨時期だし雨の影響もあるのでしかたがないですね。前日入りでよかったとポジティブに捉えましょう。&lt;/p&gt;

&lt;p&gt;福岡に到着したら &lt;a href="https://wework.co.jp/location/fukuoka/daimyo"&gt;WeWork 大名&lt;/a&gt;へ。永和システムマネジメントでは東京支社がWeWork京橋内になったため、今回のように福岡に前日入りしてもWeWork拠点があれば作業できるのでとても便利。夕方からは袋詰めボランティアに申し込んでいたので、それまで作業します。&lt;/p&gt;

&lt;p&gt;お昼はWeWork近くにあったウェストへ。&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;&lt;a href="https://twitter.com/hashtag/phpconfuk?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#phpconfuk&lt;/a&gt;&lt;br&gt;つけ忘れた。ウェスト天神にて &lt;a href="https://t.co/qEIf833QCB"&gt;https://t.co/qEIf833QCB&lt;/a&gt;&lt;/p&gt;&amp;mdash; しずひこ (@sizuhiko) &lt;a href="https://twitter.com/sizuhiko/status/1804015303929795068?ref_src=twsrc%5Etfw"&gt;June 21, 2024&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;夕方ぐらいになったらWeWorkに知っている人たちが続々来て？？ってなったんですが&lt;a href="https://prtimes.connpass.com/event/319375/"&gt;【非公式】PHPカンファレンス福岡2024・前日Meetup&lt;/a&gt; があったようです。気が付いてなかった&amp;hellip;.&lt;/p&gt;

&lt;p&gt;そして袋詰めをやってきました。&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="zxx" dir="ltr"&gt;&lt;a href="https://t.co/3yToNsWugm"&gt;pic.twitter.com/3yToNsWugm&lt;/a&gt;&lt;/p&gt;&amp;mdash; cakephper ichikawa (@cakephper) &lt;a href="https://twitter.com/cakephper/status/1804161620920406368?ref_src=twsrc%5Etfw"&gt;June 21, 2024&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;そのあとは特に予定もなかったので、エールズへ。&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;ウェーイ &lt;a href="https://t.co/gvj1XTXZ5q"&gt;pic.twitter.com/gvj1XTXZ5q&lt;/a&gt;&lt;/p&gt;&amp;mdash; しずひこ (@sizuhiko) &lt;a href="https://twitter.com/sizuhiko/status/1804110592988582281?ref_src=twsrc%5Etfw"&gt;June 21, 2024&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;野生のPHPerにも出会えたり、帰ろうかなーと思ったら店長から市川さん来るよ、って教えてもらったのでビールを追加して合流。
そのあとは Rummy 行って美味しいラムをいただいて、締めにやまちゃんでラーメンとビールを（3時ちょいに寝ました）。&lt;/p&gt;

&lt;h2&gt;当日&lt;/h2&gt;

&lt;p&gt;ちゃんと朝起きれて会場へ移動していたのですが、2日続けて朝にトラブルが&amp;hellip;&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;祇園駅で出ようと思ったらSUICAが無い。たぶん天神の駅でポケットに入れる前に落としたっぽい&lt;/p&gt;&amp;mdash; しずひこ (@sizuhiko) &lt;a href="https://twitter.com/sizuhiko/status/1804311768019431566?ref_src=twsrc%5Etfw"&gt;June 22, 2024&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;100円均一で売ってるこの手の定期入れを使ってたんですが、初めて中身だけ落ちました。&lt;/p&gt;

&lt;p&gt;&lt;img src="https://jp.daisonet.com/cdn/shop/products/4549131477177_10_d815145c-9bf2-4c6f-809e-0a7ae83867ef_130x.jpg?v=1619573190" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;祇園駅で駅員さんに天神駅へ連絡してもらって確認したら、それっぽいのがあるということでUターンして無事戻ってきました。
日本でよかった。改札通過してすぐポケットに入れた（いつもそう）ので、改札近くに落ちたのではないかと思います。
ギリギリ開始時間には間に合いました。&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;隔月PHPカンファレンスにチェックイン&lt;a href="https://twitter.com/hashtag/phpconfuk?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#phpconfuk&lt;/a&gt;&lt;br&gt;&lt;br&gt; &lt;a href="https://t.co/ObAL9Tbeuy"&gt;https://t.co/ObAL9Tbeuy&lt;/a&gt; &lt;a href="https://t.co/lTfGcPuNX2"&gt;pic.twitter.com/lTfGcPuNX2&lt;/a&gt;&lt;/p&gt;&amp;mdash; しずひこ (@sizuhiko) &lt;a href="https://twitter.com/sizuhiko/status/1804321244311150838?ref_src=twsrc%5Etfw"&gt;June 22, 2024&lt;/a&gt;&lt;/blockquote&gt; 

&lt;p&gt;今回は午前中はメイン会場でセッションに参加してました。PHP養分がたくさん補充されました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fortee.jp/phpcon-fukuoka-2024/proposal/559508e2-68c6-4b59-ab3a-3da6a6cccb0f"&gt;PHP コードの実行モデルを理解する by 新原 雅司&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fortee.jp/phpcon-fukuoka-2024/proposal/7efe2276-f8e0-4610-8586-e3901230e231"&gt;Fat Controller は悪か？ ~光のFat Controller・闇のガリController~ by スタヰル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fortee.jp/phpcon-fukuoka-2024/proposal/bdf2f1de-82f0-4468-989a-cb1fb70263c1"&gt;10社以上のCTO/技術顧問を経験して見えた、技術組織に起こる課題と対策 by 大谷 祐司&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fortee.jp/phpcon-fukuoka-2024/proposal/c2955129-264c-4807-b840-747c1ba23e08"&gt;有効な使い方を正しく理解して実装するPHP8.3の最新機能 by 清家史郎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;お昼は福岡の人と食べたいなーと思って、&lt;a href="https://x.com/nojimage"&gt;@nojimage&lt;/a&gt;さんに声をかけてご一緒させてもらいました。&lt;/p&gt;

&lt;p&gt;午後はアンカンファレンス会場、スポンサーブース、廊下で交流してました。&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;最新版👀&lt;br&gt; &lt;a href="https://twitter.com/hashtag/phpconfuk?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#phpconfuk&lt;/a&gt; &lt;a href="https://t.co/Ff4dSAI9jI"&gt;pic.twitter.com/Ff4dSAI9jI&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kanon (@samurai_se) &lt;a href="https://twitter.com/samurai_se/status/1804393754780184724?ref_src=twsrc%5Etfw"&gt;June 22, 2024&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;16:00からはアンカンファレンス会場で、会社で今月2回Webアクセシビリティのワークショップをやったのを発表しました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;さきほどアンカンで話したスライドです。&lt;br&gt;Webアクセシビリティワークショップを社内でやってみた&lt;a href="https://t.co/2jjPp9vFx2"&gt;https://t.co/2jjPp9vFx2&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/phpconfuk?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#phpconfuk&lt;/a&gt;&lt;/p&gt;&amp;mdash; しずひこ (@sizuhiko) &lt;a href="https://twitter.com/sizuhiko/status/1804416464855675307?ref_src=twsrc%5Etfw"&gt;June 22, 2024&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;専門家じゃなくても良い教材があるので「みんなで勉強会てきにやってみると良いよ」といったメッセージが伝わったら良いなと思っています。&lt;/p&gt;

&lt;p&gt;そのあとは懇親会（当日チケットあって嬉しかった）→ 非公式2次会 → やまちゃん の流れでした。
初めましての方、お久しぶりの方とたくさん話せました。楽しかった！&lt;/p&gt;

&lt;h2&gt;後日&lt;/h2&gt;

&lt;p&gt;帰京までの時間は&lt;a href="https://fusic.connpass.com/event/314905/"&gt;6/23(日)「（非公式）PHP Conference Fukuoka After Hack!!」&lt;/a&gt;に参加して、このブログ記事を書いています。&lt;/p&gt;

&lt;p&gt;2019年の記事の最後は&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;PHPカンファレンス福岡、来年も参加できると良いなー。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;で終えていました。
しかし翌年それが当たり前の光景でないことがわかったのです。当時はそんなことになると思っていなかったですよね。
もちろんそういったことだけでなく、当たり前にカンファレンスがある訳でなく、多くの人の努力によって開催されているわけで感謝です。&lt;/p&gt;

&lt;p&gt;あとはアンケートとフィードバックを入れてから帰ります。そしてまた参加できるように願っています。&lt;/p&gt;
</content>
  </entry>
</feed>
