<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2015-09-13T07:11:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>正規表現を簡単に作るには</title>
    <link rel="alternate" href="http://blog.url.com/2015/09/13/verbal-expression-php.html"/>
    <id>http://blog.url.com/2015/09/13/verbal-expression-php.html</id>
    <published>2015-09-13T07:11:00Z</published>
    <updated>2015-09-13T16:57:18+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;皆さんは正規表現好きですか？そして得意ですか？
私は好きですが、得意とは言えません。&lt;/p&gt;

&lt;h3&gt;VerbalExpressionという選択肢&lt;/h3&gt;

&lt;p&gt;そこでVervalExpressionという正規表現を簡単に組むことができる仕組みがあります。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://verbalexpressions.github.io/"&gt;http://verbalexpressions.github.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;サイトに「Regular Expressions made easy」と書いてあるように、簡単に正規表現が作れることを表明しています。
様々な言語にポートされていますが、もちろんPHP版もあります。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/VerbalExpressions/PHPVerbalExpressions"&gt;https://github.com/VerbalExpressions/PHPVerbalExpressions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;サイトのサンプルにも書いてあるとおり、以下のようなURLにマッチする正規表現が記述できます。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;use VerbalExpressions\PHPVerbalExpressions\VerbalExpressions;

$regex = new VerbalExpressions;
$regex  -&amp;gt;startOfLine()
        -&amp;gt;then("http")
        -&amp;gt;maybe("s")
        -&amp;gt;then("://")
        -&amp;gt;maybe("www.")
        -&amp;gt;anythingBut(" ")
        -&amp;gt;endOfLine();

echo $regex-&amp;gt;getRegex() ."\n";
if (preg_match($regex, 'http://github.com')) {
    echo "valid url\n";
} else {
    echo "invalud url\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1つ目のechoの結果は &lt;code&gt;/^(?:http)(?:s)?(?:\:\/\/)(?:www\.)?(?:[^ ]*)$/m&lt;/code&gt; で、2つ目のechoは &lt;code&gt;valid url&lt;/code&gt; を表示します。
VerbalExpressionsクラスに &lt;code&gt;toString&lt;/code&gt; メソッドが実装されているので、 &lt;code&gt;preg_match&lt;/code&gt; 関数でそのまま使えます。&lt;/p&gt;

&lt;h3&gt;複雑なことはできるか？&lt;/h3&gt;

&lt;p&gt;例えばRFC3986に書いてあるURLパターンをマッチさせようとすると、どうなるでしょうか？
一旦スキーマ部分だけ記述してみます。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;$rfc3986 = new VerbalExpressions;
// scheme
$scheme = new VerbalExpressions;
$scheme-&amp;gt;add("http")-&amp;gt;maybe("s")-&amp;gt;_or("ftp");

$rfc3986-&amp;gt;startOfLine()
        -&amp;gt;add($scheme)
        -&amp;gt;add("://");
echo $rfc3986-&amp;gt;getRegex() ."\n";
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結果は &lt;code&gt;/^(?:\(\?\:http\)\(\?\:s\)\?\)\|\(\?\:ftp)(?:\:\/\/)/m&lt;/code&gt; のようになってしまい、期待通りではありません。
この実装は入れ子には対応していないようです。&lt;/p&gt;

&lt;h3&gt;もう１つのVerbalExpression実装&lt;/h3&gt;

&lt;p&gt;PHPにはもう１つ別のVerbalExpression実装があります。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/markwilson/VerbalExpressionsPhp"&gt;https://github.com/markwilson/VerbalExpressionsPhp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こちらの実装はREADMEに入れ子について記述されているように、入れ子の対応はされているようです。
では早速RFC3986の定義を試してみましょう。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;$rfc3986 = new VerbalExpression;
// scheme
$scheme = new VerbalExpression;
$scheme-&amp;gt;then("http", false)-&amp;gt;maybe("s", false)-&amp;gt;orPipe("ftp", false);

$rfc3986-&amp;gt;startOfLine()
        -&amp;gt;find($scheme)
        -&amp;gt;find("://")
        -&amp;gt;endOfLine();
echo $rfc3986-&amp;gt;compile() ."\n";
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結果は &lt;code&gt;^((?:http)(?:s)?()|()(ftp))(\:\/\/)$&lt;/code&gt; のようになってしまい、まぁ不正ではないのですが、かなり無駄があります。&lt;/p&gt;

&lt;h3&gt;現時点結局のところ&lt;/h3&gt;

&lt;p&gt;どちらの実装も簡単なパターンをやるときには良いのですが、ちょっと複雑なパターンを実装しようと思うと微妙です。
大体、簡単なパターンはそのまま正規表現書けば良いじゃん&amp;hellip; という話ですしね。&lt;/p&gt;

&lt;h3&gt;目指したいところ&lt;/h3&gt;

&lt;p&gt;RubyのVerbalExpressions実装には &lt;a href="http://www.kurtisrainboltgreene.name/hexpress/"&gt;HEXPRESS&lt;/a&gt; があります。
これはVerbalExpressionsよりさらに便利なヘルパーを備えて &lt;code&gt;Human Expressions, a human way to define regular expressions&lt;/code&gt; という標語のとおりより簡単に実装できるように見えます。&lt;/p&gt;

&lt;p&gt;これをPHPに移植して使えるようにしようというのが、直近やろうとしていることです。&lt;/p&gt;

&lt;h3&gt;さいごに&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://phpcon.php.gr.jp/2015/"&gt;日本PHPカンファレンス2015&lt;/a&gt;が10/3(土)に行われます。
私もスピーカーとして登壇しますので、もしご都合がつく方はよろしくお願いします。   &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>htmldayのイベントに参加してきた</title>
    <link rel="alternate" href="http://blog.url.com/2015/06/14/htmlday-2015.html"/>
    <id>http://blog.url.com/2015/06/14/htmlday-2015.html</id>
    <published>2015-06-14T09:33:00Z</published>
    <updated>2015-06-14T19:34:21+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="/images/blog/htmlday2015.jpg" /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;htmldayとは、日本全国でWebに関する多数のイベントを同じ日（6/13）に開催することで、日本のWebを一層盛り上げようという「お祭り」です。（毎年6月の第2土曜日に開催しています。）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ということで、以下のイベントに参加してきました。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/htmlday2015-events.png" /&gt;&lt;/p&gt;

&lt;h3&gt;当日の講演資料&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://dackdive.hateblo.jp/entry/2015/06/13/161143"&gt;まとめサイト&lt;/a&gt; ができました。ありがたやー。&lt;/p&gt;

&lt;h3&gt;サービスワーカーが今後のフロントエンドを支える&lt;/h3&gt;

&lt;p&gt;Google I/Oからの流れもあると思うのですが、サービスワーカー(ServiceWorker)に関連する発表が3連続になったりと、これから取り組まないといけない技術だと思います。
SafariとIEのサポートがまだなのですが、IEに関してはEdgeがChrome相当なので、MSではそちらに期待し、Appleはそのうち対応してくれるのではないかと期待しています。&lt;/p&gt;

&lt;p&gt;サービスワーカーとはブラウザにインストールできるタスクで、アプリケーションのバックグラウンドで動作するもので、例えばPush通知とかキャッシュとかオフラインモードの実装なんかをするのに、とても役立つ技術です。&lt;/p&gt;

&lt;p&gt;サービスワーカーに関しての詳しい内容はググるとたくさん出てくるので、それらを参照してください。&lt;/p&gt;

&lt;h3&gt;気になるキーワード&lt;/h3&gt;

&lt;p&gt;発表の中で気になったキーワードと、関連URLを紹介します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.html5rocks.com/ja/tutorials/service-worker/introduction/"&gt;Cache API&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;サービスワーカーの紹介記事の中で「Service Worker のインストール」以降にキャッシュを使う例が出ています&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/updates/2015/03/introduction-to-fetch"&gt;Fetch API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.w3.org/TR/push-api"&gt;Push API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/lovefield"&gt;Lovefield&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Indexed Databaseに対してSQLライクにアクセスできるようにしたライブラリ、Googleが開発した&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;ES6のコードをES5形式にコンパイルしてクロスブラウザで動作できるようにする&lt;/li&gt;
&lt;li&gt;gulpとの相性が良いので便利&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vorlonjs.com/"&gt;VORLON.JS&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;ブラウザをリモートでバッグするツール。マイクロソフトが開発している&lt;/li&gt;
&lt;li&gt;スマートフォンのエミュレータを使ったときDOMやJavaScriptのデバッグが難しいが、それをリモートデバッグできるようにする（昔も似た技術はあった気がする）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.manifoldjs.com/"&gt;manifoldjs&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;HTML5アプリケーションを各プラットフォーム用のアプリケーションに変換するツール&lt;/li&gt;
&lt;li&gt;Windowsストアアプリ、Androidアプリ、iOSアプリ、Chromeアプリ、FirefoxOSアプリに変換できる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Polymer1.0がキタ&lt;/h3&gt;

&lt;p&gt;そしてPolymerな訳です。私はPolymer大好きで0.5をけっこう弄っていたのですが、1.0は互換性ないということで、個人的な利用にとどめておいて良かったと思っています。&lt;/p&gt;

&lt;p&gt;PolymerはWebコンポーネントを実装するための仕組みにフォーカスしているので、いわゆるMVCフレームワークとは違います。
今流行のReact.jsとはかぶる部分が多いと思っています。&lt;/p&gt;

&lt;p&gt;Polymerが適用されている実例としては&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Atavist&lt;/li&gt;
&lt;li&gt;salesforce&lt;/li&gt;
&lt;li&gt;vaadin&lt;/li&gt;
&lt;li&gt;youtube&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そして今回のGoogle I/Oサイトということだそうです。&lt;/p&gt;

&lt;p&gt;で、Polymerを簡単に始めるためには&lt;a href="https://developers.google.com/web/tools/polymer-starter-kit/"&gt;Polymer Starter Kit&lt;/a&gt;というものがあります。
これを使うと、ブラウザで簡単にPolymerを使ったサイトのディレクトリ構成やファイルの配置、gulpのビルドファイルなどを初期構築できます。
Yeoman的な役割ですね。&lt;/p&gt;

&lt;p&gt;Googleが提唱する&lt;a href="http://www.google.com/design/spec/material-design/introduction.html#"&gt;Material design&lt;/a&gt;をベースにPolymerでサイトを作ると、あらゆるデバイスに最適なGoogle I/Oのようなサイトを作れるので、サイトを例としてPolymerを使ってみるのが良さそうです。&lt;/p&gt;

&lt;p&gt;Polymerの注意点としては、ShadowDOMの実装がアレということで、Polymer1.0ではShady DOMという疑似ShadowDOMを実装しています。ShadowDOMと思ってるとそうではないのです。&lt;/p&gt;

&lt;h3&gt;最後に&lt;/h3&gt;

&lt;p&gt;ServiceWorker、ES6、Polymerあたりの技術は今後重要になってくると思っているので、何か作りたいなーと思う収穫多きイベントでした。&lt;/p&gt;

&lt;p&gt;あと懇親会が2度（イベントが午後の部と、夜の部にわかれていたので）あって、おいしいお酒とたくさんのビールに囲まれて幸せでした。
スポンサー様、協賛ありがとうございました！&lt;/p&gt;

&lt;p&gt;htmlday 2015 のイベントTシャツをジャンケン大会、最後の最後、ほんとの最後の1枚でGETしました！ありがたやー。早速着てこのBlogを書いています。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>CakeFest2015に参加してきた</title>
    <link rel="alternate" href="http://blog.url.com/2015/06/14/cakefest2015.html"/>
    <id>http://blog.url.com/2015/06/14/cakefest2015.html</id>
    <published>2015-06-14T04:44:00Z</published>
    <updated>2015-06-14T15:29:38+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="/images/blog/cakefest2015.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;今年はCakePHP生誕10周年ということもあり、かねてよりアニバーサリーCakeFestとも言われていました。&lt;/p&gt;

&lt;p&gt;開催場所は世界一の都市ニューヨークです。
私個人でも初のニューヨークです。&lt;/p&gt;

&lt;h3&gt;今年の第一印象&lt;/h3&gt;

&lt;p&gt;初参加が多い。CakeFestでは毎年会う馴染みの人もいるのですが、今年は特に初参加が多かったようです。
参加者が多い。さすが10周年というべきか、ニューヨークなのでアメリカの人が多かったようです。&lt;/p&gt;

&lt;h3&gt;印象に残ったセッション&lt;/h3&gt;

&lt;p&gt;昨年までと同様に、CakePHPに関する主なセッションはコアチームから、その他Webに関するトピックをCFPで通ったスピーカーからという流れでした。
今年はコミュニティマネージャのJamesが急に来れなくなってしまい、イベントの仕切りに不安を覚えるスタートだったのですが、Larryが八面六臂の働きで素晴らしいCakeFestになりました。LarryがLTのタイムキーパーやったり、抽選会の司会やったり、それはそれは大活躍でした。&lt;/p&gt;

&lt;p&gt;コアチームの中でも&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mark Storyのセッション &lt;a href="http://www.slideshare.net/markstory/cakephp-30-and-beyond"&gt;CakePHP 3.0.0 and beyond (Conference)&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Jose Lorenzo Rodriguezのセッション &lt;a href="http://www.slideshare.net/josezap1/agile-database-access"&gt;Agile Database Access with CakePHP 3 (Conference)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;についてはCakePHPを利用する人には一読を薦める内容です。&lt;/p&gt;

&lt;h4&gt;Mark Storyのセッション&lt;/h4&gt;

&lt;p&gt;とは言えMarkのスライドはいつもの通りお題しか書いていないので、少し詳細にふれておきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CakePHP3の開発期間3年はとても長かった&lt;/li&gt;
&lt;li&gt;周辺の変化

&lt;ul&gt;
&lt;li&gt;PHPのバージョンも変わったし、機能も変わった

&lt;ul&gt;
&lt;li&gt;3年前のPHPは5.4.4(Released: 14 June 2012)あたりです。&lt;/li&gt;
&lt;li&gt;現在は5.6.9で、その間にはジェネレータや可変引数などが導入されました。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;他のフレームワークの流れも変わった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CakePHP3は2ヶ月で8万ダウンロードされた。すごいね。&lt;/li&gt;
&lt;li&gt;今後のバージョンの話（詳しくは&lt;a href="https://github.com/cakephp/cakephp/wiki"&gt;githubのロードマップ&lt;/a&gt;を見てね）

&lt;ul&gt;
&lt;li&gt;PSR-7対応は3.2の予定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;大きく変わったところ

&lt;ul&gt;
&lt;li&gt;Mailers：メール送信がこれまでよりも簡単になる&lt;/li&gt;
&lt;li&gt;CLI：出力フォーマットの機能が増える。例えばプログレスバーとか簡単に出せるようになる&lt;/li&gt;
&lt;li&gt;ORM：Joseが明日話すけど、関連のロードとかマッチングクエリが書けるようになるよ&lt;/li&gt;
&lt;li&gt;ElasticSearch：ORMと似た呼び出し方法が使えるようになる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;今後注力していくところ

&lt;ul&gt;
&lt;li&gt;プラグインのリリース&lt;/li&gt;
&lt;li&gt;3.x系の開発

&lt;ul&gt;
&lt;li&gt;これにより2系については3からのバックポートが中心となる&lt;/li&gt;
&lt;li&gt;3.x内での互換性は重視している&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PHP7&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Jose Lorenzo Rodriguezのセッション&lt;/h4&gt;

&lt;p&gt;Joseのセッションはコード多めで、解説だけではわかりづらいと思うのでサンプルコードが提供されています。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/lorenzo/cakephp3-advanced-examples"&gt;サンプルコード::github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;スライドの最初に出てくる3つのタイプのORM&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;いらっとする&lt;/li&gt;
&lt;li&gt;おもちゃみたいな&lt;/li&gt;
&lt;li&gt;流行の（通の）&lt;/li&gt;
&lt;li&gt;すばらしい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もちろんCakePHP3のORMは&lt;code&gt;すばらしい&lt;/code&gt;ものだよ。という流れで掴みはOKな展開。ちなみにQ&amp;amp;AでDoctrineは？という質問に「Hipster」と即座に回答していました。
ちなみに日本だとAgileはアジャイルと発音するけど、Joseのセッションではずっとエイジールと聞こえていた。&lt;/p&gt;

&lt;p&gt;スライドやサンプルを見てもらえると、CakePHP3のORMがかなり強力になっているのがわかると思います。
特に気になったのは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;タイプヒント&lt;/li&gt;
&lt;li&gt;カスタムファインダー&lt;/li&gt;
&lt;li&gt;集合検索&lt;/li&gt;
&lt;li&gt;多重階層の集合検索&lt;/li&gt;
&lt;li&gt;他のDBへのアソシエーション定義&lt;/li&gt;
&lt;li&gt;バーチャルフィールド&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あたりです。サンプルを使って実際に動かしてみるのが良いですね。まだ全部試せていないけど、CakePHP3もくもく会で少しずつ試せたら良いなーと思っています。&lt;/p&gt;

&lt;h3&gt;10周年&lt;/h3&gt;

&lt;p&gt;ノベルティが久々にたくさんあった。きっとシカゴ以来。&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p lang="tl" dir="ltr"&gt;Swag at &lt;a href="https://twitter.com/hashtag/CakeFest2015?src=hash"&gt;#CakeFest2015&lt;/a&gt; &lt;a href="http://t.co/gVbDL5ctPl"&gt;pic.twitter.com/gVbDL5ctPl&lt;/a&gt;&lt;/p&gt;&amp;mdash; CakePHP (@cakephp) &lt;a href="https://twitter.com/cakephp/status/604985701025869824"&gt;2015, 5月 31&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;で、私はそのシカゴから参加して6回目の参加となりました。
最後の抽選会でシカゴに参加した人、というときに私含め3人しか立たなかった（コアチームは除く）。さらにそのうち1人はマリアーノです。&lt;/p&gt;

&lt;p&gt;アニバーサリーということで最後の目玉商品は来年のCakeFest招待券！！。なんと交通費込み（上限あるけど）。
当選者は&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p lang="en" dir="ltr"&gt;The winners of free tickets to &lt;a href="https://twitter.com/hashtag/CakeFest2016?src=hash"&gt;#CakeFest2016&lt;/a&gt; &lt;a href="http://t.co/FvB3olZCgN"&gt;pic.twitter.com/FvB3olZCgN&lt;/a&gt;&lt;/p&gt;&amp;mdash; CakePHP (@cakephp) &lt;a href="https://twitter.com/cakephp/status/605408000073965568"&gt;2015, 6月 1&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;奥山さん！！！、来年はVIP待遇ですなー。来年はドイツらしいですよ。&lt;/p&gt;

&lt;h3&gt;感謝&lt;/h3&gt;

&lt;p&gt;10周年ということで、ここ数年は安藤さんと私の2人だったのを、もっと多くのCakePHPユーザにCakeFestに参加して欲しいと思い、様々なところでくどいぐらい誘いました（ご迷惑だった皆様すみません）。結果、私含め5人が日本から参加ということで、とても楽しかったです。&lt;/p&gt;

&lt;p&gt;安藤さんの紹介で、pivotal lab.にも訪問できたし、ピザ屋さんも（すごい）美味しかったです。&lt;/p&gt;

&lt;p&gt;また、日本でCakeRadioGaGaの中継を受け取ってくれたCo-Edoの田中さん、中継を見てくれた皆様、ありがとうございました。
別途報告会（もくもく会の中で？）、できたら良いなーと思っています。&lt;/p&gt;

&lt;p&gt;そのほかGoogle社の前で写真撮ったり、チェルシーマーケットでおみやげ買ったり、MOMA行ったり、ちゃんとニューヨークも楽しむことができました。&lt;/p&gt;

&lt;p&gt;最後に、CakeRadioGaGaの中継動画を。そういえばMarkとJoseに今年もメッセージちょうだいと言っていたのに、すっかり忘れたのは内緒です&amp;hellip;&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/VSwEo9VIi2A" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
</content>
  </entry>
  <entry>
    <title>CakePHP3 のアプリケーションを Behat でテストする</title>
    <link rel="alternate" href="http://blog.url.com/2015/05/17/cakephp3-behat.html"/>
    <id>http://blog.url.com/2015/05/17/cakephp3-behat.html</id>
    <published>2015-05-17T08:21:00Z</published>
    <updated>2015-05-17T19:08:06+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="/images/blog/cakephp3_behat.png" /&gt;&lt;/p&gt;

&lt;p&gt;CakePHP3の変更点として大きく取り上げられるのが、モデル層の変更でしょう。
しかしそれ以上に私たちが受けられる恩恵で大きいのが、PSR-2の採択です。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bakery.cakephp.org/2014/12/16/CakePHP-3-to-fully-adopt-PSR-2.html"&gt;CakePHP3 is fully adopt PSR-2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;例えばCakePHP2で単体テストを実行するときは、以下のように&lt;code&gt;cake&lt;/code&gt;コマンドを使って実行する必要がありました。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Console/cake test app Model/Articles
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cakeコマンド内でPHPUnitへの依存関係を解決し、PHPUnitからCakePHPのクラスが参照可能になるように作られていました。&lt;/p&gt;

&lt;p&gt;ところがCakePHP3からは、以下のように&lt;code&gt;phpunit&lt;/code&gt;コマンドを使って実行します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vendor/bin/phpunit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PSR-0のオートロードに対応したことで、PHPUnitからCakePHP3のクラスが参照可能になるのです。&lt;/p&gt;

&lt;h3&gt;はじめてみよう&lt;/h3&gt;

&lt;p&gt;同様の理由で、CakePHP2のアプリケーションをBehatでテストしたい場合は、私が作成した&lt;a href="https://github.com/sizuhiko/Bdd"&gt;Bdd Plugin&lt;/a&gt;を使ってBehatのステップ記述からCakePHPのクラスを参照可能になるようにしていました。&lt;/p&gt;

&lt;p&gt;しかしBehatにおいても直接実行したステップ定義から、CakePHP3のクラスが参照可能になるのです。&lt;/p&gt;

&lt;p&gt;CakePHP3のアプリケーションをどのようにBehatからアクセスするのか、CakePHP3のブログチュートリアルを例にサンプルアプリを作成しました。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/sizuhiko/cakephp3-bdd-example"&gt;cakephp3-bdd-example&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;サンプルアプリケーションは&lt;a href="/2015/04/19/cakebox-is-awesome.html"&gt;以前記事&lt;/a&gt;にもした&lt;a href="https://github.com/alt3/cakebox"&gt;Cakebox&lt;/a&gt;を使って構築しました。
またサンプルアプリケーションの実行にもCakeboxを使うと簡単に実行環境を構築することができます。&lt;/p&gt;

&lt;p&gt;サンプルアプリケーションのGithubページに書いてあるとおりの手順で進むことができます。
本ブログでは日本語で補足します。&lt;/p&gt;

&lt;h4&gt;必要なアプリケーションのインストール&lt;/h4&gt;

&lt;p&gt;以下のアプリケーションをホストOSにインストールします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VirtualBox&lt;/li&gt;
&lt;li&gt;Vagrant&lt;/li&gt;
&lt;li&gt;Cakebox&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;詳しくは&lt;a href="/2015/04/19/cakebox-is-awesome.html"&gt;Cakebox を使ってCakePHP3アプリケーションを作ってみよう&lt;/a&gt;の記事を参照してください。&lt;/p&gt;

&lt;h4&gt;サンプルアプリケーションのインストール&lt;/h4&gt;

&lt;p&gt;CakeboxのゲストOSにログインして、cakeboxコマンドでアプリケーションをインストールします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;localhost:cakebox $ vagrant ssh
Welcome to Ubuntu 14.04.1 LTS (GNU/Linux 3.13.0-24-generic x86_64)

vagrant@cakebox $ cakebox application add blog-tutorial.app --source https://github.com/sizuhiko/cakephp3-bdd-example.git --webroot blog-tutorial.app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると、以下のように表示されます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Creating application http://blog-tutorial.app

Configuring installer
Creating installation directory
Git installing user specified application sources
Creating virtual host
* Successfully created PHP-FPM virtual host
Creating databases
* Successfully created main database
* Successfully created test database
Configuring permissions
Updating configuration files
Application created using:
  database =&amp;gt; blog-tutorial_app
  framework_human =&amp;gt; user specified
  framework_short =&amp;gt; custom
  installation_method =&amp;gt; git
  path =&amp;gt; /home/vagrant/Apps/blog-tutorial.app
  source =&amp;gt; https://github.com/sizuhiko/cakephp3-bdd-example.git
  url =&amp;gt; blog-tutorial.app
  webroot =&amp;gt; blog-tutorial.app
Please note:
  =&amp;gt; Configuration files are not automatically updated for user specified applications.
  =&amp;gt; Make sure to manually update your database credentials, plugins, etc.

Remember to update your hosts file with: 10.33.10.10 http://blog-tutorial.app

Installation completed successfully
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;新規アプリケーションの構築と同じように、データベースやNginxの設定ファイルも生成してくれるので、すぐにアプリケーションを実行できる環境が整います。&lt;/p&gt;

&lt;p&gt;あとはアプリケーションのルートディレクトリに移動して、不足しているディレクトリを作ってcomposerでライブラリをインストールします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vagrant@cakebox $ cd Apps/blog-tutorial.app
vagrant@cakebox:~/Apps/blog-tutorial.app$ mkdir tmp 
vagrant@cakebox:~/Apps/blog-tutorial.app$ mkdir logs
vagrant@cakebox:~/Apps/blog-tutorial.app$ cp config/app.default.php config/app.php
vagrant@cakebox:~/Apps/blog-tutorial.app$ composer install 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;サンプルアプリケーションの環境設定&lt;/h4&gt;

&lt;h5&gt;データベース接続設定の変更&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;config/app.php&lt;/code&gt;のデータベース接続設定をCakeboxで生成された内容に変更します。
以下のとおり&lt;code&gt;username&lt;/code&gt;と&lt;code&gt;database&lt;/code&gt;の部分のみ変更します（それ以外はそのまま）。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    'Datasources' =&amp;gt; [
        'default' =&amp;gt; [
            // 省略
            'username' =&amp;gt; 'cakebox',
            'database' =&amp;gt; 'blog-tutorial_app',
            // 省略
        ],
        'test' =&amp;gt; [
            // 省略
            'username' =&amp;gt; 'cakebox',
            'database' =&amp;gt; 'test_blog-tutorial_app',
            // 省略
        ],
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;ホストOSのhostsファイルの変更&lt;/h5&gt;

&lt;p&gt;ホストOSのhostsファイルに指示されたように &lt;code&gt;10.33.10.10 blog-tutorial.app&lt;/code&gt; の行を追加します。&lt;/p&gt;

&lt;h5&gt;Cakebox環境のチューニング&lt;/h5&gt;

&lt;p&gt;Cakeboxのデフォルト設定ではBehatを使ってアプリケーションをテストしようとすると、いくつか動かない箇所があったので、設定値をチューニングします。
まずボックスファイルのメモリを2048Mにアップします（デフォルトは1024M）。
次にxdebug.iniのxdebug.max&lt;em&gt;nesting&lt;/em&gt;levelの値を調整します。READMEでは&lt;code&gt;500&lt;/code&gt;を設定しています。もう少し値は小さくても大丈夫かもしれないですが、とりあえず500あれば大丈夫です。&lt;/p&gt;

&lt;p&gt;具体的な設定例は、githubのREADMEを参照してください。&lt;/p&gt;

&lt;h5&gt;Webサーバの設定&lt;/h5&gt;

&lt;p&gt;Behatからアプリケーションをテストするときは、ブラウザから通常操作するのと同じようにWebサーバを通過します。
そのため、アプリケーションが通常操作としてアクセスされたのか、Behatのテストでアクセスされたのかを識別して環境を切り替えてあげないと、データベースのデータがテストによって変更するので、通常操作のデータが失われてしまいます。&lt;/p&gt;

&lt;p&gt;このあたりの話（理由や手法）は、過去に何度か記事にしていたり、書籍&lt;a href="http://www.amazon.co.jp/CakePHP%E3%81%A7%E5%AD%A6%E3%81%B6%E7%B6%99%E7%B6%9A%E7%9A%84%E3%82%A4%E3%83%B3%E3%83%86%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3-%E6%B8%A1%E8%BE%BA-%E4%B8%80%E5%AE%8F/dp/4844336789/ref=la_B004LVAF8Q_1_1?s=books&amp;amp;amp;ie=UTF8&amp;amp;amp;qid=1410066610&amp;amp;amp;sr=1-1"&gt;CakePHPで学ぶ継続的インテグレーション&lt;/a&gt;でも詳しく解説していますので、CakePHP2の内容ですが、一度手に取ってみてください。&lt;/p&gt;

&lt;p&gt;で、このサンプルはnginx用の設定ファイルを&lt;code&gt;blog-tutorial.app.test&lt;/code&gt;というファイルで用意しておいたので、これをCakeboxのnginxの設定ディレクトリにコピーして再起動するだけで大丈夫です。&lt;/p&gt;

&lt;p&gt;環境切り替え用に&lt;code&gt;blog-tutorial.app.test&lt;/code&gt;というホスト名でアクセスされたら、nginxで環境変数&lt;code&gt;CAKE_ENV&lt;/code&gt;に&lt;code&gt;test&lt;/code&gt;という文字列を設定するようにしています。
CakePHP3のアプリケーションでは&lt;code&gt;config/bootstrap.php&lt;/code&gt;で環境変数の設定値を見てDBの接続先が&lt;code&gt;test&lt;/code&gt;になるように設定します。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;if (getenv('CAKE_ENV') === 'test') {
    ConnectionManager::alias('test', 'default');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CakePHP3ではConnectionManagerのaliasという機能でdefaultへ接続しようとしたときに、実際はtestの接続内容を参照するように設定することができるので、この機能を利用し、間違ってdefaultのテーブルが書き変わらないようにしています。&lt;/p&gt;

&lt;p&gt;より詳しい手順や、設定ファイルの内容はgithubのREADMEや設定ファイルを参照してください。&lt;/p&gt;

&lt;p&gt;Behatから参照可能なホスト名として&lt;code&gt;blog-tutorial.app.test&lt;/code&gt;をCakeboxのVM側の&lt;code&gt;/etc/hosts&lt;/code&gt;に追加します。&lt;/p&gt;

&lt;h4&gt;データベースのマイグレーション&lt;/h4&gt;

&lt;p&gt;データベースの生成はマイグレーションコマンドで一発です。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bin/cake migrations migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Behatのテストを実行する&lt;/h4&gt;

&lt;p&gt;ここまで設定できれば、後はテストを実行するだけです。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vagrant@cakebox:~/Apps/blog-tutorial.app$ vendor/bin/behat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;おそらくすべてグリーンで成功するはずです。
うまくいかなかったら、お気軽にgithubのissueに&lt;code&gt;日本語で&lt;/code&gt;書いてください。&lt;/p&gt;

&lt;h3&gt;どうやったのか？&lt;/h3&gt;

&lt;p&gt;まずCakePHP3で最初に注目したのは、単体テストがPHPUnitのコマンドから実行できるようになっていたことです。
これは過去に外部の様々なツールやアプリケーションとCakePHPを結合するときに一番悩んでいたところでした。&lt;/p&gt;

&lt;p&gt;PHPUnitからCakePHP3にどのように連動しているのか？を調べることから始めました。
PHPUnitは実行すると、カレントディレクトリのphpunit.xml（もしくはphpunit.xml.dist）を参照します。&lt;/p&gt;

&lt;h4&gt;PHPUnitがCakePHP3を呼び出す仕組みを知る&lt;/h4&gt;

&lt;p&gt;CakePHP3ではアプリケーションスケルトンを生成すると、ルートディレクトリに&lt;code&gt;phpunit.xml.dist&lt;/code&gt;が生成されます。&lt;/p&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- phpunit.xml.dist --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;phpunit&lt;/span&gt;
    &lt;span class="na"&gt;colors=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
    &lt;span class="na"&gt;processIsolation=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;
    &lt;span class="na"&gt;stopOnFailure=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;
    &lt;span class="na"&gt;syntaxCheck=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;
    &lt;span class="na"&gt;bootstrap=&lt;/span&gt;&lt;span class="s"&gt;"./tests/bootstrap.php"&lt;/span&gt;  &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;(1)&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;php&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ini&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"memory_limit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"-1"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ini&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"apc.enable_cli"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/php&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Add any additional test suites you want to run here --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;testsuites&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;testsuite&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"App Test Suite"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;directory&amp;gt;&lt;/span&gt;./tests/TestCase&lt;span class="nt"&gt;&amp;lt;/directory&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/testsuite&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- Add plugin test suites here. --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/testsuites&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Setup a listener for fixtures (2) --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;listeners&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;listener&lt;/span&gt;
        &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"\Cake\TestSuite\Fixture\FixtureInjector"&lt;/span&gt;
        &lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;"./vendor/cakephp/cakephp/src/TestSuite/Fixture/FixtureInjector.php"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;arguments&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;object&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"\Cake\TestSuite\Fixture\FixtureManager"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/arguments&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/listener&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/listeners&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/phpunit&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このファイルを読むと、2つ重要な箇所があるのに気がつきます。&lt;/p&gt;

&lt;p&gt;まず(1)の &lt;code&gt;bootstrap=&amp;quot;./tests/bootstrap.php&amp;quot;&lt;/code&gt; という部分。
bootstrap属性にはPHPUnitが実行されるとき呼び出されるPHPコードを指定することができます。
ここからCakePHP3アプリケーションをテスト用にロードする場合、このファイルを呼び出せば外部ツールからCakePHP3が操作できるようになることがわかります。&lt;/p&gt;

&lt;p&gt;実はこのファイルを実際に見てみると、以下の1行しかありません。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;require dirname(__DIR__) . '/config/bootstrap.php';
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テストとは関係なく、アプリケーションの&lt;code&gt;config/bootstrap.php&lt;/code&gt;をロードしています。
おそらく将来テストに関する何か差分が必要になったときに、テスト側にだけ変更が発生すると思うので、テスト用にCakePHP3をロードする場合は&lt;code&gt;tests/bootstrap.php&lt;/code&gt;をロードしておいた方が良いでしょう。&lt;/p&gt;

&lt;p&gt;次に(2)のリスナー設定です。
PHPUnitのリスナーはPHPUnitのフックポイントでコールバックされる処理を記述できるクラスです。
CakePHP3ではフィクスチャ（DBのテストテーブルとデータを準備する仕組み）を投入するのに利用しています。
以下のように&lt;code&gt;FixtureInjector&lt;/code&gt;クラスのstartTestとendTestでテストケース開始／終了ごとにフィクスチャのロードとアンロードが対応するようになっています。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;class FixtureInjector implements PHPUnit_Framework_TestListener
{

    /**
     * Adds fixtures to a test case when it starts.
     *
     * @param \PHPUnit_Framework_Test $test The test case
     * @return void
     */
    public function startTest(PHPUnit_Framework_Test $test)
    {
        $test-&amp;gt;fixtureManager = $this-&amp;gt;_fixtureManager;
        if ($test instanceof TestCase) {
            $this-&amp;gt;_fixtureManager-&amp;gt;fixturize($test);
            $this-&amp;gt;_fixtureManager-&amp;gt;load($test);
        }
    }

    /**
     * Unloads fixtures from the test case.
     *
     * @param \PHPUnit_Framework_Test $test The test case
     * @param float $time current time
     * @return void
     */
    public function endTest(PHPUnit_Framework_Test $test, $time)
    {
        if ($test instanceof TestCase) {
            $this-&amp;gt;_fixtureManager-&amp;gt;unload($test);
        }
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;BehatからCakePHP3を呼び出す仕組みに流用する&lt;/h4&gt;

&lt;p&gt;ここまでの内容が外部ツールからCakePHP3のアプリケーションをテストするのに重要な部分です。
PHPUnitがCakePHP3を呼び出すのと同じようにする仕組みをBehatのFeatureContextクラスに用意します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;features/bootstrap/FeatureContext.php&lt;/code&gt;というBehatが読み込むファイルに記述します。
CakePHP2とBDDプラグインによるインテグレーションではBehatのバージョンが2系でしたが、CakePHP3との連携では最新の3系を利用しています。
Behat3からはBehat1系、2系で利用していたファイル構成と異なっています。従来、&lt;code&gt;support/bootstrap.php&lt;/code&gt;や&lt;code&gt;support/hooks.php&lt;/code&gt;あたりに書いていたコードはすべてContextクラス内に記述することになります。&lt;/p&gt;

&lt;p&gt;Behat3からはFeatureContextにブートストラップ記述を、それ以外のコンテキストは用途に応じて別のコンテキストクラスに分割する方がスマートに記述できそうです。
Behat2では複数のコンテキストクラスを使う場合、FeatureContextでインクルードしないといけなかったのですが、Behat3では&lt;code&gt;behat.yml&lt;/code&gt;上で記述できるのでより簡単になっています。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;class FeatureContext implements Context, SnippetAcceptingContext
{
    public function __construct()
    {
        require_once dirname(dirname(__DIR__)) . '/tests/bootstrap.php'; // (1)

        // Always connect test database
        ConnectionManager::alias('test', 'default'); // (2)

        Fabricate::config(function($config) { // (3)
            $config-&amp;gt;adaptor = new CakeFabricateAdaptor([
                CakeFabricateAdaptor::OPTION_FILTER_KEY =&amp;gt; true,
                CakeFabricateAdaptor::OPTION_VALIDATE   =&amp;gt; false
            ]);
        });

        $this-&amp;gt;fixtureInjector = new FixtureInjector(new FixtureManager()); //(4)
        $this-&amp;gt;fixture = new BddAllFixture();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;(1)は、phpunit.xmlのbootstrapと同様にCakePHP3の&lt;code&gt;tests/bootstrap.php&lt;/code&gt;を呼び出します。&lt;/li&gt;
&lt;li&gt;(2)は、Behatのステップ定義からテストデータを投入するときに、testの接続設定を参照するようにエイリアスを設定します。&lt;/li&gt;
&lt;li&gt;(3)は、テストデータジェネレータ&lt;a href="https://github.com/sizuhiko/cakephp-fabricate-adaptor"&gt;Fabricate&lt;/a&gt;の初期設定です。FabricateもCakePHP3対応されています。&lt;/li&gt;
&lt;li&gt;(4)は、phpunit.xmlのリスナー部分を模して、Behatのシナリオ毎にフィクスチャが動くようにFixtureInjectorのインスタンスを生成しています。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;BehatからCakePHP3のフィクスチャを利用する&lt;/h4&gt;

&lt;p&gt;(4)で書いたとおり、FixtureInjectorのインスタンスを生成したので、Behatのフックポイントを使ってシナリオ開始時にフィクスチャをロードし、シナリオ終了時にフィクスチャをアンロードするようにします。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    /** @BeforeScenario */
     public function beforeScenario(BeforeScenarioScope $scope)
     {
        $this-&amp;gt;fixtureInjector-&amp;gt;startTest($this-&amp;gt;fixture);
     }

     /** @AfterScenario */
     public function afterScenario(AfterScenarioScope $scope)
     {
        $this-&amp;gt;fixtureInjector-&amp;gt;endTest($this-&amp;gt;fixture, time());
     }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際にフィクスチャを利用するためには、&lt;code&gt;$this-&amp;gt;fixture&lt;/code&gt;のクラスがCakePHP3のTestCaseでなければならないので、&lt;code&gt;$fixtures&lt;/code&gt;という利用するフィクスチャファイルの配列を定義しただけのクラスを用意してFixtureInjectorに渡すようにします。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;class BddAllFixture extends TestCase {
    public $fixtures = [
        'Categories' =&amp;gt; 'app.categories',
        'Articles'   =&amp;gt; 'app.articles',
        'Users'      =&amp;gt; 'app.users',
        'Categories' =&amp;gt; 'app.categories'
    ];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このあたりの話も、書籍&lt;a href="http://www.amazon.co.jp/CakePHP%E3%81%A7%E5%AD%A6%E3%81%B6%E7%B6%99%E7%B6%9A%E7%9A%84%E3%82%A4%E3%83%B3%E3%83%86%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3-%E6%B8%A1%E8%BE%BA-%E4%B8%80%E5%AE%8F/dp/4844336789/ref=la_B004LVAF8Q_1_1?s=books&amp;amp;amp;ie=UTF8&amp;amp;amp;qid=1410066610&amp;amp;amp;sr=1-1"&gt;CakePHPで学ぶ継続的インテグレーション&lt;/a&gt;でも詳しく解説していますので、CakePHP2の内容ですが、一度手に取ってみてください。
CakePHP3になって、メソッドやクラスが一部変わりましたが、BehatとCakePHPをインテグレーションするためにおさえておかないといけないポイントはほとんど変わっていません。&lt;/p&gt;

&lt;p&gt;後はBehat3のドキュメント、CakePHP3のドキュメントを見ながら進めていくと、エンド to エンドのテストが容易に記述できるようになります。&lt;/p&gt;

&lt;h3&gt;さいごに&lt;/h3&gt;

&lt;p&gt;GithubのREADMEに書いた内容をすべて日本語にした訳ではないのですが、要所をかいつまんで重要な部分を解説しました。
より詳しい内容などはREADMEを見ていただければと思います。&lt;/p&gt;

&lt;p&gt;また、BDDプラグインのサンプルアプリにはあった、日本語のシナリオや、JavaScriptを使ったテストなど、Behat3になって大きく変わってはいませんが、サンプルアプリケーションに少しずつ載せられたらなぁと思っています。
何かうまく動かないなどあれば、気軽にGithubのissueに投稿お願いします（日本語でOKです）。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>AngularJSでngDialog中の値をngModelでバインドしたいとき注意すること</title>
    <link rel="alternate" href="http://blog.url.com/2015/05/02/angularjs-ngdialog-ngmodel-not-bind.html"/>
    <id>http://blog.url.com/2015/05/02/angularjs-ngdialog-ngmodel-not-bind.html</id>
    <published>2015-05-02T08:19:00Z</published>
    <updated>2015-05-02T17:48:57+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;AngularJS でモーダルダイアログを表示するために、何を使うでしょうか？
多くの場合 &lt;a href="https://github.com/likeastore/ngDialog"&gt;ngDialog&lt;/a&gt; というコンポーネントを使うのではないかと思います。&lt;/p&gt;

&lt;p&gt;で、ダイアログ上の値は、それを表示したコントローラのスコープにバインドする、という良くあるシナリオを想定してください。&lt;/p&gt;

&lt;p&gt;まずうまく&lt;a href="https://jsfiddle.net/sizuhiko/ox73fktc/1/"&gt;動作するサンプル&lt;/a&gt;を紹介します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Open Dialog&lt;/code&gt;というリンクをクリックして、ダイアログを表示したら、チェックボックスをON/OFFしてください。
ダイアログ背景のページで &lt;code&gt;check: true&lt;/code&gt; と &lt;code&gt;check: false&lt;/code&gt; がトグルするはずです。&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-ng-app=&lt;/span&gt;&lt;span class="s"&gt;"myApplication"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-ng-controller=&lt;/span&gt;&lt;span class="s"&gt;"MainController"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;ng-click=&lt;/span&gt;&lt;span class="s"&gt;"ShowNgDialog()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Open Dialog&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;check: {{FormData.allcheck}}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myApplication&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'myApplication'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'ngDialog'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="nx"&gt;myApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'MainController'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ngDialog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;allcheck&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ShowNgDialog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;ngDialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;            
            &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;div&amp;gt;&amp;lt;input type="checkbox" ng-model="FormData.allcheck"/&amp;gt;&amp;lt;/div&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;plain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;$scope&lt;/span&gt;

        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;    
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とても簡単な例ですが、AngularJSを使ってモーダルダイアログを表示して、チェックボックスの値をコントローラのスコープ変数 &lt;code&gt;FormData.allcheck&lt;/code&gt; にバインドしています。&lt;/p&gt;

&lt;h3&gt;なぜか変数だとバインドされない&lt;/h3&gt;

&lt;p&gt;一方で、こちらは&lt;a href="http://jsfiddle.net/sizuhiko/ox73fktc/2/"&gt;動作しないサンプル&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Open Dialog&lt;/code&gt;というリンクをクリックして、ダイアログを表示したら、チェックボックスをON/OFFしてください。
ダイアログ背景のページは &lt;code&gt;check: false&lt;/code&gt; のままです。&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-ng-app=&lt;/span&gt;&lt;span class="s"&gt;"myApplication"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-ng-controller=&lt;/span&gt;&lt;span class="s"&gt;"MainController"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;ng-click=&lt;/span&gt;&lt;span class="s"&gt;"ShowNgDialog()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Open Dialog&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;check: {{allcheck}}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myApplication&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'myApplication'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'ngDialog'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="nx"&gt;myApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'MainController'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ngDialog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allcheck&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ShowNgDialog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;ngDialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;            
            &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;div&amp;gt;&amp;lt;input type="checkbox" ng-model="allcheck"/&amp;gt;&amp;lt;/div&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;plain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;$scope&lt;/span&gt;

        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;    
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;変わったのは、コントローラのスコープ変数にバインドするオブジェクトです。&lt;/p&gt;

&lt;p&gt;うまく動作するのは &lt;code&gt;$scope.FormData={allcheck: false};&lt;/code&gt; のようにスコープのプロパティはオブジェクトで、オブジェクトに値を保持しているケースです。
一方うまく動作しないのは &lt;code&gt;$scope.allcheck = false;&lt;/code&gt; のようにスコープのプロパティに変数で値を保持しているケースです。&lt;/p&gt;

&lt;h3&gt;ngDialogでなければ変数でバインドできる&lt;/h3&gt;

&lt;p&gt;ngDialogでなく普通に表示される範囲にある場合は、&lt;a href="http://jsfiddle.net/sizuhiko/ox73fktc/3/"&gt;動作するサンプル&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;チェックボックスをON/OFFしてください。ページで &lt;code&gt;check: true&lt;/code&gt; と &lt;code&gt;check: false&lt;/code&gt; がトグルするはずです。&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-ng-app=&lt;/span&gt;&lt;span class="s"&gt;"myApplication"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-ng-controller=&lt;/span&gt;&lt;span class="s"&gt;"MainController"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;ng-model=&lt;/span&gt;&lt;span class="s"&gt;"allcheck"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;check: {{allcheck}}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myApplication&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'myApplication'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'ngDialog'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="nx"&gt;myApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'MainController'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ngDialog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allcheck&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;まとめ&lt;/h3&gt;

&lt;p&gt;ngDialogを使うときのちょっとした小ネタなのですが、解決策を見つけるまで結構時間がかかりました。
もし、ngDialogを使ってうまくデータバィンディングできない！という人の参考になればと思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>gulp-rev-replace を使ってリビジョン管理をするときに注意したいこと</title>
    <link rel="alternate" href="http://blog.url.com/2015/05/02/notice-gulp-rev-replace.html"/>
    <id>http://blog.url.com/2015/05/02/notice-gulp-rev-replace.html</id>
    <published>2015-05-02T06:51:00Z</published>
    <updated>2015-05-02T17:14:37+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;JavaScriptでモダンな開発をするとき、&lt;a href="http://gulpjs.com/"&gt;gulp&lt;/a&gt;というビルドシステムを使うと、簡単にビルド過程を自動化できます。
さらに、JavaScriptでアプリケーションを作ったとき、ライブラリはCDNなどから取得するとして、自分で作ったスクリプトファイルは１つのファイルにまとめてミニファイズする、ということをgulpのタスクで書くでしょう。
一般的にJavaScriptやCSSをHTML上に記述するとき、以下のようにします。&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/js/app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/css/app.css"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;リリースしたのにファイルの変更が読み込まれない&lt;/h3&gt;

&lt;p&gt;良くあるシーンとして、JavaScriptファイルやCSSファイルを差し替えたのに、変更がブラウザに反映されない、というケースです。
これはブラウザのキャッシュが有効になっていて、JavaScriptやCSSのファイルをWebサーバへ取得しに行かないために発生します。&lt;/p&gt;

&lt;p&gt;そこで、この課題に対応するため、以下のどちらかの方法を採用すると思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ファイル名のGETパラメータに、乱数を付加して &lt;code&gt;/js/app.js?_リビジョン番号&lt;/code&gt; のようにする&lt;/li&gt;
&lt;li&gt;ファイル名にリビジョン番号を入れて &lt;code&gt;/js/app-リビジョン番号.js&lt;/code&gt; のようにする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こうすると、リビジョンが変更になった（リリースした）ときにファイルが必ず読み込まれるようになります。&lt;/p&gt;

&lt;h3&gt;GETパラメータの付加は推奨されない&lt;/h3&gt;

&lt;p&gt;前記の対応のうち、GETパラメータにリビジョン番号を追加する方法はあまり推奨されません(参照:&lt;a href="http://www.amazon.co.jp/High-Performance-Web-Sites-Essential/dp/0596529309/ref=tmm_pap_title_0?ie=UTF8&amp;amp;amp;qid=1430550831&amp;amp;amp;sr=8-1"&gt;&lt;code&gt;High Performance Web Sites&lt;/code&gt;&lt;/a&gt;)。
この方法は、ブラウザやWebサーバがキャッシュを利用しないため、サイトの負荷につながります。&lt;/p&gt;

&lt;p&gt;もちろん毎回リクエストが来ても問題ないサイトや、利用者が想定されていれば問題ないかもしれないですが、利用できるのであればキャッシュが有効になっていてページが速く表示できた方が良いことはいうまでもありません。&lt;/p&gt;

&lt;p&gt;gulp-revを使ってGETパラメータにリビジョン番号を入れたい場合は、&lt;a href="https://github.com/bustardcelly/gulp-rev-append"&gt;gulp-rev-append&lt;/a&gt;を使うとクエリ文字列としてハッシュ値を入れられるようになります。&lt;/p&gt;

&lt;h3&gt;ビルド時にファイル名を変更する&lt;/h3&gt;

&lt;p&gt;推奨される方法は  &lt;code&gt;/js/app-リビジョン番号.js&lt;/code&gt; のように、ファイル名を変更することです。
gulpのタスク上に、&lt;code&gt;gulp-rev&lt;/code&gt;のREADMEに書いてあるとおりの方法で対応します。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;gulp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gulp'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;rev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gulp-rev'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// by default, gulp would pick `assets/css` as the base, &lt;/span&gt;
    &lt;span class="c1"&gt;// so we need to set it explicitly: &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'assets/css/*.css'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'assets/js/*.js'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'assets'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'build/assets'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;// copy original assets to build dir &lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'build/assets'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;// write rev'd assets to build dir &lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;manifest&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'build/assets'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// write manifest to build dir &lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プロジェクトによっては、このように単純な構成ではなく、複数のストリームを使ってビルドすることもあるでしょう。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'build_js'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'src/*.js'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sourcemaps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'bundle.js'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sourcemaps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'dist'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;manifest&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'dist'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;たとえばjsとcssを分けてビルドしなくてはいけないようなケースですね。
元ファイル名と、置き換えられたファイル名のマッピングを出力するために、&lt;code&gt;rev.manifest()&lt;/code&gt;というAPIを呼び出します。
出力先は、そのあとの&lt;code&gt;dest&lt;/code&gt;API呼び出しで指定します。ファイル名は省略時には &lt;code&gt;manifest.json&lt;/code&gt; というファイル名になります。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"app.css"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"app-098f6bcd.css"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"app.js"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"app-273c2cin.js"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;ファイル名の変更を反映する&lt;/h3&gt;

&lt;p&gt;HTMLファイルのjsやcssのファイル名を書き換えるのに使うのが、&lt;a href="https://github.com/jamesknelson/gulp-rev-replace"&gt;gulp-rev-replace&lt;/a&gt;です。
マニフェストファイルを入力として、HTMLファイルのビルド（コピー）過程で差し込むことができるようになっています。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"revreplace"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"revision"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;manifest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"./"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;distFolder&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"/rev-manifest.json"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;distFolder&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"/index.html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;revReplace&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;manifest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;manifest&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;distFolder&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;revReplace()&lt;/code&gt; というAPIを使って、指定したマニフェストの内容と一致する部分を置換します。&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/js/app-273c2cin.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/css/app-098f6bcd.css"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;とても便利、でも&amp;hellip;&lt;/h3&gt;

&lt;p&gt;私が遭遇したケースで説明しましょう。
ビルド済みファイル名が &lt;code&gt;domain.js&lt;/code&gt; というファイル名でそれにリビジョン番号を追加する必要がありました。
さらにドメイン名のチェック用に、&lt;a href="https://github.com/miguelmota/is-valid-domain"&gt;is-valid-domain.js&lt;/a&gt;というライブラリも読み込んでいました。&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/lib/is-valid-domain.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/js/domain.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでビルドしたところ&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/lib/is-valid-domain-リビジョン番号.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/js/domain-リビジョン番号.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようになってしまいました。&lt;code&gt;domain.js&lt;/code&gt; だけでなく、&lt;code&gt;is-valid-domain.js&lt;/code&gt; も変わってしまいます。
なぜこうなるか、ソースを見てみました。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;renames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;replaceOnce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unreved&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reved&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まぁですよね。ファイルを読み込んで &lt;code&gt;domain.js&lt;/code&gt; に一致するところで分割、&lt;code&gt;domain-リビジョン番号.js&lt;/code&gt; を追加して繰り返す、という実装です。
ファイルのどこに入っているか厳密に識別するのは困難（正規表現を使えばできなくはないかもしれないけど）です。&lt;/p&gt;

&lt;p&gt;で、このようなケースにならなそうなら、そのまま gulp-rev-replace を使ってもらえば問題ないと思います。
ライブラリの挙動がわかっていれば利用するのも安心ですね。&lt;/p&gt;

&lt;h3&gt;私は gulp-template を使いました&lt;/h3&gt;

&lt;p&gt;で、私は gulp-rev-replace 使うのやめました。&lt;/p&gt;

&lt;p&gt;ちょっと予期しない動作をするのは怖かったので、リビジョン番号が入って欲しいところを明示するようにしたかったのです。
そこで使ったのが &lt;a href="https://github.com/sindresorhus/gulp-template"&gt;gulp-template&lt;/a&gt; です。&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= name %&amp;gt;&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;%= =&amp;gt;&lt;/code&gt; で囲んだ部分に値を差し込むことができるので、以下のように記述します。&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/lib/is-valid-domain.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/js/&amp;lt;%= data['domain.js'] %&amp;gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そこにマニフェストJSONを&lt;code&gt;fs-extra&lt;/code&gt;で読み込んで、&lt;code&gt;template&lt;/code&gt;APIに流し込むようにします。
そのままだと、変換前JSファイル名が変数名になって取り出しずらいので、&lt;code&gt;variable&lt;/code&gt;オプションを指定して&lt;code&gt;data&lt;/code&gt;という変数名にバインドするようにします。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;gulp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gulp'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gulp-template'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'fs-extra'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'build_html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;manifest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readJsonSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'./'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;distFolder&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'/rev-manifest.json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;throws&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'src/*.html'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;manifest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'data'&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'dist'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;まとめ&lt;/h3&gt;

&lt;p&gt;静的ファイルのリビジョン管理って結構面倒なんですが、gulp使うと便利なライブラリあって簡単に実装できます。
今回は私が遭遇した特殊なケースかもしれないので、そのままgulp-revだけで完結できることも多々あるでしょう。
gulp-revや、その関連ライブラリには便利な機能がまだあるので、一度使ってみてください。&lt;/p&gt;
</content>
  </entry>
</feed>
