<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2014-03-30T09:22:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Composerのautoloadを使いこなす</title>
    <link rel="alternate" href="http://blog.url.com/2014/03/30/composer-autoload.html"/>
    <id>http://blog.url.com/2014/03/30/composer-autoload.html</id>
    <published>2014-03-30T09:22:00Z</published>
    <updated>2014-03-30T18:41:51+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Composerにはautoloadを自動生成する機能があり、これを利用するとrequire_onceなどを使わなくとも自動的にソースコードがロードされます。言葉のとおりautoloadですね。&lt;/p&gt;

&lt;p&gt;例えばCakePHPでは&lt;code&gt;App::uses()&lt;/code&gt;という記述で利用するクラスがどこにあるのか識別して、クラスをロードできるようにするのですが、これを使わなくても Composer のautoload機能を使うとクラスが利用可能になります。&lt;/p&gt;

&lt;p&gt;app/composer.json に以下のような定義を記述してみましょう。&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"autoload"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"classmap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Model"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Controller"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;ここで &lt;code&gt;autoloadだけ&lt;/code&gt; を更新するコマンドを実行します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;composer dumpautoload
&lt;/pre&gt;

&lt;p&gt;コマンド名からはちょっと想像がつきにくいのですが、これを実行すると &lt;code&gt;Generating autoload files&lt;/code&gt; という結果が表示されてautoload定義が更新されます。&lt;/p&gt;
&lt;pre class="highlight php"&gt;// app/Vendor/composer/autoload_classmap.php
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="c1"&gt;// autoload_classmap.php @generated by Composer
&lt;/span&gt;
&lt;span class="nv"&gt;$vendorDir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;__FILE__&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nv"&gt;$baseDir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$vendorDir&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;'AppController'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$baseDir&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/Controller/AppController.php'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'AppModel'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$baseDir&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/Model/AppModel.php'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'PagesController'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$baseDir&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/Controller/PagesController.php'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'Post'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$baseDir&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/Model/Post.php'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'PostsController'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$baseDir&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/Controller/PostsController.php'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;今回は予めpostsテーブルからbakeしてPostモデルとPostsコントローラを生成しておきました。
こうすると、App::uses()を記述しなくても、composerのautoloadがクラス名からPHPファイルを自動解決してくれます。App::uses()の記述が多過ぎてコードの見通しが悪い場合などに利用を検討されてはいかがでしょうか？&lt;/p&gt;

&lt;p&gt;この他にもComposerのautoload機能は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PSR-4&lt;/li&gt;
&lt;li&gt;PSR-0&lt;/li&gt;
&lt;li&gt;Files（ファイルを直接指定できる）&lt;/li&gt;
&lt;li&gt;include-path(どうしてもphp.ini的なincludeパスで解決しなくてはならない時のためにある)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったパス解決方法を用意していますので、namespaceが入ったものなどのサポートも万全です。&lt;/p&gt;

&lt;p&gt;詳しくは &lt;a href="https://getcomposer.org/doc/04-schema.md#autoload"&gt;Composerの公式ドキュメントのautoload&lt;/a&gt;を参照ください。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>テスト駆動web開発勉強会 Vol.1で発表しました</title>
    <link rel="alternate" href="http://blog.url.com/2014/03/22/web-testing-2014.html"/>
    <id>http://blog.url.com/2014/03/22/web-testing-2014.html</id>
    <published>2014-03-22T06:24:00Z</published>
    <updated>2014-03-22T16:17:20+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;2014/3/18に&lt;a href="http://blog.coworking.tokyo.jp/"&gt;コワーキングスペース茅場町Co-Edo&lt;/a&gt;で開催された「&lt;a href="http://tdd-web.doorkeeper.jp/events/9439"&gt;テスト駆動web開発勉強会 Vol.1&lt;/a&gt;」で「Webアプリケーションテスト手法2014」の発表をしました。&lt;/p&gt;

&lt;p&gt;第一回目ということと、1時間枠と限られた時間の中でCakePHPとJavaScriptについてのテストの話をしたので、ざっくりした内容となっています。&lt;/p&gt;

&lt;p&gt;今後ハンズオンなども計画しているようなので、DoorKeeperのページをチェックしておくと良いかなーと思います。
また当日は「&lt;a href="https://japheego.jp/"&gt;Java,PHPエンジニアの派遣、求人を探すならJapheego（ジャフィーゴ）&lt;/a&gt;」さんに懇親会スポンサーになっていただき、美味いビールとSUBWAYのサンドイッチをいただきました。感謝!
勉強会の懇親会はピザが多いのですが、連続すると飽きるのでたまには&lt;a href="http://demae-can.com/shop/menu/3007411/"&gt;SUBWAYのデリバリー&lt;/a&gt;とか良いと思いますよ！（SUBWAY大好きです）&lt;/p&gt;

&lt;div id="file_embed"&gt;
    &lt;div id="embedded_doc"&gt;&lt;p class="no_javascript"&gt;To see files inline you need to enable JavaScript.&lt;br /&gt;Yahoo has some &lt;a href="http://help.yahoo.com/l/us/yahoo/help/faq/browsers/browsers-63474.html" target="_blank"&gt;instructions for enabling JavaScript&lt;/a&gt; if you&amp;rsquo;re unsure how to do it.&lt;/p&gt;&lt;/div&gt;

    &lt;script type="text/javascript"&gt;
    var scribd_doc = scribd.Document.getDoc(213088053, 'key-c8og2igawuh9o7wx4j7');

    var onDocReady = function(e){
        // scribd_doc.api.setPage(3);
    }

    scribd_doc.addParam('jsapi_version', 2);
    scribd_doc.addEventListener('docReady', onDocReady);
    scribd_doc.addParam('height', 494);
    scribd_doc.addParam('width', 600);
    scribd_doc.write('embedded_doc');
    &lt;/script&gt;

    &lt;p class="download"&gt;&lt;a href="http://twileshare.com/uploads/WebTest201403_pub.pdf" class="big_green_button_link" title="Filename: WebTest201403_pub.pdf"&gt;Download this file&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;最後に、当日紹介したサンプルのCakePHPテストコードを掲載しておきます。&lt;/p&gt;

&lt;h5&gt;モデルのテスト例：&lt;/h5&gt;
&lt;pre class="highlight php"&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostTest&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;CakeTestCase&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nv"&gt;$fixture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'app.Post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'app.Comment'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ClassRegistry&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Post'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getMockForModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Post'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getMockForModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'save'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="err"&gt;タイトルがない場合はバリデーションエラーになること&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="err"&gt;データベースへの保存に失敗した場合は&lt;/span&gt;&lt;span class="nx"&gt;false&lt;/span&gt;&lt;span class="err"&gt;が戻ること&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="err"&gt;データベースへの保存に成功した場合は&lt;/span&gt;&lt;span class="nx"&gt;true&lt;/span&gt;&lt;span class="err"&gt;が戻ること&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="err"&gt;データベースに新規登録できること&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;モデルの初期化方法には3つのやり方があり、通常は&lt;code&gt;ClassRegistry::init()&lt;/code&gt;で良いのですが、モデルをモックしたい場合は&lt;code&gt;getMockForModel()&lt;/code&gt;というCakeTestCaseが用意してくれているモデル専用のモックジェネレータを使います。第二引数にメソッドの配列を指定するとパーシャルモックとなり、特定のメソッドのみモックします。&lt;/p&gt;

&lt;h5&gt;コントローラのテスト例:&lt;/h5&gt;
&lt;pre class="highlight php"&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostsControllerTest&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;ControllerTestCase&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Posts'&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;
            &lt;span class="s1"&gt;'components'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'Session'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'RequestHandler'&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'isPost'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'models'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'Post'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'findById'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'delete'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'methods'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'redirect'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'render'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="sd"&gt;/**
     * @expectedException NotFoundException
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="err"&gt;存在しない記事を表示すると&lt;/span&gt;&lt;span class="nx"&gt;NotFound&lt;/span&gt;&lt;span class="err"&gt;例外になること&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;testAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/posts/view/999'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="sd"&gt;/**
     * @expectedException BadRequestException
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="err"&gt;保存が&lt;/span&gt;&lt;span class="nx"&gt;POST&lt;/span&gt;&lt;span class="err"&gt;以外で呼び出されたら&lt;/span&gt;&lt;span class="nx"&gt;BadResuest&lt;/span&gt;&lt;span class="err"&gt;例外になること&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;testAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/posts/save/1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'method'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'get'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="err"&gt;削除が成功したら&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="err"&gt;にリダイレクトする&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;expects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;once&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'delete'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;will&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;returnValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;expects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;once&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'redirect'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'index'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;testAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/posts/delete/1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'method'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'delete'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="err"&gt;新しいトピックを追加できたら画面にメッセージが戻ること&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;コントローラのテストをするとき、testActionメソッドを呼び出すわけですが、そのときコントローラ自体をモックするには&lt;code&gt;ControllerTestCase&lt;/code&gt;が用意してくれているコントローラ専用のモックジェネレータである&lt;code&gt;generate()&lt;/code&gt;を利用します。generateで作成したインスタンスをテストケースクラスの&lt;code&gt;controller&lt;/code&gt;メンバ変数にセットすることでControllerTestCaseがURLからディスパッチするときに、このモックオブジェクトを利用してくれます。&lt;/p&gt;

&lt;p&gt;コントローラから依存関係にある、コンポーネント、モデルについてそれぞれサンプルのようにモックでき、コントローラ自体のメソッドも&lt;code&gt;methods&lt;/code&gt;に列挙することでモックできます。例えば&lt;code&gt;redirect()&lt;/code&gt;や&lt;code&gt;render()&lt;/code&gt;などがよく使われると思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>CakePHPで動的にプレフィックスルーティングを追加したときに気をつけること</title>
    <link rel="alternate" href="http://blog.url.com/2014/03/08/cakephp-addprefix-here-problem.html"/>
    <id>http://blog.url.com/2014/03/08/cakephp-addprefix-here-problem.html</id>
    <published>2014-03-08T08:04:00Z</published>
    <updated>2014-03-08T18:10:44+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;!-- more --&gt;

&lt;p&gt;あるURLや特定のパラメータ、ユーザでアクセスされたとき、プレフィックスルーティングを付けたかったので、動的に付与したらハマったので小ネタを書いておきます。&lt;/p&gt;

&lt;h3&gt;動的にプレフィックスルーティングを追加するには&lt;/h3&gt;

&lt;p&gt;公式ドキュメントの解説のとおり、&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;// routes.php
Router::connect(
    "/site-proxy/:controller",
    array('action' =&amp;gt; 'index', 'prefix' =&amp;gt; 'site-proxy', 'site-proxy' =&amp;gt; true)
);

// core.phpなど
Configure::write('Routing.prefixes', array('site-proxy'));
&lt;/pre&gt;

&lt;p&gt;のように記述します。&lt;/p&gt;

&lt;p&gt;RouterTest.phpのテストコードを見たら&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$request = new CakeRequest();
$request-&amp;gt;addParams(array(
    'controller' =&amp;gt; 'registrations', 'action' =&amp;gt; 'admin_index',
    'plugin' =&amp;gt; null, 'prefix' =&amp;gt; 'admin', 'admin' =&amp;gt; true,
    'ext' =&amp;gt; 'html'
));
&lt;/pre&gt;

&lt;p&gt;みたいなコードがあったので、CakeRequest::addParams() を使って追加できることがわかります。&lt;/p&gt;

&lt;p&gt;実際コントローラで&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$this-&amp;gt;request-&amp;gt;addParams(['prefix' =&amp;gt; 'site-proxy', 'site-proxy' =&amp;gt; true]);
&lt;/pre&gt;

&lt;p&gt;みたいに書くと、View上で $this-&amp;gt;html-&amp;gt;link() などで出力されるURLにプレフィックスルーティングが追加されます。&lt;/p&gt;

&lt;h3&gt;ハマりポイント&lt;/h3&gt;

&lt;p&gt;View上でフォームを作成するときに&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;echo $this-&amp;gt;Form-&amp;gt;create('Post');
&lt;/pre&gt;

&lt;p&gt;のように書くと思うのですが、このようにモデル名だけが指定されているときCakePHPではどのようにURLが生成されるか、というと&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;// FormHelper::create() L367付近
if ($options['action'] === null &amp;amp;&amp;amp; $options['url'] === null) {
    $options['action'] = $this-&amp;gt;request-&amp;gt;here(false);
} elseif (empty($options['url']) || is_array($options['url'])) {
&lt;/pre&gt;

&lt;p&gt;URLというオプションを指定しない場合は、 action は CakeRequest::here() の値になることがわかります。&lt;/p&gt;

&lt;p&gt;で、CakeRequest::here() とはどんなコードか見てみると&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;public function here($base = true) {
    $url = $this-&amp;gt;here;
    if (!empty($this-&amp;gt;query)) {
        $url .= '?' . http_build_query($this-&amp;gt;query, null, '&amp;amp;');
    }
    if (!$base) {
        $url = preg_replace('/^' . preg_quote($this-&amp;gt;base, '/') . '/', '', $url, 1);
    }
    return $url;
}
&lt;/pre&gt;

&lt;p&gt;のようになっていて、要は現在のURL（$this-&amp;gt;query）から再生成されるだけです。リクエストに入っているプレフィックスルーティングの設定は参照されず、プレフィックスなしのURLがformタグのactionに入ってしまいます。&lt;/p&gt;

&lt;h3&gt;まとめ&lt;/h3&gt;

&lt;p&gt;解決方法としては&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Form::create() で &lt;code&gt;url&lt;/code&gt; オプションを追加する&lt;/li&gt;
&lt;li&gt;&lt;p&gt;addParams するときに here を変更する&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;// 例）
$request-&amp;gt;addParams(array(
    'admin' =&amp;gt; true,
    'prefix' =&amp;gt; 'admin',
))-&amp;gt;addPaths(array(
    'here' =&amp;gt; '/admin/this/interesting/index',
))
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あたりが良さそうです。まぁ動的にプレフィックス付けるなんてあんまりやらないのかもしれないですが、何かの参考になれば&amp;hellip;    &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>VagrantでComposerからPHPUnitをインストールするときに注意したいこと</title>
    <link rel="alternate" href="http://blog.url.com/2014/03/08/composer-phpunit-windows-vagrant.html"/>
    <id>http://blog.url.com/2014/03/08/composer-phpunit-windows-vagrant.html</id>
    <published>2014-03-08T07:12:00Z</published>
    <updated>2014-03-08T18:10:40+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;!-- more --&gt;

&lt;p&gt;現在以下のような環境を設置して開発をしています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ホストOS: Windows7 &lt;/li&gt;
&lt;li&gt;仮想環境: Vagrant + VirtualBox&lt;/li&gt;
&lt;li&gt;ゲストOS: CentOS 6.4&lt;/li&gt;
&lt;li&gt;開発環境: Apache, PHP, MySQL, git, composer, CakePHP, Bdd,  &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;事件その1: Bddプラグインがインストールできなくなった&lt;/h3&gt;

&lt;p&gt;ある日、新しくcomposer installで環境を作っていた人が「Bddプラグインがうまくインストールできないんですけど&amp;hellip;」
という事で調べていたら Bddプラグインから依存関係にあったライブラリが行方不明になっていました。&lt;/p&gt;

&lt;p&gt;それは phpunit/Object_Freezer です。以前はpearにあって、あるときからgithubに移行していたはずなのに、どこにも痕跡を残さず消滅していました。
で、どこで使っているかというと、Bddプラグインの単体テストモジュールにあたるSpec-PHPです。
現在は Spec-PHP に同梱する形で解決しているのですが、以前はcomposer.jsonに&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;"pear-phpunit/Object_Freezer": "*"
&lt;/pre&gt;

&lt;p&gt;のように指定していました。ちょうど金曜日だったので、週末にこれらを解決してBddプラグインがうまくイントールできるようになった（私の自宅Mac OSX環境+BddExampleAppで確認）と安心して月曜日出社したのです。&lt;/p&gt;

&lt;h3&gt;事件その2: PHPUnitがインストールできない!&lt;/h3&gt;

&lt;p&gt;で、Vagrant環境で更新してみたら&amp;hellip;.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;composer update sizuhiko/Bdd
&lt;/pre&gt;

&lt;p&gt;失敗&amp;hellip;.&lt;/p&gt;

&lt;p&gt;しかも全然関係ないところ PHPUnit のインストールで失敗するよ！
ちょうどその週末にPHPUnit4.0のコードがGitHubのデフォルトになりはじめたあたりでした。&lt;/p&gt;

&lt;p&gt;でcomposer.jsonにはPHPUnitの記述が&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;"phpunit/phpunit": "3.7.*"
&lt;/pre&gt;

&lt;p&gt;のように入っています。一見PHPUnit4をインストールするわけではないので関係なさそうですが、 &lt;code&gt;composer install&lt;/code&gt; を実行すると&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;.....
  - Installing phpunit/php-token-stream (dev-master 292f4d5)
    Cloning 292f4d5772dad5a12775be69f4a8dd663b20f103

  - Installing phpunit/php-file-iterator (dev-master acd6903)
    Cloning acd690379117b042d1c8af1fafd61bde001bf6bb

  - Installing phpunit/php-code-coverage (1.2.x-dev 3a60a66)
    Cloning 3a60a660998e8d41d5ea81ff8d96ead546bce150

[RuntimeException]
Failed to execute git checkout '3a60a660998e8d41d5ea81ff8d96ead546bce150' &amp;amp;
&amp;amp; git reset -- hard '3a60a660998e8d41d5ea81ff8d96ead546bce150'

error: Untracked working tree file 'Tests/PHP/CodeCoverage/FilterTest,php'
would be overwritten by merge.
&lt;/pre&gt;

&lt;p&gt;のようにエラーになります。&lt;/p&gt;

&lt;h3&gt;事件その3: Issueが光の速さで取り消される&lt;/h3&gt;

&lt;p&gt;ともかく事は重大そうなので、PHPUnitにIssue登録した方が良いかなと思ったので、投稿したところ、ものの数秒でそれはcomposerとか環境の問題でPHPUnitじゃないよ、と返ってきました。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/sebastianbergmann/phpunit/issues/1144"&gt;Can&amp;rsquo;t install 3.7.x to Linux environment by composer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ちょっと慌てていたので、あまり確認しなかったのも良くないなと思い、ここから検証作業の開始です。&lt;/p&gt;

&lt;h3&gt;原因を調べてみた&lt;/h3&gt;

&lt;p&gt;まず、その週末にPHPUnitのgithubを見たところで、デフォルトブランチ(master)が4.0系になっているよ、という事に気がついていました。&lt;/p&gt;

&lt;p&gt;ここで composer がどのようにライブラリを取得するか考えてみたところ、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;packagist からリポジトリ情報をダウンロード&lt;/li&gt;
&lt;li&gt;phpunit/phpunit と一致するソースコードリポジトリからダウンロード（この場合はgithub）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone git@github.com:sebastianbergmann/phpunit.git&lt;/code&gt; が実行される&lt;/li&gt;
&lt;li&gt;リリースを指定しているので一致するタグがチェックアウトされる &lt;code&gt;git checkout ....&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この最後のステップで「Untracked working tree file」になり失敗するのです。&lt;/p&gt;

&lt;p&gt;PHPUnitのリポジトリを見てみると、3系まではディレクトリ名が Tests だったのですが、 4系では tests のように小文字に変更となっています。大文字、小文字問題か！と意気たったのが、先程の Issue なわけですが。&lt;/p&gt;

&lt;p&gt;自分の環境だけかなーと思って、隣の人にちょっとインストールしてみてもらえないか頼んでみたところ、成功&amp;hellip;. えぇぇー！&lt;/p&gt;

&lt;p&gt;その環境は Vagrant上のCentOSでなく、素のWindowsでした。
何かがおかしい&amp;hellip;.&lt;/p&gt;

&lt;p&gt;そこで偶然なぜか思ったのが、とりあえずディレクトリ変えてみるか、という事。とりわけ何か理由があった訳でなくたまたまそう思っただけなのです。&lt;/p&gt;

&lt;p&gt;composer update （この日は何度実行したろう&amp;hellip;.）  &amp;hellip;&amp;hellip; 成功した！！！！でも、なんで？！&lt;/p&gt;

&lt;h3&gt;違いに悩むと&amp;hellip;&lt;/h3&gt;

&lt;p&gt;成功したところ：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;素のWindows&lt;/li&gt;
&lt;li&gt;Vagrant仮想環境内の /tmp/work/app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;失敗したところ：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vagrantのsync&lt;em&gt;folderである /var/www/html/your&lt;/em&gt;app/app (CentOSから見えるディレクトリ)
windows上だと c:¥develop¥your_app¥app みたいなところ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もしかしてVagrantでマウントしているWindowsディスク上だと大文字、小文字の変更をトレースできなくなるのでは！！&lt;/p&gt;

&lt;p&gt;という結論に至り、他の人で同様にVagrantのsync_folder環境で試したらダメでした。&lt;/p&gt;

&lt;h3&gt;まとめ&lt;/h3&gt;

&lt;p&gt;ホストがwindowsでゲストがLinuxということはあると思うのですが、ディスク同期してそこにソースコードを置いてエディタはホストOS上で実行は仮想環境上みたいな開発するのは今後も増えてくると思います。
その中で今回のような事象に陥ることは composer + PHPUnit に限らず起きそうだなと思いました。&lt;/p&gt;

&lt;p&gt;上記のような &lt;code&gt;Failed to execute git checkout ...&lt;/code&gt; エラーが出た時に、あぁそういう事かと心構えができていれば慌てず、一旦ホストOS側で作業するとか、仮想環境上のsync_folder以外で作業するなどやりようがあるかな、と思います。&lt;/p&gt;

&lt;p&gt;まぁ慌てず騒がず、落ち着いて対応しましょうという良い教訓になりました。twitterなどでお騒がせしてすみませんでした&amp;hellip;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Middleman インストールメモ</title>
    <link rel="alternate" href="http://blog.url.com/2014/03/08/middleman-install-memo.html"/>
    <id>http://blog.url.com/2014/03/08/middleman-install-memo.html</id>
    <published>2014-03-08T02:13:26Z</published>
    <updated>2014-03-08T18:10:09+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;!-- more --&gt;

&lt;p&gt;ブログを Middleman で作る（厳密に言うとmy.opera.comから移行）するにあたり、いくらかハマりポイントがあったので、メモとして残しておきます。&lt;/p&gt;

&lt;h3&gt;参考になったサイト&lt;/h3&gt;

&lt;p&gt;以下のサイトを参照しながら、作業を実施しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://middlemanapp.com/jp/"&gt;Middleman公式&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://risin.jp/blog/2013/10/16/middleman/"&gt;middlemanの設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.awairo.net/blog/2013/12/14/custom-domain-for-gh-pages/"&gt;GitHub Pagesで独自ドメインを使う方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/inouet/items/478f4228dbbcd442bfe8"&gt;rbenv を使って ruby をインストールする(CentOS編)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;HTMLジェネレータは何を使うの？&lt;/h3&gt;

&lt;p&gt;ブログを移行するにあたり、利用可能なフォーマットは WordPress&lt;code&gt;互換&lt;/code&gt;フォーマット ということで、「WordPressで良くない？」とか、「my.opera作った人がスピンアウトして作ったサービスがあるらしいよ」とか様々な誘惑があったものの、今時は GitHub Pagesでやるんでしょ？という勝手な妄想（実際そういう人が増えているわけですが）から、そうなれば静的サイトジェネレータが必要だなぁと。&lt;/p&gt;

&lt;p&gt;最初に思いついたのはChatWorkが作成したPHP製のデザイナ向け静的サイトジェネレーター「Phest」だったのですが、前提となるWordPressフォーマットからの変換どうするかなーと思っているうちに、気持ちは他のものへ&amp;hellip;.&lt;/p&gt;

&lt;p&gt;で、&lt;code&gt;GitHub Pages ブログ&lt;/code&gt; なんてキーワードで検索すると出てくるページと言えば Octopress jekyll あたりなわけです。もちろん jekyll にしておくと GitHub Pagesの公式にも出てくるぐらいで良いなーと思ったのですが、世の中の流れは Middleman みたいな記事をいくつか見かけるうちにすっかりと方向は Middleman に決まりました。それに WordPress XMLからインポートできるプラグイン &lt;a href="https://github.com/salmansqadeer/wordpress-to-middleman"&gt;Wordpress to Middleman Exporter&lt;/a&gt; があるということ。&lt;/p&gt;

&lt;h3&gt;Middleman インストール&lt;/h3&gt;

&lt;p&gt;しばらく ruby の環境とか触ってなかったので、一番最後の記憶を頼りに「まずは RVM + bundler で環境構築やー」と意気込んで Gemfile に middleman を追加して &lt;code&gt;bundle install&lt;/code&gt;を実行したところ、うんともすんともならずインストールできない&amp;hellip;.
もう今時はRVMじゃないのかな? と思っていたら、rbenvなんですね。そうですか、そうとわかればすぐに切り替えて参考サイトを参照しながら呆気なく構築は完了。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;gem install middleman
&lt;/pre&gt;

&lt;p&gt;でインストールも楽々完了です。&lt;/p&gt;

&lt;p&gt;ブログモジュールを使うので、middleman の Gemfile に&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;gem "middleman-blog", "~&amp;gt; 3.5.1"
&lt;/pre&gt;

&lt;p&gt;を追加して&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;bundle install
middleman init blog --template=blog
&lt;/pre&gt;

&lt;p&gt;と実行すると blog ディレクトリに環境が生成されます。&lt;/p&gt;

&lt;h3&gt;WorkPress からのインポート&lt;/h3&gt;

&lt;p&gt;my.opera から WordPress &lt;code&gt;互換&lt;/code&gt; フォーマットのファイルをダウンロードして、画像やらも全部ダウンロード。
いよいよ先程の変換ツールで実行&amp;hellip;. エラーだよ！！（泣）&lt;/p&gt;

&lt;p&gt;rubyのエラーだったので、調べて直す事もできたのかもしれないのですが、そのとき思ったのは「要はWordPress.xml をmarkdownに変換すれば良いのだから他にもあるんじゃない？」という誘惑。
イロイロ調べたところ、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;wp2middleman&lt;/li&gt;
&lt;li&gt;wordpress-to-jekyll&lt;/li&gt;
&lt;li&gt;ruby-wpdb&lt;/li&gt;
&lt;li&gt;wp_conversion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などがあるようで、とりあえず1つずつ試みるという泥臭い作戦に。
どれもうまくいかない&amp;hellip;.&lt;/p&gt;

&lt;p&gt;python系のライブラリもあるらしく&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;wp2md&lt;/li&gt;
&lt;li&gt;prlican-import&lt;/li&gt;
&lt;li&gt;exitwp&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;順番に試して行くと、&lt;code&gt;exitwp&lt;/code&gt; がいくつか失敗するものの良い感じに変換できることがわかった。
しかしいくつか失敗する&amp;hellip; なんでだろうと思っていたところで、もう一度my.operaのクローズ本文を読んでいたら WordPress &lt;code&gt;互換&lt;/code&gt; フォーマットなんですよ。「互換」&amp;hellip;..
もしかして、WordPressに取り込んで、そこから再度エクスポートすると「互換」じゃなくて「正式」なXMLになるんじゃないか！と&lt;/p&gt;

&lt;h3&gt;WordPress インストール&lt;/h3&gt;

&lt;p&gt;ちょっと迂回している感じですが、PHPの環境は手元にいくらでもあるのでテキパキとインストールしてXMLをインポート、何もせずそのままエクスポート。2つのファイルを diff で比較してみると確かにちょっと違う。
これを先程一番うまく変換できた exitwp にかけると&amp;hellip;&amp;hellip;.&lt;/p&gt;

&lt;p&gt;あらー全部奇麗に変換できるじゃないですかー&lt;/p&gt;

&lt;h3&gt;デザイン&lt;/h3&gt;

&lt;p&gt;ここまで来ると後は erb と css なので、既存のmy.operaから html, css, js やらをすべてダウンロードして erb を html と同じになるように編集し、cssとjsも不要な部分を取り除いて設置。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;middleman server
&lt;/pre&gt;

&lt;p&gt;で見た目を確認しながら調整して CNAME ファイルも設置。&lt;/p&gt;

&lt;p&gt;GitHub Pages へデプロイするために Gemfile に&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;gem "middleman-deploy"
&lt;/pre&gt;

&lt;p&gt;モジュールを追加して bundle install。&lt;/p&gt;

&lt;p&gt;config.rg に&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;activate :deploy do |deploy|
  deploy.build_before = true # default: false
  deploy.method = :git
  deploy.branch   = "master" # default: gh-pages
end
&lt;/pre&gt;

&lt;p&gt;な感じで設定したら &lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;middleman deproy
&lt;/pre&gt;

&lt;p&gt;でビルドした内容をgithubへ連携してくれます。&lt;/p&gt;

&lt;h3&gt;今後&lt;/h3&gt;

&lt;p&gt;ローカル（手元）のmiddleman使えば簡単にデプロイまでできるのですが、たまたま外で自分のPCじゃないときとか、githubにmarkdownをpushしたらビルドしてGitHub Pagesにデプロイしてくれたら良いな、とか思っているので、そのあたりはこれからやっていこうと思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Hello Middleman!</title>
    <link rel="alternate" href="http://blog.url.com/2014/02/22/hello-world.html"/>
    <id>http://blog.url.com/2014/02/22/hello-world.html</id>
    <published>2014-02-22T11:13:26Z</published>
    <updated>2014-03-08T18:06:43+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;!-- more --&gt;

&lt;p&gt;my.opera.com の終了に伴い、ブログを移転しました。過去のコンテンツは移行していますが、リンク切れなど起きているかもしれませんので、もし見つけましたら &lt;a href="https://github.com/sizuhiko/sizuhiko.github.io/issues"&gt;github の issue ページ&lt;/a&gt; にてお知らせいただければ幸いです。&lt;/p&gt;

&lt;p&gt;このブログは &lt;a href="http://middlemanapp.com/"&gt;Middleman&lt;/a&gt; にて構築しています。Middlemanの導入に関する記事もアップしたいと思っていますので、興味ある方はしばらくお待ちください。&lt;/p&gt;
</content>
  </entry>
</feed>
