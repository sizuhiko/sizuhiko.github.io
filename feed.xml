<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2014-02-22T11:13:26Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Hello Middleman!</title>
    <link rel="alternate" href="http://blog.url.com/2014/02/22/hello-world.html"/>
    <id>http://blog.url.com/2014/02/22/hello-world.html</id>
    <published>2014-02-22T11:13:26Z</published>
    <updated>2014-03-01T15:39:57+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;my.opera.com の終了に伴い、ブログを移転しました。過去のコンテンツは移行していますが、リンク切れなど起きているかもしれませんので、もし見つけましたら &lt;a href="https://github.com/sizuhiko/sizuhiko.github.io/issues"&gt;github の issue ページ&lt;/a&gt; にてお知らせいただければ幸いです。&lt;/p&gt;

&lt;p&gt;このブログは &lt;a href="http://middlemanapp.com/"&gt;Middleman&lt;/a&gt; にて構築しています。Middlemanの導入に関する記事もアップしたいと思っていますので、興味ある方はしばらくお待ちください。&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>2013年ふりかえり</title>
    <link rel="alternate" href="http://blog.url.com/2013/12/31/2013.html"/>
    <id>http://blog.url.com/2013/12/31/2013.html</id>
    <published>2013-12-31T08:12:51Z</published>
    <updated>2014-02-22T21:52:37+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;!-- more --&gt;
&lt;p&gt;この投稿は今年参加／発表したり、運営に携わったイベント、やっていた仕事の内容などについてふりかえるポストです。&lt;/p&gt;

&lt;h3 id="section"&gt;1月&lt;/h3&gt;

&lt;p&gt;2013年最初のイベント参加は1/6に開催された「&lt;a href="http://roadstohtml5.com/html5karuta/"&gt;新春!!HTML5KARUTA大会&lt;/a&gt;」。
HTML5カルタとは&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;2012年現在、W3Cで正式に採用されているHTML5のタグは108つあります。HTML5KARUTAは、このHTML5のタグを日本古来から伝わる伝統的な遊戯、カルタとして遊びながら覚えようというものです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;というもので、当日はCakePHPユーザの集う茅場町会場（コワーキングスペース茅場町 Co-Edo）に参加しました。
みんなでビールや日本酒飲みながら楽しくカルタをやって、なんと茅場町会場で優勝いたしました。その後、第二版として販売されたHTML5カルタ初級、中級、上級を購入したのは言うまでもありません。とても楽しいので、2014年の年初めに皆様もカルタで遊んでみてはいかがでしょうか？何？お手元に無い？、大丈夫です、茅場町Co-Edoにカレンダーが揃っていますので、ドロップイン料金だけで楽しめますよ！！&lt;/p&gt;

&lt;p&gt;続いては1/21に開催された「&lt;a href="http://blog.coworking.tokyo.jp/2013/01/cakephp.html"&gt;CakePHPもくもく会&lt;/a&gt;」に参加。こちらも引き続き茅場町Co-Edoでの開催です。元々は&lt;a href="https://twitter.com/kaz_29"&gt;@kaz_29&lt;/a&gt;さんとCakePHPのBehat連携周辺のアレやコレやを解決したくて開催したのですが、コアデベロッパのGraham含め10名程が参加するイベントとなりました。そこでの成果はCakePHPの&lt;a href="https://github.com/sizuhiko/Bdd"&gt;Bddプラグイン&lt;/a&gt; v0.9.2 としてリリースしました。詳しくは&lt;a href="http://my.opera.com/sizuhiko/blog/2013/02/06/cakephp-bddplugin-updates"&gt;こちらの記事&lt;/a&gt;で。&lt;/p&gt;

&lt;p&gt;また今年はPHP Matsuriが7月開催だったので、この頃から開催会場の選定などが始まっていました。&lt;/p&gt;

&lt;h3 id="section-1"&gt;2月&lt;/h3&gt;

&lt;p&gt;2/14に開催された「&lt;a href="http://cake-beer-talk.doorkeeper.jp/events/2736"&gt;第一回CakeBeerTalk&lt;/a&gt;」に参加しました。こちらも茅場町Co-Edo。CakePHP1から2へのマイグレーションの話があったり、CakePHP2.3の新機能の話をしていたんですねー。気付くと年末にはもう3の話をしているというサイクルに驚きます。1月に実施したもくもく会の成果なども含め@kaz_29さんが「&lt;a href="https://speakerdeck.com/kaz29/cakephp2-plus-bdd-pluginwoshi-tutemiyou"&gt;CakePHP2+BDD Plugin&lt;/a&gt;」の発表をしていました。自分が作ったプラグインを他の人が利用して発表してくれるというのはとても嬉しい事です。&lt;/p&gt;

&lt;p&gt;続いて2/28に株式会社 Engine Yardで開催された「&lt;a href="http://atnd.org/events/36965"&gt;第65回 PHP勉強会@東京&lt;/a&gt;」に参加。この頃BddプラグインにありがたいPull RequestをいただきComposer対応を進めていたのですが、その過程でいわゆるForkプロジェクトを登録して良いのか？問題に直面したので若干愚痴っぽいLT「&lt;a href="http://twl.sh/19E7mPA"&gt;composer/installers&lt;/a&gt;」もしました。今も結局repositoriesに追記するようにしているのですが、どうしたら良いのかの結論は出ていない感じです。で、それについてまとめた記事は&lt;a href="http://my.opera.com/sizuhiko/blog/2013/02/19/cakephp-bddplugin-updates"&gt;こちら&lt;/a&gt;。
また、スライドにも書いたのですが、&lt;a href="http://www.amazon.co.jp/CakePHP2-%E5%AE%9F%E8%B7%B5%E5%85%A5%E9%96%80-WEB-PRESS-plus/dp/4774153249"&gt;CakePHP2実践入門&lt;/a&gt;が&lt;strong&gt;増刷&lt;/strong&gt;されたのも2月の事でした。&lt;/p&gt;

&lt;p&gt;PHP Matsuriは会場が札幌全日空ホテルでほぼ確定したところでした。PHP MatusriのページをGitHubページで作り始めたのもこの時期です。&lt;/p&gt;

&lt;h3 id="section-2"&gt;3月&lt;/h3&gt;

&lt;p&gt;3/9に開催された「&lt;a href="http://blog.coworking.tokyo.jp/2013/03/cakephp-phpunit-jenkins-selenium-xdebug.html"&gt;（CakePHPとか）PHPのテストについての勉強会&lt;/a&gt;」で「&lt;a href="http://twl.sh/ZnP7Vf"&gt;テストの基本からCakePHPでTDD/BDDへ&lt;/a&gt;」講演しました。他の方の発表も大変に興味深く楽しいイベントでした。&lt;/p&gt;

&lt;p&gt;続いて3/27に株式会社 Engine Yardで開催された「&lt;a href="http://atnd.org/events/38015"&gt;第66回 PHP勉強会&lt;/a&gt;」に参加。「&lt;a href="http://twl.sh/1enEWJi"&gt;ClientSide MVC Frameworks using?&lt;/a&gt;」というタイトルでJavaScript MVCフレームワークである「&lt;a href="http://javascriptmvc.com/"&gt;JavaScript MVC&lt;/a&gt;」というフレームワークについてLTをしました。名前が紛らわしいんですよね。当時ちょうど仕事でHTML5アプリというかクライアントサイドのお仕事でこのフレームワークを使っていて、とても良かったので紹介したという流れです。この後も何度か同様の発表をしたのですが、時代の流れがクライアントソフト、クライアントサーバ、シンクライアントやサーバサイドWeb、AjaxやHTML5アプリ（クライアントサーバ）といったように目紛しく変わって行く中、来年の動向も気になるところです。&lt;/p&gt;

&lt;p&gt;PHP Matsuriはスポンサー依頼が本格的に始まったり、Facebookにイベントページが立ったり、先だって作っていた&lt;a href="http://www.phpmatsuri.net/2013/"&gt;公式サイト&lt;/a&gt;も公開したり、いよいよ本格的に動き始めた感じでした。&lt;/p&gt;

&lt;h3 id="section-3"&gt;4月&lt;/h3&gt;

&lt;p&gt;もちろん4月といえば4q!カンファレンス（＠かもすや酒店）。今年も参加しましたー。ちょうどSakenote（#SakeLover）がリリースされた後ということで@kuranukiさんも含め盛り上がったイベント（飲み会）でした。&lt;/p&gt;

&lt;p&gt;4/27は「&lt;a href="http://atnd.org/events/38500"&gt;CandyCane 開発会 2013春&lt;/a&gt;」に参加。Bddプラグインでテストを書こう！と挑んだのですが、まずモロモロ環境を作っているうちに時間切れとなってしまいました。今思えばこの時にVagrant使っていれば….。その後私が作ったものをベースにComposer対応が完了した模様です。ありがたやー。&lt;/p&gt;

&lt;p&gt;仕事はどんどん忙しくなるし、オレ大丈夫かーというような時期でした。マジで。ちょっとイベントに行ける雰囲気でなくなってきたのがちょうどこの頃かなー。&lt;/p&gt;

&lt;p&gt;PHP Matsuriの基調講演に Vagrant の Hashimoto さんが決まったのも4月でした。個人的には、これがキッカケで Vagrant 熱が盛り上がってきたのですよね。&lt;/p&gt;

&lt;h3 id="section-4"&gt;5月&lt;/h3&gt;

&lt;p&gt;仕事がテンパっていてそうとうやばい状況で、どこにも行けませんでした。&lt;/p&gt;

&lt;p&gt;5/29にPHP Matsuriのチケット販売を開始したのですが、そのサイト更新だけは気力を振り絞って対応した記憶が….&lt;/p&gt;

&lt;h3 id="section-5"&gt;6月&lt;/h3&gt;

&lt;p&gt;というのも5/30までで。5/31から前乗りして6/1に開催された&lt;a href="http://conference.kphpug.jp/2013/"&gt;PHPカンファレンス関西&lt;/a&gt;に参加。仕事はちゃんと5/30までに何とかしました。こちらでは「&lt;a href="http://twl.sh/ZkfW0H"&gt;Newtype of Web Application Architecture&lt;/a&gt;」というタイトルでJavaScript MVCのLTをしました。今年2度目のJavaScriptMVC発表でした。仕事から解放されて大阪を満喫したのは言うまでもありません。無限もやしが正式なメニュー名になっていたのを覚えています（それかよw）。&lt;/p&gt;

&lt;p&gt;もちろん6月といえば恒例の Interop にも参加。新しい話題としては特になかったけど、SDNがしっかりとしてきたのは昨年以上に感じたところでした。&lt;/p&gt;

&lt;p&gt;PHP MatsuriはPHPカンファレンス関西のLTでチケット販売やゲストの告知をしたり、ノベルティのデザインが決まったり、LT大会用のシステムが出来上がったり、いよいよ来月の開催に向けて最後の追い込みという感じでした。&lt;/p&gt;

&lt;h3 id="section-6"&gt;7月&lt;/h3&gt;

&lt;p&gt;いよいよPHP Matsuri2013 Sapporo開催。私は夏休み併用で7/10から移動を開始（Matsuriは14,15日）。初の北海道上陸を自家用車で成し遂げようということで大洗からフェリーで行きました。で、その旅の写真は&lt;a href="https://plus.google.com/u/0/photos/107544322587204222942/albums/5902698620304749185"&gt;こちら&lt;/a&gt;。日焼けして真っ黒な顔で会場入りした私を見て「リゾートを満喫してきた人がいる」と言われました。まぁ確かにMatsuriの写真を見るとサングラス日焼け痕がクッキリとw。&lt;/p&gt;

&lt;p&gt;PHP Matsuriでは司会と最初の講演「&lt;a href="http://twl.sh/10U3rtt"&gt;PHP x Agile 〜プログラマ視点から気にしたい事&lt;/a&gt;」を担当。スライドだけ見るとそれを薦めているように見える箇所もありますが、反対の意味として話した内容もあるので単語だけ一人歩きしないと良いなとおもっています。  &lt;/p&gt;

&lt;p&gt;なおハッカソンでは、JavaScriptMVCとCakePHPで作るプロトタイプ開発（9月のPHPカンファレンスの発表資料を参照してください）という発表をしたのですが、ネタが被りまくりな上、TwitterBootstrapのモーダルボタンがプロジェクタの投影範囲外というトラブルに見舞われ失敗しました….&lt;/p&gt;

&lt;p&gt;7/22に株式会社 Engine Yardで開催された「&lt;a href="http://atnd.org/events/41277"&gt;第70回 PHP勉強会@東京&lt;/a&gt;」に参加。  &lt;/p&gt;

&lt;p&gt;また、月末の30日には元CakePHPのリードデベロッパだったNateさんが来日したのに合わせたイベント「&lt;a href="http://atnd.org/events/41843"&gt;緊急開催 Lithium Tokyo 〜Nate Abele氏来日イベント〜&lt;/a&gt;」に参加しました（@yandoさんの&lt;a href="http://www.engineyard.co.jp/blog/2013/resource-oriented-webapp/"&gt;イベントレポート&lt;/a&gt;）。@koriymさんとNateの熱いリソース指向の話はとても素晴らしかったです。&lt;/p&gt;

&lt;p&gt;この頃、社内で「&lt;a href="http://www.amazon.co.jp/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%81%AE%E5%AE%9F%E8%B7%B5%E6%95%99%E5%AE%A4-%E2%80%95%E5%84%AA%E3%82%8C%E3%81%9F%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%93%E3%83%AA%E3%83%86%E3%82%A3%E3%82%92%E5%AE%9F%E7%8F%BE%E3%81%99%E3%82%8B%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2%E3%81%A8%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF-Lukas-Mathis/dp/4873116082"&gt;インターフェースデザインの実践教室&lt;/a&gt;」の読書会を立ち上げました。途中まで進んだところで社外作業になってしまい中断状況。はやく再開したい…&lt;/p&gt;

&lt;h3 id="section-7"&gt;8月&lt;/h3&gt;

&lt;p&gt;CakeFest2013まであともう少しという頃、CakeFestの発表者にも名前を連ねるRoland氏がオーストリアから来日してBanchaの講演をするというので「&lt;a href="http://atnd.org/events/42527"&gt;CakePHP Tokyo 〜 CakePHPとSenchaTouchによる超高速モバイル開発〜&lt;/a&gt;」に参加しました。昨年はJQueryMobileを使った仕事をしたり、今年はJavaScriptMVCを使ったりと、似たような開発をしてきた中でSenchaTouchとどういう連携をするのかとても興味があったのですが、SenchaTouchというよりもそのSDKを使ったパワフルな開発サポート機能もある点がとても面白かったです。&lt;/p&gt;

&lt;p&gt;そして30日からCakeFestへ〜&lt;/p&gt;

&lt;h3 id="section-8"&gt;9月&lt;/h3&gt;

&lt;p&gt;5月前後のちょうど多忙な時期にCall For Paperがあったので、結局今年はスピーカー申し込みはできず一般参加です。でも当日LT募集もあるし資料だけは仕込んで参加。今年もくもく会で仕上げたBDDプラグインのアップデート内容などを発表しよう…と思っていたらペチャクチャ枠に移動となって、挙げ句ペチャクチャ枠の申し込み者が少ないからキャンセル扱いにwww。まぁその後行われたくじ引き大会？で&lt;a href="https://twitter.com/sizuhiko/status/374349561117954048"&gt;一等の賞品をもらった&lt;/a&gt;ので、終わりよければ全てよしということで。&lt;/p&gt;

&lt;p&gt;CakeFestでの内容は&lt;a href="http://www.engineyard.co.jp/blog/2013/cakephp3-on-cakefest/"&gt;@yandoさんのレポート&lt;/a&gt;に、私と@yandoさんが現地から放送したCakeRadioGagaの動画がアップされているので、そちらをご覧いただければと思います。（そういえばかなりメモ取ったのに何もまとめ記事にしていなかった）。
この放送の後は、残っていた他の参加者と焼肉を食べに行ったのでした。&lt;/p&gt;

&lt;p&gt;9/14にはPHPカンファレンスが開催され「&lt;a href="http://twl.sh/182MRc2"&gt;15分で出来るPHPとJavaScript MVCフレームワークで作るプロトタイプ&lt;/a&gt;」というタイトルで講演してきました。今年4回目のJavaScriptMVC関連（厳密にはこの時期にはJavaScriptMVCがCanJSベースの新しいバージョンになっていたので、内容には変化がありました）の発表でした。AngularJSの勢力は増す一方ですが、CanJS（ならびにJavaScriptMVC）も頑張るぞ。&lt;/p&gt;

&lt;p&gt;またこの頃からCakePHP関連のお仕事を手伝うようになったのですが、現場のControllerのテストがあまりにアレな感じでしたので「&lt;a href="http://my.opera.com/sizuhiko/blog/2013/09/13/cakephp"&gt;CakePHPのコントローラテストで注意すること&lt;/a&gt;」という記事にしてまとめました。また仕事で本格的にVagrantを使ったのもこのお手伝いが最初となりました（これまでは個人の開発環境ばかり）。&lt;/p&gt;

&lt;h3 id="section-9"&gt;10月&lt;/h3&gt;

&lt;p&gt;バッグを&lt;a href="http://t.co/5BTEXGCG8u"&gt;PROTEXのアタッシュケース&lt;/a&gt;に変えました。というかしばらく使っていたトートバッグは個人的に合わず….&lt;/p&gt;

&lt;p&gt;新しいCakePHPプラグインとしてRailsではおなじみのFabricatorのクローンを作りました。&lt;a href="https://github.com/sizuhiko/Fabricate"&gt;Github&lt;/a&gt;、&lt;a href="https://twitter.com/sizuhiko/status/387821773359955968"&gt;そのときのTweet&lt;/a&gt;、&lt;a href="http://my.opera.com/sizuhiko/blog/2013/10/12/cakephp-fabricate"&gt;ブログ記事&lt;/a&gt;。Fabricatorというより作ってみたらFactoryGirlの機能も盛り込みたくて、結局二個一みたいな感じになっていますが、まぁそこは….  &lt;/p&gt;

&lt;p&gt;現場であまりにFixture絡みでテストが失敗するので、そんなんじゃダメだーという訳で（およそ30分ぐらいでお昼食べた後すぐ）作ったのです。&lt;/p&gt;

&lt;h3 id="section-10"&gt;11月&lt;/h3&gt;

&lt;p&gt;Fabricateにsequence機能などいくつかRuby側にある機能を追加しました。&lt;a href="http://my.opera.com/sizuhiko/blog/2013/11/04/cakephp-fabricate-sequence"&gt;ブログ記事&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;11/29に株式会社 Engine Yardで開催された「&lt;a href="http://atnd.org/events/45596"&gt;第73回 PHP勉強会@東京&lt;/a&gt;」に参加。FabricatorとFakerを使った「&lt;a href="http://twl.sh/182I2Sy"&gt;テストデータの作り方&lt;/a&gt;」という発表をしました。&lt;/p&gt;

&lt;p&gt;その翌日11/30には「&lt;a href="http://events.html5j.org/conference/2013/11/"&gt;HTML5カンファレンス&lt;/a&gt;」にボランティアスタッフとして参加。昨年に続く参加だったのですが、より規模が大きくなり発表も多様でした。動画がアップされているので、すべてのセッションを閲覧できるようになっています。&lt;/p&gt;

&lt;h3 id="section-11"&gt;12月&lt;/h3&gt;

&lt;p&gt;クリスマスにケーキを食べながらCakePHPの話をしよう、という事でCakePHPのイベントが開催される事に。運営でお手伝いしてきました。
「&lt;a href="http://cakephp.doorkeeper.jp/events/7600"&gt;CakePHPクリスマス勉強会&lt;/a&gt;」。LTに空きがあるという事で先月のPHP勉強会と同じネタでしたが「テストデータの作り方」について再演しました。&lt;/p&gt;

&lt;p&gt;お仕事では引き続きCakePHPを使った開発現場の支援をしております。&lt;/p&gt;

&lt;h3 id="section-12"&gt;まとめ&lt;/h3&gt;

&lt;p&gt;ということで、5月危機を除いては月に一度は何かしらの発表、発信はできていたようです。  &lt;/p&gt;

&lt;p&gt;もっと頑張っている人もいっぱい知っていますが、自分のペースとしてはこのぐらいかなー、後は書籍の話もいただいておりますので、いろいろゆっくりと。  &lt;/p&gt;

&lt;p&gt;とはいえBDDプラグインのBehat3対応と、Fabricateの拡張も（なるはやで）やりたいなー。という来年に希望を持った前向きな感じで今年を〆たいと思います。  &lt;/p&gt;

&lt;p&gt;そうそう、3月にはこのブログを書いている My Operaがサービス終了となるので、どこかに移動しなくちゃいけない。実はそれが最優先だったりするのですが（汗  &lt;/p&gt;

&lt;p&gt;ということで何だかバタバタした終わり方ですが、来年も各所で皆様に会えるのを楽しみに。Co-EdoからPOST。&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>CakePHPのデータジェネレータFabricateにsequenceなどの機能を追加しました</title>
    <link rel="alternate" href="http://blog.url.com/2013/11/04/cakephp-fabricate-sequence.html"/>
    <id>http://blog.url.com/2013/11/04/cakephp-fabricate-sequence.html</id>
    <published>2013-11-04T09:11:42Z</published>
    <updated>2014-02-22T21:52:33+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;!-- more --&gt;
&lt;p&gt;先日カッとなって作った Fabricate ですが、その後実運用していくうちにいくつかの機能でRuby本家に近づけたくなったので実装を追加しました。  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/sizuhiko/Fabricate"&gt;GitHub: sizuhiko/Fabricate&lt;/a&gt;  &lt;/p&gt;

&lt;h3 id="section"&gt;変更概要&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;closure だけでなく、array 形式での属性値変更が可能に&lt;/li&gt;
  &lt;li&gt;初期連番をconfigで指定可能に&lt;/li&gt;
  &lt;li&gt;sequenceメソッドで柔軟な採番が可能に&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="array"&gt;array形式での属性値変更&lt;/h3&gt;

&lt;p&gt;これまで属性値を自動生成でなく、自分で決めた値にしたい場合は、無名関数（closure）でarrayを戻す必要がありました。&lt;br /&gt;
これを直接引数でarrayを指定できるようにしました。  &lt;/p&gt;

&lt;p&gt;従来の記述方法：  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Fabricate::create('Post', 10, function($data){
    return ["created" =&amp;gt; "2013-10-09 12:40:28", "updated" =&amp;gt; "2013-10-09 12:40:28"];
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;新しくサポートした記述方法：  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Fabricate::create('Post', 10, ["created" =&amp;gt; "2013-10-09 12:40:28", "updated" =&amp;gt; "2013-10-09 12:40:28"]);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もちろん、第二引数の生成レコード数を省略して1レコードだけ作ることも可能です。  &lt;/p&gt;

&lt;p&gt;$dataの内容見ないのに、とか全部固定なので無名関数じゃなくても良い等のシーンが思いのほか多いもので。  &lt;/p&gt;

&lt;h3 id="config"&gt;初期連番をconfigで指定&lt;/h3&gt;

&lt;p&gt;これまで連番（スキーマで数値カラムになっている項目は自動的に連番対象になる）は1から常に始まるようにしていたのですが、こちらもやはり変更したい場合があって、本家同様にconfigで変更できるようにしました。  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Fabricate::config(function($config) {
    $config-&amp;gt;sequence_start = 100;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;config関数は、環境定義オブジェクトのインスタンスを引数に取るメソッドを呼び出すので、その中で public 属性値である sequence_start の値を変更してください。&lt;br /&gt;
config関数を使わない場合は、従来通り1から開始されます。  &lt;/p&gt;

&lt;h3 id="sequence"&gt;sequenceメソッドで柔軟な採番&lt;/h3&gt;

&lt;p&gt;これが今回のバージョンアップで最も対応したかった機能で、連番を項目毎に変更したり、独自フォーマットに変更できたりします。&lt;br /&gt;
この機能に対応するために、attributes_for(), build(), create() の各メソッドで属性値を上書きできる無名関数に第二引数を追加しました。  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Fabricate::attributes_for('Post', 10, function($data, $world){
    return [
        'id'=&amp;gt; $world-&amp;gt;sequence('id'),
        'title'=&amp;gt; $world-&amp;gt;sequence('title', 1, function($i){ return "Title {$i}"; })
    ];
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記のように、$world を引数に取るようになりました。もちろん利用しない場合は省略可能です。&lt;br /&gt;
$worldは新しく追加したクラス FabricateContext のインスタンスで sequence メソッドを持っています。  &lt;/p&gt;

&lt;p&gt;sequenceメソッドは、3つの利用方法に対応しています。  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;configで設定された開始値(または1)から開始する連番にする：   &lt;/p&gt;

    &lt;p&gt;$world-&amp;gt;sequence('id')&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;開始番号を指定して連番にする：  &lt;/p&gt;

    &lt;p&gt;$world-&amp;gt;sequence('id', 10) // この例では10から開始する&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;独自形式のユニーク文字列を作成する：  &lt;/p&gt;

    &lt;p&gt;$world-&amp;gt;sequence('title', function($i){ return "Title {$i}"; }
// または開始番号を指定して
$world-&amp;gt;sequence('title', 1, function($i){ return "Title {$i}"; }&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一番上の利用方法は、DBのスキーマ定義が数値である限りは、sequenceメソッドを使わなくても同じ連番となるので、あまり利用ケースはないと推測されます。  &lt;/p&gt;

&lt;p&gt;本家のFabricator では同一プロセス中でのSequenceは常にユニークな値になるようになっていますが、CakePHPプラグイン版ではデータ生成のattributes_for(), build(), create() 各メソッドの呼び出し単位でユニークになります。&lt;br /&gt;
つまり呼び出し毎に開始番号から採番されます。  &lt;/p&gt;

&lt;p&gt;もし要望があれば、プロセス単位に連番を管理することも可能なので、Githubのissueなどで連絡ください（日本語でok）。&lt;br /&gt;
おそらく対応としては config で定義でできるようにすると思います…（併用でなく、プロセスか生成毎かを選択するイメージ）  &lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>CakePHPのデータジェネレータ Fabricate を作りました</title>
    <link rel="alternate" href="http://blog.url.com/2013/10/12/cakephp-fabricate.html"/>
    <id>http://blog.url.com/2013/10/12/cakephp-fabricate.html</id>
    <published>2013-10-12T11:10:45Z</published>
    <updated>2014-02-22T21:52:30+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;!-- more --&gt;
&lt;p&gt;Fabricate は Ruby の Fabricator に影響を受けたもので、データを簡単にすばやく生成する CakePHP2 用のプラグインです。  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/sizuhiko/Fabricate"&gt;GitHub: sizuhiko/Fabricate&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;動作確認しているバージョンはCakePHP2.3.10, CakePHP2.4.1ですが、他のバージョンでもCakePHP2系なら動くと思います。  &lt;/p&gt;

&lt;h3 id="section"&gt;インストール方法&lt;/h3&gt;

&lt;p&gt;Composer対応しているので、composer.json に追加するだけで大丈夫です。テストだけに利用するなら require-dev に、実行コードからも使いたい場合は require に追加してください。どちらでも動作します。  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    "extra": {
        "installer-paths": {
            "Plugin/Fabricate": ["sizuhiko/fabricate"]
        }
    },
    "require": {
        "composer/installers": "*",
        "sizuhiko/fabricate": "*"
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;composer/installers に対応していますので、お好みで extra/installer-paths に追加すれば、Plugin の下に良い感じでインストール可能です。  &lt;/p&gt;

&lt;p&gt;後は bootstrap.php でプラグインの宣言を追加してください。  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CakePlugin::load('Fabricate');
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="section-1"&gt;概要&lt;/h3&gt;

&lt;p&gt;Fabricateプラグインには3つのメソッドがあります。  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fabricate::attributes_for(:model_name, :number_of_generation, :callback) : CakePHPの属性配列をデータ付きで返します（複数件生成可能）&lt;/li&gt;
  &lt;li&gt;Fabricate::build(:model_name, :callback) : CakePHPのモデルインスタンスを返します（1件のみ生成可能）&lt;/li&gt;
  &lt;li&gt;Fabricate::create(:model_name, :number_of_generation, :callback) : 指定された件数分データベースに生成する&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="section-2"&gt;用途&lt;/h3&gt;

&lt;p&gt;このプラグインは以下のような用途にとても向いています。  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ページングのテストをするのに大量にデータを生成したい&lt;/li&gt;
  &lt;li&gt;fixture だと各テストケースで同じデータが生成されてしまうけど、各テストケース毎に違うデータを生成したい。かつテスト対象のカラム以外は適当な値が自動的に入って欲しい&lt;/li&gt;
  &lt;li&gt;Bddプラグイン（CakePHPのBehatインテグレーションプラグイン）のステップで「Postモデルに100件のデータが登録されていること」みたいなのを書きたいのに、簡単に記述できないなぁと思ったとき&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="section-3"&gt;使い方＆サンプル&lt;/h3&gt;

&lt;h4 id="attributesfor"&gt;attributes_for&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$results = Fabricate::attributes_for('Post', 10, function($data){
    return ["created" =&amp;gt; "2013-10-09 12:40:28", "updated" =&amp;gt; "2013-10-09 12:40:28"];
});

// $results is followings :
array (
  0 =&amp;gt; 
  array (
    'id' =&amp;gt; 1,
    'title' =&amp;gt; 'Lorem ipsum dolor sit amet',
    'body' =&amp;gt; 'Lorem ipsum dolor sit amet, aliquet feugiat. Convallis morbi fringilla gravida, phasellus feugiat dapibus velit nunc, pulvinar eget sollicitudin venenatis cum nullam, vivamus ut a sed, mollitia lectus. Nulla vestibulum massa neque ut et, id hendrerit sit, feugiat in taciti enim proin nibh, tempor dignissim, rhoncus duis vestibulum nunc mattis convallis.',
    'created' =&amp;gt; '2013-10-09 12:40:28',
    'updated' =&amp;gt; '2013-10-09 12:40:28',
  ),
  1 =&amp;gt; 
  array (
  ....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでPostモデル（第一引数に名前を指定）のスキーマ情報からカラム（属性）を取得して、タイプに応じた値が自動的に生成されて配列で戻ります。&lt;br /&gt;
第二引数に生成するレコード件数を指定します。&lt;br /&gt;
ただ、全部自動的だと困るという場合があるので、3つ目の引数にコールバック関数を指定可能になっています。このコールバック関数は、10件のデータを生成する場合、都度計10回呼び出されます。&lt;br /&gt;
戻り値として、属性名をキーに値を持つ連想配列を指定すると、都度array_mergeが実行されます（recursiveではありません）。&lt;br /&gt;
データの自動生成処理は、CakePHPのコアにあった FixtureTask の _generateRecords() というメソッドを拝借してきて、そのまま利用しています。&lt;br /&gt;
CakePHPでfixtureを生成したときrecordsに入っている内容と同じ物になります。  &lt;/p&gt;

&lt;p&gt;このメソッドの使いどころとしては、関連先との関連も生成して saveAll したいといったような、ちょっと応用的な使い方に向いていると思います。  &lt;/p&gt;

&lt;p&gt;また、第二引数、第三引数は省略可能ですので、  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 1件だけ生成
Fabricate::attributes_for('Post');
// 1件だけコールバックを指定して生成
Fabricate::attributes_for('Post', function($data){
    return ["created" =&amp;gt; "2013-10-09 12:40:28", "updated" =&amp;gt; "2013-10-09 12:40:28"];
});
// 10件生成
Fabricate::attributes_for('Post', 10);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というバリエーションでも利用可能です。  &lt;/p&gt;

&lt;h4 id="build"&gt;build&lt;/h4&gt;

&lt;p&gt;とりあえず本家のFabricatorに近づけたたくて作ったメソッドですが、CakePHPではモデルのインスタンスを複数同時に持てないので、正直使い勝手としては微妙です（作者が言うなという話ですが）。  &lt;/p&gt;

&lt;h4 id="create"&gt;create&lt;/h4&gt;

&lt;p&gt;最も簡単にデータをデータベースに保存するなら、このメソッドで十分です。&lt;br /&gt;
attributes_forで作ったレコードをすべてデータベースに保存します。&lt;br /&gt;
引数の使い方はattributes_forと同一になっています。  &lt;/p&gt;

&lt;h3 id="section-4"&gt;きっかけと今後&lt;/h3&gt;

&lt;p&gt;ページングのテストを書こうとして、とにかく面倒になってきて「&lt;strong&gt;何でCakePHPにはFabricatorがないんだー&lt;/strong&gt;」というノリで、カッとなって作った系ですので、機能的には最低限になっています。&lt;br /&gt;
かつたぶん最新のFabricatorのクローンとも言い難い状況です。  &lt;/p&gt;

&lt;p&gt;またカッとなったら、最新のFabricatorの機能に近づけようかな〜、どなかた使っていただける方がいればご要望、機能追加は GitHubのIssue、Pull Requestでお願いします。  &lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>CakePHPのコントローラテストで注意すること</title>
    <link rel="alternate" href="http://blog.url.com/2013/09/13/cakephp-2.html"/>
    <id>http://blog.url.com/2013/09/13/cakephp-2.html</id>
    <published>2013-09-13T05:09:19Z</published>
    <updated>2014-02-22T21:52:27+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;!-- more --&gt;

&lt;h3 id="section"&gt;コントローラのテストは難解である&lt;/h3&gt;

&lt;p&gt;とは言え、テストを書かないというのも何なのでテストを書くわけですが。  &lt;/p&gt;

&lt;p&gt;CakePHPではControllerTestCaseというテストケースクラスを継承してテストケースを書くのですが、Cakeのテストにモックが導入される前は testAction のオプションに PostsTestController のような PostsController を継承したクラスを作成し、内部的にそれを利用するように渡していました。  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class PostsTestController extends PostsController {
// モックしたい処理
....
}
class PostsControllerTest extends ControllerTestCase {

    public function testアクションをテストする() {
        $this-&amp;gt;testAction('url', array('controller'=&amp;gt;'PostsTestController'));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ただし現在のCakePHP 2.3や2.4系では、モックオブジェクトを利用します。  &lt;/p&gt;

&lt;h3 id="section-1"&gt;なぜモックが必要？&lt;/h3&gt;

&lt;p&gt;もしこの記事を読んでいる方で、testActionがブラウザからも、コンソールからも成功するよ、という場合は依存関係が少ないか、たまたまなのかもしれません。  &lt;/p&gt;

&lt;p&gt;Webアプリケーションのコントローラは様々な依存関係があり、簡単にテストを通過させることができません。特にSessionComponentを使ったactionをテストする場合、問題が発生します。&lt;br /&gt;
Sessionはブラウザからテストを実行している範囲では問題が起きないのですが、コンソールで実行するとエラーになるという事があります。まぁコンソールにはセッションなんてないからね。当然です。  &lt;/p&gt;

&lt;p&gt;しかし実装上はセッションから値を取り出して何か処理をするという事がありえるわけです。  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 実際のコントローラ
    $components = ['Session', 'Auth'];

    public function index() {
        $hoge = $this-&amp;gt;Session-&amp;gt;read('hoge');
        .....
    }

// テストケース
    public function testIndex() {
        CakeSession::write('hoge', 'fuga');
        $this-&amp;gt;testAction('/posts/index');
        ......
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいなコードがあった場合にindexアクションをテストすると、ブラウザからは成功するのですが、コンソールからだと失敗する。経験したことありませんか？  &lt;/p&gt;

&lt;h3 id="section-2"&gt;どうやってモックを使うのか&lt;/h3&gt;

&lt;p&gt;で、調べてみたら意外と解説してある部分がない。こういうときはCakePHPのコアテストコードを見るのが一番です。&lt;br /&gt;
具体的には lib/Cake/Test/Case/TestSuite/ControllerTestCaseTest.php です（lib/Cake/Test/Case/Controller/…でないところがミソ）。  &lt;/p&gt;

&lt;p&gt;で、上記コードを参照した上で先ほどのテストコードを改修すると、以下のようになります。  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public function testIndex() {
        $this-&amp;gt;controller = $this-&amp;gt;generate("Posts", ['components' =&amp;gt; ['Session']]);
        $this-&amp;gt;controller-&amp;gt;Session-&amp;gt;expects($this-&amp;gt;any())
             -&amp;gt;method('read')
             -&amp;gt;will($this-&amp;gt;returnValueMap([['hoge', 'fuga']]));
        $this-&amp;gt;testAction('/posts/index');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$this-&amp;gt;generate() はControllerTestCaseが定義しているモックを作成するためのメソッドで、第一引数は PostsController の Controller 部分を除いた名前です。第二引数には components や helper、model など、コントローラから依存関係にあるモジュールを同時にモックしたい場合に配列形式で記述します。今回はSessionコンポーネントをモックしたいので、第二引数に指定します。&lt;br /&gt;
このgenerate()はコントローラの初期化や依存関係のモック処理もやってくれるとても強力な機能を持っています。PHPUnitのgetMockでモックするのではなく、必ずこのメソッドを使うようにしましょう。  &lt;/p&gt;

&lt;p&gt;generate()の戻り値はコントローラのモックオブジェクトになっています。さらにSessionもモックしているので、 $this-&amp;gt;controller-&amp;gt;Session に対して、read('hoge')はいつでも'fuga'を返すという記述をすることが可能です。&lt;br /&gt;
モック自体はPHPUnitのモックオブジェクトなので、詳しい記法はPHPUnitのマニュアルからモックオブジェクトの章を参照してください。  &lt;/p&gt;

&lt;p&gt;&lt;a href="http://phpunit.de/manual/3.7/ja/test-doubles.html#test-doubles.mock-objects"&gt;PHPUnit3.7のモックオブジェクト解説&lt;/a&gt;  &lt;/p&gt;

&lt;h3 id="section-3"&gt;最後に&lt;/h3&gt;

&lt;p&gt;コントローラのテストは本当に難解です。ただコアのテストコードを見るだけでもだいぶ理解が深まります。一度自分のアプリでテストを書く前に、その親クラス(ModelとかControllerなど)やテストケースのテストコードを見ると、これまでにテストの書き方がわからなかったところも、腑に落ちることがあるはずです。  &lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>CakePHP BddPlugin updates (2013/2/19)</title>
    <link rel="alternate" href="http://blog.url.com/2013/02/19/cakephp-bddplugin-updates-2.html"/>
    <id>http://blog.url.com/2013/02/19/cakephp-bddplugin-updates-2.html</id>
    <published>2013-02-19T05:02:05Z</published>
    <updated>2014-02-22T21:52:23+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;!-- more --&gt;

&lt;h3 id="v093"&gt;v0.9.3リリース&lt;/h3&gt;

&lt;p&gt;本日バージョン0.9.3をリリースしました。  &lt;/p&gt;

&lt;p&gt;機能面での修正というわけではなく、今回は Composer の &lt;strong&gt;A Multi-Framework Composer Library Installer&lt;/strong&gt; (&lt;a href="https://github.com/composer/installers"&gt;https://github.com/composer/installers&lt;/a&gt;) という仕組みに対応したものです。  &lt;/p&gt;

&lt;p&gt;なのでpluginsディレクトリでgit cloneして引き続きご利用の皆様は、今回のアップデートは無視してもらっても大丈夫です。  &lt;/p&gt;

&lt;h3 id="section"&gt;なにが嬉しいのか&lt;/h3&gt;

&lt;p&gt;Composerのフレームワークプラグインを管理する機能については、ちょっと前から知っていたのですが、まぁCakePHPでは3以降中心かな？と思っていたところ &lt;a href="http://twitter.com/abe4tawa8"&gt;@abe4tawa8&lt;/a&gt; さんから Pull Request をいただきまして、修正を始めたといういきさつです。  &lt;/p&gt;

&lt;p&gt;このComposerの仕組みを使うと、appディレクトリの下に利用するプラグインとかPHPUnitとかのrequireを指定したcomposer.jsonを置いておくことでプロジェクトで必要なモジュールの依存関係を解決しようというものです。  &lt;/p&gt;

&lt;p&gt;例えば&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    "config": {
        "vendor-dir": "Vendor"
    },
    "minimum-stability": "dev",
    "repositories": [
        {
            "type": "pear",
            "url": "http://pear.phpunit.de"
        },

        {
            "type": "vcs",
            "url": "https://github.com/sizuhiko/CommonContexts.git"
        },
        {
            "type": "vcs",
            "url": "https://github.com/sizuhiko/Spec-PHP.git"
        },

        {
            "type": "vcs",
            "url": "git://github.com/sizuhiko/Bdd.git"
        }
    ],
    "require-dev": {
        "sizuhiko/Bdd": "dev-develop",
        "behat/mink-goutte-driver": "*",
        "behat/mink-selenium-driver": "*",
        "behat/mink-selenium2-driver": "*"
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように書くと、Bddプラグインを app/Plugins ディレクトリにインストールすることが可能になります。  &lt;/p&gt;

&lt;p&gt;あとは app/Config/bootstrap.php に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CakePlugin::load('Bdd');
require dirname(dirname(__FILE__)).DS.'Vendor/autoload.php';
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BddPluginの利用と、依存関係のライブラリ群のautoloadをrequireすれば大丈夫です。  &lt;/p&gt;

&lt;h3 id="section-1"&gt;残念なお知らせ&lt;/h3&gt;

&lt;p&gt;Composerでは依存先のライブラリのrepositories指定を参照してくれません。&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;Repositories are not resolved recursively. You can only add them to your main composer.json. Repository declarations of dependencies' composer.jsons are ignored.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="http://getcomposer.org/doc/04-schema.md#repositories"&gt;http://getcomposer.org/doc/04-schema.md#repositories&lt;/a&gt; より  &lt;/p&gt;

&lt;p&gt;BddPluginではPullRequest中のCommonContextやforkしてカスタマイズしているSpec-PHPを使っており、それらのリポジトリを指定する必要があります。  &lt;/p&gt;

&lt;p&gt;他の依存関係はどうなっているの？と、気付いた方はするどいわけですが、Composerは&lt;a href="https://packagist.org/"&gt;Packagist&lt;/a&gt;というリポジトリサイトを使っており、ここに必要なリポジトリを追加すれば良い訳です。登録は無料です。  &lt;/p&gt;

&lt;p&gt;で、これらforkしたプロジェクトについても登録してしまえば良いと思って作業を進めていたのですが、いざ手元でも動作確認がほぼOKになったところでPackagistのサイトでSubmitしようとすると&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;Do not submit forks of existing packages. If you need to test changes to a package that you forked to patch, use VCS Repositories instead. If however it is a real long-term fork you intend on maintaining feel free to submit it.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;特に「**Do not submit forks of existing packages. **」の部分は太字になっていまして、他を受け付けない雰囲気を醸し出しています。まぁ要はメンテナンスを続けるならフォークしたプロジェクトでも登録可能だよ、と書いてあるわけですが、あまりの警告にビビってしまい各アプリケーションのcomposer.jsonにrepositoriesを追加してもらう方針としました。必要な部分は上記サンプルのとおりになっています。  &lt;/p&gt;

&lt;h3 id="section-2"&gt;さいごに&lt;/h3&gt;

&lt;p&gt;そういえばBddPlugin自体はPackagistに登録しても問題ないのだった！、と今Blogを書いていて気がついたので、それはこれから実施します。そうするとBddPluginのリポジトリ宣言は必要なくなりますね（汗  &lt;/p&gt;

&lt;p&gt;今のcomposer.jsonではnameがsizuhiko/Bddになっていて、BddをスモールケースにしろとPackagistに怒られているので、少々時間がかかります  &lt;/p&gt;

&lt;p&gt;それと先日Co-Edoで行われたCakeBeerTalkの飛び入りLTでも話しましたが、使っていての不明点など何でもgithubのissueで質問ください。よろしくおねがいします。  &lt;/p&gt;

&lt;p&gt;BddPluginを使った勉強会もやりたいですなー&lt;/p&gt;

</content>
  </entry>
</feed>
