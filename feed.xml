<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2015-03-14T08:45:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>BambooのChatWork通知APIを作成しました</title>
    <link rel="alternate" href="http://blog.url.com/2015/03/14/bamboo-chatwork-add-on.html"/>
    <id>http://blog.url.com/2015/03/14/bamboo-chatwork-add-on.html</id>
    <published>2015-03-14T08:45:00Z</published>
    <updated>2015-03-14T19:53:15+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;現在作業支援している現場では Atlassian JIRA,Bitbucket,Bambooと、コミュニケーションツールとしてChatWorkを使っています。
CIツールであるBambooは通知機能としてEmail,HipChat,IMに対応しているのですが、汎用的な通知機能は持っていないので、ChatWorkプラグインを自作してみました。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/sizuhiko/bamboo-chatwork-notification"&gt;Bamboo ChatWork Plugin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここではBambooのプラグインを作る手順と、そのときにハマったポイントなどを解説します。&lt;/p&gt;

&lt;h3&gt;はじめに&lt;/h3&gt;

&lt;p&gt;BambooのプラグインをAtlassian SDKをインストールします。
&lt;a href="https://developer.atlassian.com/docs/getting-started/set-up-the-atlassian-plugin-sdk-and-build-a-project"&gt;Set up the Atlassian Plugin SDK and Build a Project&lt;/a&gt;からプラットフォームにあったSDKをインストールします。&lt;/p&gt;

&lt;p&gt;SDKをインストールしたら&lt;a href="https://developer.atlassian.com/docs/getting-started/set-up-the-atlassian-plugin-sdk-and-build-a-project/explore-the-installed-sdk-and-the-atlas-commands"&gt;Step 3: Try an atlas command&lt;/a&gt;のとおり以下のコマンドを実行します。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mkdir 作業ディレクトリ名
&lt;span class="nb"&gt;cd &lt;/span&gt;作業ディレクトリ名
atlas-run-standalone --product bamboo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;atlas-run-standalone&lt;/code&gt;を実行すると、大量の&lt;code&gt;maven install&lt;/code&gt;が動きます。
かなり時間がかかるので、ネットワークが速い環境と、時間にゆとりがあるときに実行した方が良いです。&lt;/p&gt;

&lt;h3&gt;プラグインのスケルトンを生成する&lt;/h3&gt;

&lt;p&gt;以下のコマンドを実行してください。
&lt;code&gt;sh
atlas-create-bamboo-plugin
&lt;/code&gt;
以下の表の入力を求められるので、適切に入力します。
&lt;table&gt;
&lt;tr&gt;&lt;th&gt;Define value for groupId&lt;/th&gt;&lt;td&gt;作成するプラグインのパッケージパスを指定&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Define value for artifactId&lt;/th&gt;&lt;td&gt;作成するプラグインの名前を指定&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Define value for version&lt;/th&gt;&lt;td&gt;作成するプラグインのバージョンを指定&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Define value for package&lt;/th&gt;&lt;td&gt;groupIdとartifactIdを結合した値を指定&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
入力した内容はpom.xmlに反映されるだけなので、後でpom.xmlを編集すれば大丈夫です。&lt;/p&gt;

&lt;p&gt;プラグイン名のディレクトリに&lt;code&gt;pom.xml&lt;/code&gt; と &lt;code&gt;src/main&lt;/code&gt; フォルダに以下のファイルが自動生成されます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;{Define value for package}のパス/MyPluginComponent.java&lt;/li&gt;
&lt;li&gt;{Define value for package}のパス/MyPluginComponentImpl.java&lt;/li&gt;
&lt;li&gt;/resources/atlassian-plugin.xml&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;正直、自動生成されたコードは役に立たないので、削除してしまって良いでしょう。
&lt;code&gt;atlassian-plugin.xml&lt;/code&gt;はデフォルト値になっているので、適切に編集します（これは後で大丈夫です）。&lt;/p&gt;

&lt;p&gt;以下のコマンドを入力して、プラグイン環境を実行します。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;プラグインの名前
atlas-run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;atlas-run&lt;/code&gt;を実行すると、大量の&lt;code&gt;maven install&lt;/code&gt;が動きます。
かなり時間がかかるので、ネットワークが速い環境と、時間にゆとりがあるときに実行した方が良いです（２度目）。&lt;/p&gt;

&lt;h3&gt;プラグインを実装する&lt;/h3&gt;

&lt;p&gt;Bambooの通知プラグインとして、最初からインストールされているものはHipChat通知プラグインです。
とりあえずプラグインを作るための情報があまりに少ないので（Wikiを見て進めても肝心な箇所ほどJavaDocを見ろになってしまう。だがJavaDocを見てもわかるはずがない）、通知プラグインを作りたいと思った人はHitChatプラグインまたは、私の作ったChatWorkプラグインをコピー＆ペーストするのがお勧めです。&lt;/p&gt;

&lt;p&gt;私もまず&lt;a href="https://bitbucket.org/atlassian/bamboo-hipchat-plugin"&gt;HipChatプラグインのソースコード&lt;/a&gt;を参考にしました。&lt;/p&gt;

&lt;p&gt;HipChatプラグインやChatWorkプラグインのコードを見るとわかりますが、実装するファイルはわずかです。
&lt;code&gt;src/main&lt;/code&gt;ディレクトリに以下のファイルを配備します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AbstractNotificationRecipientを継承した通知プラグインの設定画面コントローラ&lt;/li&gt;
&lt;li&gt;NotificationTransportを実装した通知プラグインの通知コントローラ&lt;/li&gt;
&lt;li&gt;resources/atlassian-plugin.xml（プラグインの設定ファイル）&lt;/li&gt;
&lt;li&gt;Freemaker形式のテンプレートファイル（設定入力画面、設定表示画面、通知メッセージなど）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;実装する量は多くなく、コツさえ掴めば通知プラグインを作るのは難しくありません。コツさえ掴めば&amp;hellip;ですが。&lt;/p&gt;

&lt;h4&gt;通知プラグインの設定画面コントローラを作成する&lt;/h4&gt;

&lt;p&gt;ChatWorkプラグインでは、&lt;a href="https://github.com/sizuhiko/bamboo-chatwork-notification/blob/master/src/main/java/jp/tokyo/open/bamboo/plugin/chatwork/ChatworkNotificationRecipient.java"&gt;ChatworkNotificationRecipient.java&lt;/a&gt;というクラスを作成しました。
作成したというよりはHipChatプラグインの&lt;a href="https://bitbucket.org/atlassian/bamboo-hipchat-plugin/src/212f5e97f1f97a93535cec3cf074adc9ed5525be/src/main/java/com/atlassian/bamboo/hipchat/HipchatNotificationRecipient.java?at=master"&gt;HipchatNotificationRecipient.java&lt;/a&gt;を丸々コピーして微修正した程度です。&lt;/p&gt;

&lt;p&gt;実際に差分を見るとわかりますが、クラス名など変更した程度です。&lt;/p&gt;

&lt;p&gt;このコントローラに対応する画面は&lt;a href="https://github.com/sizuhiko/bamboo-chatwork-notification/blob/master/src/main/resources/atlassian-plugin.xml#L24-L28"&gt;atlassian-plugin.xml&lt;/a&gt;で指定します。&lt;/p&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;notificationRecipient&lt;/span&gt; &lt;span class="na"&gt;key=&lt;/span&gt;&lt;span class="s"&gt;"recipient.chatwork"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"Chatwork Recipient"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"jp.tokyo.open.bamboo.plugin.chatwork.ChatworkNotificationRecipient"&lt;/span&gt; &lt;span class="na"&gt;weight=&lt;/span&gt;&lt;span class="s"&gt;"10"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;ChatWork&lt;span class="nt"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;resource&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"freemarker"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"edit"&lt;/span&gt; &lt;span class="na"&gt;location=&lt;/span&gt;&lt;span class="s"&gt;"templates/plugins/notifications/chatwork/editNotification.ftl"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;resource&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"freemarker"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"view"&lt;/span&gt; &lt;span class="na"&gt;location=&lt;/span&gt;&lt;span class="s"&gt;"templates/plugins/notifications/chatwork/viewNotification.ftl"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/notificationRecipient&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;resource&lt;/code&gt;の&lt;code&gt;name&lt;/code&gt;が&lt;code&gt;edit&lt;/code&gt;である場合、設定編集画面のファイルパスを指定します。
&lt;code&gt;view&lt;/code&gt;の場合は、導入済み通知プラグインが設定一覧に表示される画面部品のファイルパスを指定します。&lt;/p&gt;

&lt;p&gt;実際の画面を見てみましょう&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[@ww.textfield labelKey="chatwork.api.token" name="chatWorkApiToken" value="${chatWorkApiToken!}" required='true'/]
[@ww.textfield labelKey="chatwork.room" name="chatWorkRoom" value="${chatWorkRoom!}" required='true'/]
[@ww.checkbox labelKey="chatwork.notify" name="chatWorkNotifyUsers" value="${chatWorkNotifyUsers!?string}"/]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これはFreemakerというテンプレートエンジンを使っているのですが、なんとなく想像できるレベルです。
HTMLと似ています。labelKeyはリソースファイルに定義した内容をバインドするので国際化対応できます。&lt;/p&gt;

&lt;h5&gt;ここで&lt;code&gt;コツ１&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;Freemakerのテンプレート上の&lt;code&gt;name&lt;/code&gt;属性と、コントローラクラスの&lt;a href="https://github.com/sizuhiko/bamboo-chatwork-notification/blob/master/src/main/java/jp/tokyo/open/bamboo/plugin/chatwork/ChatworkNotificationRecipient.java#L32-L34"&gt;設定入力画面の項目名&lt;/a&gt;
がマッピングされています。&lt;/p&gt;

&lt;p&gt;この画面はBambooで通知設定を入力するときに以下のようなHTMLに変換されます。&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"chatWorkApiToken"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"xxxxx"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"chatWorkRoom"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"oooooo"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"check"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"chatWorkNotifyUsers"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;想像どおりですか？
注意しなければならないのは「設定画面にはすべてのプラグインのHTMLが並ぶ」ということです。
えっ？何を言っているかわからない？ではどのようになっているかというと以下のようなHTMLになるのです。&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hipchat-plugin"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"display:none"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"apiToken"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"xxxxx"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"room"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"oooooo"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"check"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"notifyUsers"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"chatwork-plugin"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"chatWorkApiToken"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"xxxxx"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"chatWorkRoom"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"oooooo"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"check"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"chatWorkNotifyUsers"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このようなフォームが生成されていて、選択した通知の部分だけが見えるようになるのです。
カンの良い人は気付いたかもしれません。
私は最初HipChatプラグインをコピペして、項目名を変更していなかったので、以下のようなHTMLが生成されていて、うまくフォームから値を取得できませんでした。&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hipchat-plugin"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"display:none"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"apiToken"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"xxxxx"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"room"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"oooooo"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"check"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"notifyUsers"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"chatwork-plugin"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"apiToken"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"xxxxx"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"room"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"oooooo"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"check"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"notifyUsers"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同一フォームに同じname属性を持つHTMLが生成されて、submitされるのでコントローラのpopulateメソッドのMapに正しく値が入らなくなっていました。
なのでなるべく重複しない名前を指定しておくことが重要です。
ところが標準の通知プラグインであるHipChatが一等地の名前を持っているのです。Bambooとしてどのような名前規則を推奨しているのかドキュメントには記載していないので、パッケージ名を付加するなどの工夫が必要です。&lt;/p&gt;

&lt;p&gt;なお保存すると、保存完了メッセージが表示されるのですが、このメッセージのカスタマイズ方法はわかっていません。
そもそもカスタマイズできるのか調査中ですが、Bambooのコードはオープンソースではないので&amp;hellip;(ry&lt;/p&gt;

&lt;h4&gt;通知プラグインの通知コントローラを作成してChatWorkに通知する&lt;/h4&gt;

&lt;p&gt;ChatWorkプラグインでは、&lt;a href="https://github.com/sizuhiko/bamboo-chatwork-notification/blob/master/src/main/java/jp/tokyo/open/bamboo/plugin/chatwork/ChatworkNotificationTransport.java"&gt;ChatworkNotificationTransport.java&lt;/a&gt;というクラスを作成しました。
作成したというよりはHipChatプラグインの&lt;a href="https://bitbucket.org/atlassian/bamboo-hipchat-plugin/src/212f5e97f1f97a93535cec3cf074adc9ed5525be/src/main/java/com/atlassian/bamboo/hipchat/HipchatNotificationTransport.java?at=master"&gt;HipchatNotificationTransport.java&lt;/a&gt;を丸々コピーして修正しました。&lt;/p&gt;

&lt;p&gt;まず通知には通知メッセージが必要ですよね。
通知メッセージをFreemakerのテンプレートで記述したいのですが、ここで圧倒的なドキュメント不足に遭遇します。
ほぼ自力での解決はムリなので、Bambooの標準テンプレートをコピペして作業した方が良いでしょう。&lt;/p&gt;

&lt;p&gt;HipChatプラグインのソースコードを見ると、特に通知クラスを作ったり、通知のテンプレートを指定することはしていないようです。
Bambooの通知機能はHipChatに連携することに依存していて、HipChatはBamboo標準のテンプレートを使っています。
&lt;a href="https://developer.atlassian.com/display/BAMBOODEV/Notification+Plugin+Modules"&gt;通知プラグインを作るためのドキュメント&lt;/a&gt;を確認します。
&lt;a href="https://developer.atlassian.com/display/BAMBOODEV/Building+a+Notification+Plugin"&gt;Building a Notification Plugin&lt;/a&gt;を読むと、カスタムリスナーを登録する手順が書いてありますが、独自の通知タイプを作らない限りこのとおりやらなくても大丈夫です。
実際、私もカスタムリスナーを作成してドキュメント通りやってみたのですが、うまく動作しませんでした。atlassian-plugin.xmlにリスナー定義を追加してやってみたりしたのですが&amp;hellip;.&lt;/p&gt;

&lt;h5&gt;ここで&lt;code&gt;コツ２&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;そこでChatWorkプラグインでは、&lt;a href="https://github.com/sizuhiko/bamboo-chatwork-notification/blob/master/src/main/java/jp/tokyo/open/bamboo/plugin/chatwork/ChatworkNotificationRecipient.java#L136"&gt;ChatworkNotificationRecipientからChatworkNotificationTransportのインスタンスを作成するとき&lt;/a&gt;に、&lt;code&gt;TemplateRenderer&lt;/code&gt;というFreemakerのテンプレートを操作できるインスタンスを渡すようにしました。ChatworkNotificationTransportで独自に取得することはできないようです。
ChatworkNotificationRecipientではDIによって値がセットされるようになっているようです（ドキュメントなし）。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ChatworkNotificationTransport::sendNotification()&lt;/code&gt;メソッドが送信指示として呼び出されるので、TemplateRendererを使って独自テンプレートを呼び出して文字列に変換します。
文字列変換したメッセージをChatWork APIを使って指定したルームに送信するだけです。&lt;/p&gt;

&lt;p&gt;以下の部分がChatWork用に実装したコードです。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    static String getChatworkApiURL(String room) {
        return CHATWORK_API_URL.replaceAll("\\{room_id\\}", room);
    }


    private String getChatworkContent() {
        String templateLocation = "templates/plugins/notifications/chatwork/BuildCompleted.ftl";
        return templateRenderer.render(templateLocation, populateContext());
    }

    private Map&amp;lt;String, Object&amp;gt; populateContext()
    {
        Map&amp;lt;String, Object&amp;gt; context = Maps.newHashMap();
        context.put("build", plan);
        context.put("buildSummary", resultsSummary);
        return context;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;getChatworkContent()&lt;/code&gt;を使ってFreemakerテンプレートからメッセージを取得します。
実際のテンプレートファイルは以下のよな内容です。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[#-- @ftlvariable name="build" type="com.atlassian.bamboo.build.Buildable" --]
[#-- @ftlvariable name="buildSummary" type="com.atlassian.bamboo.resultsummary.BuildResultsSummary" --]
[#include "/notification-templates/notificationCommons.ftl"]
[#include "/notification-templates/notificationCommonsText.ftl" ]
[#assign authors = buildSummary.uniqueAuthors/]

[#if buildSummary.successful][#lt]
[info][title][@buildNotificationTitleText build buildSummary/] was SUCCESSFUL[/title]
[@showRestartCount buildSummary/]
[#if buildSummary.testResultsSummary.totalTestCaseCount &amp;gt;0] [@showTestSummary buildSummary.testResultsSummary/][/#if].
[#if authors?has_content] [@showAuthorSummary authors/][/#if][#lt]
${baseUrl}/browse/${buildSummary.planResultKey}/
[/info]
[#else][#lt]
[info][title][@buildNotificationTitleText build buildSummary/] has FAILED[/title]
[@showRestartCount buildSummary/]
[#if buildSummary.testResultsSummary.totalTestCaseCount &amp;gt;0] [@showTestSummary buildSummary.testResultsSummary/][/#if].
[#if authors?has_content] [@showAuthorSummary authors/][/#if][#lt]
${baseUrl}/browse/${buildSummary.planResultKey}/
[/info]
[/#if][#lt]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先ほども書きましたが、これをJavaDocの情報を元に生成するのはほぼムリ、というか完全にムリです。
最初の手順でインストールしたSDKの中に実際のBambooがインストールされるので、Bambooのwarファイルが展開された&lt;code&gt;WEB-INF/classes/notification-templates&lt;/code&gt;のBuildCompleted.ftlファイルの内容をコピペして、ChatWorkメッセージ記法に合わせて修正しています。&lt;/p&gt;

&lt;p&gt;後はSDKで実行したBambooにプラグインをインストールして、デバッグしながら確認するのが近道です。&lt;/p&gt;

&lt;h4&gt;プラグインをビルドする&lt;/h4&gt;

&lt;p&gt;プラグインは管理画面からjarファイルとしてアップロードします。
そのためコンソールから以下のコマンドを実行します。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;プラグインの名前
atlas-mvn clean package
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;atlas-mvnはmvnのラッパーのようなのですが、mvnを直接実行するのでなく、こちらのコマンドを使った方が良いみたいです。
あとは通常のmavenのビルドと一緒ですが、初回はまた大量のmvn installが動くのでネットワークと時間には余裕を持って挑みましょう。&lt;/p&gt;

&lt;p&gt;ビルドが終わるとtargetディレクトリにjarファイルが生成されます。&lt;/p&gt;

&lt;h3&gt;さいごに&lt;/h3&gt;

&lt;p&gt;ChatWork通知プラグインとHipChat通知プラグインの差分はほんとうにわずかで、それほど難しいものではありません。
Bambooの通知プラグインモジュールで得た経験は以下のようなところです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ドキュメント読めばなんとなくわかるけど、「詳しくはJavaDocへ」でつまづく（心が折れる）&lt;/li&gt;
&lt;li&gt;入力画面など生成されたものはブラウザのデバッガを使って、名前空間がバッティングしていないか確認が必要&lt;/li&gt;
&lt;li&gt;EclipseのJDなどを使って、Bamboo自体のソースコードをリバースして調べながら実装しないとムリ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;プロジェクト都合じゃないとなかなかBambooとか使ったりする機会がないのですが、もしBamboo使うことになって通知プラグインを作りたいと思った方は参考にしていただければと思います。&lt;/p&gt;

&lt;p&gt;長くなったので、このあたりで終わりにしますが、他にもいろいろわかったことはあるので、また気が向いたら書こうかなと思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Fabricateのversion2を作成しました</title>
    <link rel="alternate" href="http://blog.url.com/2015/03/14/fabricate-v2.html"/>
    <id>http://blog.url.com/2015/03/14/fabricate-v2.html</id>
    <published>2015-03-14T06:44:00Z</published>
    <updated>2015-03-14T17:35:50+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;これまでCakePHP2用のデータジェネレータプラグインとして開発を続けてきた&lt;a href="https://github.com/sizuhiko/Fabricate"&gt;Fabricate&lt;/a&gt;を&lt;code&gt;V2&lt;/code&gt;として各種ORMへ対応するようなコアモジュールへと変更しました。
またFabiricateリポジトリのmasterブランチへは統合されていませんが、CakePHP3のリリース時期を合わせて、V2ブランチを本流にする予定です。
これまでのCakePHP2用ライブラリはcakephp2ブランチでメンテナンスを続ける予定です。&lt;/p&gt;

&lt;p&gt;データジェネレータって何？誰得？という方は、以下の投稿を一読していただけると理解が深まります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://twileshare.com/bgrg"&gt;テストデータの作り方 - 第73回 PHP勉強会&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;FabricateはRubyのFabricationとFactory_Girlに影響された「fixtureはDRYではないので、Fixture replacement を使おう」という流れに乗ったPHPクローンです。&lt;/p&gt;

&lt;h3&gt;Version2を作成するきっかけ&lt;/h3&gt;

&lt;p&gt;このキッカケはいくつかあります。
1つには昨年の CakeFest2014 で Fabricate の LT をした後で、 CodeIgniter の開発者だったことでも知られる&lt;a href="https://github.com/philsturgeon"&gt;Phil Sturgeon&lt;/a&gt; から、「これいいね、他のフレームワークでも使えるようにしてよ」と言われたことでした。
他のフレームワークでも使えるようにしたいという思いは、少しあったのですがまだ確約できなかったので「maybe」と返しただけでした。（このときPhilはかなり酔っていたので、私に話した事を覚えているのかどうかも怪しいですがw）&lt;/p&gt;

&lt;p&gt;さらにもう1つおおきなキッカケがCakePHP3でのPSR対応によって、namespaceなど外部ライブラリを使いやすくなり、さらに外部ライブラリからフレームワーク本体のコードへのアクセスしやすくなったということがあります。
CakePHP2ではフレームワークへアクセスするにはアプリケーションまたはプラグインでないと困難で、特にORMに依存したライブラリをフレームワークをまたいで作成するのは困難でした。これがPSRの対応でやりやすくなったということ、CakePHP3への対応に合わせてV2を作って、他のフレームワークにも対応できるようにしようと思ったのです。&lt;/p&gt;

&lt;h3&gt;Fabricate V2の主な変更点&lt;/h3&gt;

&lt;p&gt;Fabricateの利用方法はほとんど変わっていませんが、各ORM用にアダプターと呼ばれるORMの差分を吸収するクラスを準備する必要があります。
Fabricateの本体には&lt;a href="https://github.com/sizuhiko/Fabricate/blob/v2/src/Adaptor/FabricateArrayAdaptor.php"&gt;Fabricate\Adaptor\FabricateArrayAdaptor&lt;/a&gt;という連想配列構造を返すサンプル用のアダプターを用意しています。これを参考にアダプターを実装すれば&lt;a href="http://www.doctrine-project.org/"&gt;Doctrine&lt;/a&gt;や&lt;a href="https://github.com/propelorm/Propel"&gt;Propel&lt;/a&gt;、&lt;a href="http://www.yiiframework.com/"&gt;Yii&lt;/a&gt;や&lt;a href="http://www.codeigniter.com/"&gt;CodeIgniter&lt;/a&gt;でも利用可能になります。&lt;/p&gt;

&lt;h3&gt;アダプターの実装方法&lt;/h3&gt;

&lt;p&gt;とはいえ実際にORMに接続するアダプターもないと、ということでCakePHP3用のアダプター&lt;a href="https://github.com/sizuhiko/cakephp-fabricate-adaptor"&gt;CakePHP Fabricate Adaptor&lt;/a&gt;も作成しました。&lt;/p&gt;

&lt;p&gt;ここではCakePHP3のアダプター実装を例に、アダプターで何を実装しなくてはいけないのかを解説したいと思います。&lt;/p&gt;

&lt;h4&gt;作成するクラス&lt;/h4&gt;

&lt;p&gt;アダプタークラスは&lt;a href="https://github.com/sizuhiko/Fabricate/blob/v2/src/Adaptor/AbstractFabricateAdaptor.php"&gt;Fabricate\Adaptor\AbstractFabricateAdaptor&lt;/a&gt;クラスを継承します。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;Fabricate\Adaptor\AbstractFabricateAdaptor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CakeFabricateAdaptor&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;AbstractFabricateAdaptor&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;実装するメソッド&lt;/h4&gt;

&lt;p&gt;アダプターとして実装する必要があるメソッドは以下の3つです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;getModel&lt;/li&gt;
&lt;li&gt;create&lt;/li&gt;
&lt;li&gt;build&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;それぞれのメソッドの実装を確認しましょう。&lt;/p&gt;

&lt;h5&gt;getModel&lt;/h5&gt;

&lt;p&gt;getModelメソッドは各ORMの差分を吸収するためのモデルインスタンスを返却するデータジェネレータの定義部分です。
データジェネレータとしては最も重要な機能です。   &lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;Fabricate\Model\FabricateModel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;getModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$modelName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FabricateModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$modelName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TableRegistry&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$modelName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$schema&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;filterKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nv"&gt;$attrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$schema&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'length'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$attrs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'limit'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$attrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'length'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'null'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$attrs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'null'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$attrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'null'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nv"&gt;$model&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$attrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'type'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;associations&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$association&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;associations&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$association&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;get_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$target&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$alias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$target&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$association&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;Association&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;ONE_TO_ONE&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="nv"&gt;$model&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;hasOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$alias&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$association&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;foreignKey&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nv"&gt;$className&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;Association&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;ONE_TO_MANY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="nv"&gt;$model&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;hasMany&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$alias&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$association&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;foreignKey&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nv"&gt;$className&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;Association&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;MANY_TO_ONE&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="nv"&gt;$model&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;belongsTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$alias&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$association&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;foreignKey&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nv"&gt;$className&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;getModelはFabricateModelクラスのインスタンスを生成する責務があります。
FabricateModelはPHPのマイグレーションツールである&lt;a href="https://phinx.org/"&gt;Phinx&lt;/a&gt;に影響を受けていて、スキーマの定義方法が似ています。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// Phinx
&lt;/span&gt;&lt;span class="nv"&gt;$users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'users'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$users&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'limit'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'limit'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'password_salt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'limit'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'limit'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'first_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'limit'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'last_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'limit'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'created'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'datetime'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'updated'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'datetime'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'null'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;// FabricateModel
&lt;/span&gt;&lt;span class="nv"&gt;$users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FabricateModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'users'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$users&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'limit'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'limit'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'password_salt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'limit'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'limit'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'first_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'limit'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'last_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'limit'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'created'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'datetime'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'updated'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'datetime'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'null'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;利用できるカラム型はPhinxと同様で、オプションについて現時点ではlimit(長さ)のみ対応しています。&lt;/p&gt;

&lt;p&gt;CakePHP3では&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="nv"&gt;$table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TableRegistry&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$modelName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という記述でスキーマ情報が連想配列で取得できるので、それを繰り返して&lt;code&gt;addColumn&lt;/code&gt;を呼び出しています。&lt;/p&gt;

&lt;p&gt;スキーマ定義を作成したら、次にモデルの関連を定義します。
モデルの関連定義は、以下のようにassociationを使って関連構造を一度に作成する場合に必要となります。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nx"&gt;Fabricate&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Users'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$world&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'username'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'taro'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'posts'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$world&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;association&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Posts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この例のように関連を設定するには、以下のようにFabricateModel::hasMany()やbelongsTo()を使います。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$users&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;hasMany&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'posts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'post_id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Posts'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$posts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;belongsTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'users'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'post_id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Users'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パラメータの指定方法は、hasManyもhasOneもbelongsToも同じで、(別名、外部キーカラム名、モデル名）を指定します。&lt;/p&gt;

&lt;h5&gt;create&lt;/h5&gt;

&lt;p&gt;createメソッドは、Fabricateによって生成された連想配列構造のデータを、ORMを使ってDBに保存する機能を実装します。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$modelName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$attributes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$recordCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TableRegistry&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$modelName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$entities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;newEntities&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$attributes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'validate'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;OPTION_VALIDATE&lt;/span&gt;&lt;span class="p"&gt;]]);&lt;/span&gt;
    &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;transactional&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$entities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$entities&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$entity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$entity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$ret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$entities&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;$modelName&lt;/code&gt;には&lt;code&gt;Fabricate::create(&amp;#39;Users&amp;#39;,&lt;/code&gt;と記述した場合の、&lt;code&gt;Users&lt;/code&gt;が渡ります。
&lt;code&gt;$attributes&lt;/code&gt;には生成された連想配列が渡ります。例えば以下のとおりです。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
  &lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;'title'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Lorem ipsum dolor sit amet'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'body'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Lorem ipsum dolor sit amet, aliquet feugiat. Convallis morbi fringilla gravida, phasellus feugiat dapibus velit nunc, pulvinar eget sollicitudin venenatis cum nullam, vivamus ut a sed, mollitia lectus. Nulla vestibulum massa neque ut et, id hendrerit sit, feugiat in taciti enim proin nibh, tempor dignissim, rhoncus duis vestibulum nunc mattis convallis.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'created'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'2013-10-09 12:40:28'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'updated'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'2013-10-09 12:40:28'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
  &lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;$recordCount&lt;/code&gt;は生成する件数ですが、この値は&lt;code&gt;count($attributes)&lt;/code&gt;の値と一致します。
CakePHP3では以下の流れでDBへ保存しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TableRegistry::get()でテーブルインスタンスを取得&lt;/li&gt;
&lt;li&gt;Table::newEntities()で連想配列からエンティティを生成&lt;/li&gt;
&lt;li&gt;Table::save()でエンティティをDBに保存&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;build&lt;/h5&gt;

&lt;p&gt;buildメソッドは、Fabricateによって生成された連想配列構造のデータから生成したエンティティを返却する機能を実装します。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$modelName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TableRegistry&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$modelName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$entity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;newEntity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'validate'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;OPTION_VALIDATE&lt;/span&gt;&lt;span class="p"&gt;]]);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$entity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;$modelName&lt;/code&gt;には&lt;code&gt;Fabricate::create(&amp;#39;Users&amp;#39;,&lt;/code&gt;と記述した場合の、&lt;code&gt;Users&lt;/code&gt;が渡ります。
&lt;code&gt;$data&lt;/code&gt;には生成された連想配列が1インスタンス分だけ渡ります。例えば以下のとおりです。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s1"&gt;'title'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Lorem ipsum dolor sit amet'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;'body'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Lorem ipsum dolor sit amet, aliquet feugiat. Convallis morbi fringilla gravida, phasellus feugiat dapibus velit nunc, pulvinar eget sollicitudin venenatis cum nullam, vivamus ut a sed, mollitia lectus. Nulla vestibulum massa neque ut et, id hendrerit sit, feugiat in taciti enim proin nibh, tempor dignissim, rhoncus duis vestibulum nunc mattis convallis.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;'created'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'2013-10-09 12:40:28'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;'updated'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'2013-10-09 12:40:28'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;さいごに&lt;/h3&gt;

&lt;p&gt;現在CakePHP3用のアダプターしかないので「xxxx ORMについてアダプター実装したよ！」という連絡を待っています。
&lt;a href="https://github.com/sizuhiko/Fabricate/blob/v2/composer.json"&gt;Fabricateのcomposer.json&lt;/a&gt;のsuggestに追加してPull Requestをもらえるととても助かります。&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;"suggest"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"sizuhiko/cake_fabricate"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"for integration with CakePHP3"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;ここに追加したPRをお待ちしています&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;皆様のPull Requestをお待ちしております！！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>2014年ふりかえり</title>
    <link rel="alternate" href="http://blog.url.com/2015/01/03/2014-retrospective.html"/>
    <id>http://blog.url.com/2015/01/03/2014-retrospective.html</id>
    <published>2015-01-03T07:05:00Z</published>
    <updated>2015-01-03T18:19:21+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;この投稿は2014年参加／発表したり、運営に携わったイベント、やっていた仕事の内容などについてふりかえるポストです。&lt;/p&gt;

&lt;h3&gt;1月&lt;/h3&gt;

&lt;p&gt;2013年から年末の忘年会が少なめで、2014年から新年会が異常に多いという現象になりました。
ちなみにこれは2015年も同様で新年会がいっぱいです。新年から1年をなかったこと（忘れる）にできるぐらいです。&lt;/p&gt;

&lt;p&gt;まだタイトルもなく、何も中身も決まっていなかった &lt;code&gt;CakePHPで学ぶ継続的インテグレーション&lt;/code&gt; 本（以降 &lt;code&gt;CI本&lt;/code&gt; ）が動き出したのでした。&lt;/p&gt;

&lt;p&gt;当時のブログサイト My Opera Blogがもうすぐ終わりだ、やべーと言いながら、Co-Edoで何にしたら良いかなーと頭を悩ませていたのでした。&lt;/p&gt;

&lt;h3&gt;2月&lt;/h3&gt;

&lt;p&gt;非常に忙しくCakePHPの案件支援をしており、毎日ピリピリしていた記憶が….。仕事では人材の流動性の高まりを感じでいたのでした。&lt;/p&gt;

&lt;p&gt;バグフィックスに対応した Fabricate 1.1.1 をリリースしました。&lt;/p&gt;

&lt;p&gt;Bddプラグインのインストールをしようと思ったら、php-object-freezerが見つからないエラーで失敗するように
なんとPHPUnitプロジェクトにあったリポジトリがpearからもgithubからも、世の中の公開リポジトリから一切いなくなったのでした。
これはforkして使っているSpec for PHPの依存ライブラリなので、しかたなくコードをlibの下に展開してSpec for PHPに同梱するようにしました。&lt;/p&gt;

&lt;p&gt;CI本は主にチャットワークで作業が進み、目次を考えていました（まだ決まってはいない）。&lt;/p&gt;

&lt;p&gt;いよいよ My Operaの終了までカウントダウンということで、ブログをMiddlemanに移行しました。
記念すべきMiddlemanでの一号記事 &lt;a href="/2014/02/22/hello-world.html"&gt;Hello Middleman!&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;3月&lt;/h3&gt;

&lt;p&gt;3/12 Web生誕25周年でした。
またそれに関連して「HTML5 Japan Cup 2014」が開催されることになり、ボランティアスタッフとしてハッカソンや審査などに関わるようになりました。&lt;/p&gt;

&lt;p&gt;3/8 Co-Edoにてたまっていたブログネタを一気に3本投入しました&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="/2014/03/08/middleman-install-memo.html"&gt;Middleman インストールメモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/2014/03/08/composer-phpunit-windows-vagrant.html"&gt;VagrantでComposerからPHPUnitをインストールするときに注意したいこと&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/2014/03/08/cakephp-addprefix-here-problem.html"&gt;CakePHPで動的にプレフィックスルーティングを追加したときに気をつけること&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3/18 &lt;a href="/2014/03/22/web-testing-2014.html"&gt;テスト駆動web開発勉強会 Vol.1で発表しました&lt;/a&gt;。
そういえば、Vol.2が開催されないなーとか思うのでした…&lt;/p&gt;

&lt;p&gt;Middlemanに移行してブログ書くぞーと熱が上がっていたので、さらに一本 &lt;a href="/2014/03/30/composer-autoload.html"&gt;Composerのautoloadを使いこなす&lt;/a&gt; を投下。&lt;/p&gt;

&lt;p&gt;3/25 第76回 PHP勉強会 に参加しました。確かHTML5 Japan Cup2014の告知をしたと記憶しています。&lt;/p&gt;

&lt;p&gt;CI本は大筋が決まって、いざ書くぞーというモードになるのでした。&lt;/p&gt;

&lt;h3&gt;4月&lt;/h3&gt;

&lt;p&gt;4/4 今も続くCakePHP3もくもく会#3に参加しました（&lt;a href="/2014/04/19/cake3_mokumoku_3.html"&gt;ブログ記事&lt;/a&gt;）。このとき初めてCakePHP3に触れたのでした。&lt;/p&gt;

&lt;p&gt;4/9 はもちろん4q!カンファレンス。今年も盛り上がりましたー&lt;/p&gt;

&lt;p&gt;4/12 &lt;a href="http://html5j-testing.doorkeeper.jp/events/10161"&gt;Test the Web Forward Meetup (仮), Tokyo #2&lt;/a&gt; に参加しました（&lt;a href="/2014/04/19/twfm_2014_04.html"&gt;ブログ記事&lt;/a&gt;）。私はShadow DOMに興味があったので、そのテストコードを書くチームに参加しました。帰宅後もいくつか作業をすすめ本家にプルリクエストが取り込まれるなど、Contributeしたぞーという気持ちが高まったのですが、その後あまり作業できていません。HTML5の仕様テストに興味はあるので、今年も少しずつ取り組みたいなーと思っています。&lt;/p&gt;

&lt;p&gt;5jCupはスタッフ顔合わせがあったあと、すぐに第一回のアイデアソン／ハッカソンがあり、どちらもスタッフとして参加しました。&lt;/p&gt;

&lt;p&gt;全然活動と関係ないのですが、その頃ちょうどいつも聴いているJ-Waveで流れていたY.I.Mのkonsaiという曲にはまって何日も頭をリピートしていたのでした。今でもたまに聴いてなごみますw&lt;/p&gt;

&lt;iframe width="560" height="315" src="//www.youtube.com/embed/W2euzCQIAfA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;CI本は5jCupの繁忙期と重ならないように、なるべく早めにと思いちゃくちゃくと原稿を進めるのでした。&lt;/p&gt;

&lt;p&gt;4/28 第77回 PHP勉強会に参加し、もくもく会でCakePHP3に触った話をしました。&lt;/p&gt;

&lt;h3&gt;5月&lt;/h3&gt;

&lt;p&gt;5/19 CakePHP もくもく会 に参加しました。&lt;/p&gt;

&lt;p&gt;5/21 CakeDC/Migration プラグインがアップデートされ、generateコマンドでいろいろごにょごにょできるようになり、とても便利になったのでした。すぐにプロジェクトでもアップデートして記法を取り入れました。&lt;/p&gt;

&lt;p&gt;後はひたすら仕事が忙しく、平日夜中や土日はほぼCI本の原稿を書いていた記憶が….&lt;/p&gt;

&lt;h3&gt;6月&lt;/h3&gt;

&lt;p&gt;イベントにたくさん参加しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;6/12 - 6/13は毎年恒例のInterop&lt;/li&gt;
&lt;li&gt;6/16 CakePHP 3.0.0 もくもく会（勉強会） #5 （&lt;a href="/2014/06/27/cake3_mokumoku_5.html"&gt;ブログ記事&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;6/23 【祝9周年】第79回 PHP勉強会&lt;/li&gt;
&lt;li&gt;6/28 PHPカンファレンス関西&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fabricate1.2をリリースしました。主な機能追加は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;configで主キーを割り振らないようにするオプション&lt;/li&gt;
&lt;li&gt;Fabricate::define() のクローン&lt;/li&gt;
&lt;li&gt;Fabricate::association() のクローン&lt;/li&gt;
&lt;li&gt;Fabricate::trait() のクローン&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらでだいぶFabricator/FactoryGirl の実装に近づきました。&lt;/p&gt;

&lt;p&gt;CI本は書きたい事は書ききって、全体の流れを整える調整が.. &lt;/p&gt;

&lt;h3&gt;7月&lt;/h3&gt;

&lt;p&gt;5jCupはいよいよ審査モード。スタッフが集まって一次審査を行いました。大量に集められた審査用のガジェット（機器）など、作品も沢山寄せられてあっという間に時間が過ぎました。
そして、7/26 には表彰式が行われ、今年も前半戦イベントの幕が閉じたのでした。&lt;/p&gt;

&lt;p&gt;7/29 CakePHP 3.0.0 もくもく会（勉強会） #6に参加。&lt;/p&gt;

&lt;p&gt;いくつかのバグフィックスをしたFabricate1.2.1をリリースしました。&lt;/p&gt;

&lt;p&gt;CI本は大大リファクタリング大会で、毎週末とても大変だったなぁ〜&lt;/p&gt;

&lt;h3&gt;8月&lt;/h3&gt;

&lt;p&gt;今年もCakeFestに参加しました（&lt;a href="/2014/09/23/cakefest-2014-report.html"&gt;ブログ記事&lt;/a&gt;）。初スペイン（まぁだいたいどこへ行っても初なのですがw）。&lt;/p&gt;

&lt;p&gt;Fabricateを遅まきながらTravis.ci対応したので、CakePHPのプラグインをCIする方法について&lt;a href="/2014/08/17/cakephp2_plugin_travis.html"&gt;ブログ記事&lt;/a&gt;を書きました。&lt;/p&gt;

&lt;p&gt;CI本は校正をしながらいよいよ大詰め！&lt;/p&gt;

&lt;h3&gt;9月&lt;/h3&gt;

&lt;p&gt;原稿からも解放され、たくさんのイベントに参加しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;9/4 CakePHP 3.0.0 もくもく会（勉強会） #7（&lt;a href="/2014/09/13/cakephp3_debugkit_require_sqlite.html"&gt;ブログ記事&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;9/6 俺のXP祭り&lt;/li&gt;
&lt;li&gt;9/19 CakeFest報告会&lt;/li&gt;
&lt;li&gt;9/25 HTML5とか勉強会&lt;/li&gt;
&lt;li&gt;9/29 第82回 PHP勉強会&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そしてついに、9/19 &lt;code&gt;CakePHPで学ぶ継続的インテグレーション&lt;/code&gt;が発売されました（&lt;a href="/2014/09/07/cakephp_ci_book.html"&gt;ブログ記事&lt;/a&gt;）。&lt;/p&gt;

&lt;h3&gt;10月&lt;/h3&gt;

&lt;p&gt;先月同様にイベントに参加したり、発表したり楽しかったー&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;10/9 10q!カンファレンス&lt;/li&gt;
&lt;li&gt;10/11 PHPカンファレンスで発表（&lt;a href="/2014/10/13/phpconference2014.html"&gt;ブログ記事&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;10/25 俺聞け10（急遽空手形で発表、Should Beeをアピール）&lt;/li&gt;
&lt;li&gt;10/27 第83回 PHP勉強会&lt;/li&gt;
&lt;li&gt;10/30 HTML5 デバイスAPI勉強会&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そして毎年恒例のアレ（カレンダー）のイラストが原稿終わった後にあるのでした..&lt;/p&gt;

&lt;h3&gt;11月&lt;/h3&gt;

&lt;p&gt;いよいよ渋谷の支援案件も残りわずかとなりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;11/17 CakePHP 3.0.0 もくもく会（勉強会） #9 &lt;/li&gt;
&lt;li&gt;11/25 HTML5とか勉強会&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;カレンダーデザイン終わり！&lt;/p&gt;

&lt;h3&gt;12月&lt;/h3&gt;

&lt;p&gt;12月から半分はJavaの新規案件のお手伝いにも行っていました。&lt;/p&gt;

&lt;p&gt;12/23 に&lt;code&gt;CakePHP 3.0.0 感謝祭 &amp;amp; もくもく会（勉強会） #10&lt;/code&gt;と同時開催（フロア別）で、&lt;code&gt;『CakePHPで学ぶ継続的インテグレーション』ハンズオンセミナー&lt;/code&gt; を開催しました（私はサポート役でしたが…）。&lt;/p&gt;

&lt;p&gt;例のCI本のハンズオンですが、まだ2回目ということでちょっと練度が足りなくて、参加者の皆様は若干消化不足だったかもしれませんが、またリクエストもありますので、ぜひ今年もやりたいと思います。&lt;/p&gt;

&lt;p&gt;12/24 に渋谷の支援を1日残していますが、感謝のLT（&lt;a href="/2015/01/03/cakephp-agile-481-days.html"&gt;ブログ記事&lt;/a&gt;）をしました。&lt;/p&gt;

&lt;h3&gt;まとめ&lt;/h3&gt;

&lt;p&gt;たくさんブログ書くぞーと言っていたくせに、14本しか書けませんでした。
執筆とかイベントスタッフとかあると、なかなかなー。わかってはいるのですが。&lt;/p&gt;

&lt;p&gt;今年はもう少し情報公開できるだろうか。CakePHP3の新しいネタとかイロイロ書けそうですしね。
そうそう今日CakePHP3はRC1になりましたね。CakeFestもちょっと早めの5月末ニューヨークだそうですよ。ぜひ行かねば。&lt;/p&gt;

&lt;p&gt;直近でいうと1月末にHTML5カンファレンスがあって、今年もスタッフ参加しますので、会場でお会いできればと思います。&lt;/p&gt;

&lt;p&gt;さらには1月末に伊良部大橋が開通するので宮古に行きたいとか（これは完全に趣味ですが）。&lt;/p&gt;

&lt;p&gt;今年もイロイロなイベントに参加したり、橋見に行ったり、また機会に恵まれれば執筆したりと変わらず活動していきたいと思いますので、皆様よろしくお願いいたします。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>僕とPHPxAgileの481日間</title>
    <link rel="alternate" href="http://blog.url.com/2015/01/03/cakephp-agile-481-days.html"/>
    <id>http://blog.url.com/2015/01/03/cakephp-agile-481-days.html</id>
    <published>2015-01-03T05:23:00Z</published>
    <updated>2015-01-03T15:59:47+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;2014/12/24 に行われた&lt;a href="http://phpstudy.doorkeeper.jp/events/18420"&gt;【12/24 クリスマスイブ】第85回 PHP勉強会&lt;/a&gt;でLTをしました。&lt;/p&gt;

&lt;script async class="speakerdeck-embed" data-id="eaf63b006da5013291a442717aa444ce" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;p&gt;当日はもの凄く楽しく盛り上がったので、私が発表を開始する頃には会場の終了時間ギリギリになっていました。
このため高速LTで話していろいろ溢れた話などを記事にまとめます。&lt;/p&gt;

&lt;h3&gt;CakePHPを使った開発現場での481日間の支援&lt;/h3&gt;

&lt;p&gt;コンサル会社からご指名でお話をいただいたら、コミュニティの知り合いの会社でしたよ、というなんか遠回りな形で始まったお仕事でした。&lt;/p&gt;

&lt;p&gt;まず参加して感じたのは、481日前のスライドにあるように、これはなかなか手強いなーという状況でした。
コンサルの方からイロイロ事情を聞いていたので、ある程度覚悟はしていったのですが、まずの印象はチーム開発ができていないなーという印象。ここでいうチームとは、誰かが指示して動くというよりは、全員の力で進んでいくアジャイルチームをイメージしています。
良い意味で言うとウォーターフォールのやり方としては、文化があってうまく進めている状況でした。&lt;/p&gt;

&lt;p&gt;とはいえ最初に見た手順書とかコードとか、もっと優先してやらないといけなそうな事がたくさんあったので、スライドの順に対策を計画し、開発しながら改善活動をゆるやかに進めるということになりました。&lt;/p&gt;

&lt;h3&gt;できたこと と できなかったこと&lt;/h3&gt;

&lt;p&gt;かなり大きな案件だったため、複数のサブシステムがあり、スライドの対象は私が直接関わった2つについて支援した内容です。
ただ、施策のいくつかは全体として取り入れてもらったりして、現在も継続しています。&lt;/p&gt;

&lt;p&gt;できたことについては、スライドに含んでいるので、ここではスライドに含められなかった、主にできなかったことについて書きたいと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デプロイの自動化&lt;/li&gt;
&lt;li&gt;環境毎の設定切り替えの仕組み&lt;/li&gt;
&lt;li&gt;共通化されていたコードの改善&lt;/li&gt;
&lt;li&gt;プロダクトオーナーとの関わり方&lt;/li&gt;
&lt;li&gt;more チーム&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まずデプロイについては、独自の方法で半自動化されていました。
ここで列挙したのは、デプロイにcapやjenkinsを使ったりは「しなかった」という意味です。このあたりの改善はすでにワークフローとして機能しているものを改善すべきか、どこまで文化に踏み込むかという判断が必要になると思います。
本案件ではスクリプトを実行するのは手動ながらも、それによる問題はなさそうだったので、そのまま継続しています。
ただCI、インテグレーション、ステージング、本番とある内のインテグレーションだけはJenkinsと連動して自動デプロイできるようにしても良かったかなーと今頃思っていますが、まだいるメンバーの方、これを読んだらTRYしてみてください。&lt;/p&gt;

&lt;p&gt;環境毎の設定切り替えの仕組みはあったのですが、当初設定を追加するのにExcelファイルを編集しないといけなくて、ひどく苦労しました（Excelファイルだと差分がわからないし）。現在はテキストファイルを直接編集して良い方式となり、これも全サブシステムに影響する箇所で対策がしにくくそのまま継続利用しました。
CakePHPだとCI本でも解説した &lt;a href="https://github.com/josegonzalez/cakephp-environments"&gt;CakePHP Environmentsプラグイン&lt;/a&gt; を使えると良かったのですが。ここはいずれCakePHP3対応するのであればプラグインに切り替えられると良いなーと思います。&lt;/p&gt;

&lt;p&gt;上記と同じような理由で、すでに全サブシステムで共通化されていたコードの改善もあまり手が付けられませんでした。サブプロジェクトによって進捗具合が異なり私が入った段階ですでに多くの機能ができあがっていたサブシステムもあり、多くの共通部分は未着手のままとなりました。
一方で、できたことのほとんどは、まだ実施されていない自動テストだったり、サブシステム単位で改善できる箇所からの着手となったため、このような結果になっています。&lt;/p&gt;

&lt;p&gt;プロダクトオーナーとの関わり方については、これはどの現場でもそうですが、開発からのアプローチだけではなかなか改善が難しい部分です。文化を変えるには内側からの大きな力だったり、より大きな成功体験を求めるといったことが必要となるのではないかと思います。
もしこのあたりを改善したいという現場があれば、プロダクトオーナーを含めて&lt;code&gt;ふりかえり&lt;/code&gt;をやって、ProblemとTryを共有して改善していくと良いと思います。でも大規模システムでは… なかなかに難しいですね…&lt;/p&gt;

&lt;p&gt;moreチームということでは、最初に関わったサブシステムのチームでは、見積もりゲームをやって、カンバンを導入し、よりチーム力で進めたと思います。そのまま継続してやってくれると良いなーと思っています。私が離れてからもメンバー間でPull Requestに活発にコメントされていたし、とてもうまく廻っているという印象がありました。&lt;/p&gt;

&lt;p&gt;一方でその後に担当したサブシステムは、かなり複雑な事情で始まりました。チームの力を付けながら進むというよりは、とにかく完成を目指すような形でしたので、チーム力という意味ではまだ道半ばだったかもしれません。
あと、年末に様々なイベントが不運なタイミングで重なってしまったのも、多少心残りですが、残ったメンバーの力を合わせて進めていって欲しいです。&lt;/p&gt;

&lt;h3&gt;さいごに&lt;/h3&gt;

&lt;p&gt;私はいろいろなところで揉めるというか、正論でズバズバ行くタイプなので衝突することが多かったと思います。
今回支援させてもらった現場では、派遣の方が多く、そういう意味でチーム力で進めていくのはとても困難な状況であったと思います。
特に社員ではない働き方を選んでいる人の場合、もの凄く前のめりでやりたい人と、3歩後ろをついていきたい人に別れると、これまでの経験で感じます。私もそういう意味では前者になる訳ですが…&lt;/p&gt;

&lt;p&gt;例えばチーム全員で要求を仕様にブレークダウンして見積もりゲームをやったり、相互にコードをレビューしたり、これはAgile開発の文化にない開発者にとって、全員が望んでいる方法でないというのは、気持ちでは理解できます。
が、これをやらずに属人性を排除し、チームとしてより良く開発を進めていく方法が現時点ではあまり思い当たりません。
特にWeb界隈では人の流動性も高いので、極端に生産性を落とさない為にも、コードや仕様を引き継ぐというために時間を取られるといった事はできれば避けたいはずです。&lt;/p&gt;

&lt;p&gt;このプロジェクトを通じて、テストデータジェネレータ &lt;a href="https://github.com/sizuhiko/Fabricate"&gt;Fabricate&lt;/a&gt; も作ったし、多くの実践投入実績や経験も得ることができました。&lt;/p&gt;

&lt;p&gt;まだ現場では開発が続いており &lt;code&gt;CakePHPで継続的インテグレーションを導入したモダンで大規模な開発&lt;/code&gt; を継続しているという、貴重な体験ができていると思います。
そういう意味で、誰か事例発表をすると良いなーと思いますので、今年のPHPカンファレンスなどで話が聞けるのを楽しみに待っています。&lt;/p&gt;

&lt;p&gt;そして、PHP勉強会の2日後、2014/12/26をもって、作業支援から離れました。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/20141226_flower.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;最後にステキなお花と色紙をいただきました。&lt;/p&gt;

&lt;p&gt;本当にありがとうございました。引き続き開発頑張ってください！！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>PHP Conference 2014で「擬人化から始めるPHPerのためのオブジェクト指向超入門」を発表してきました</title>
    <link rel="alternate" href="http://blog.url.com/2014/10/13/phpconference2014.html"/>
    <id>http://blog.url.com/2014/10/13/phpconference2014.html</id>
    <published>2014-10-13T11:11:00Z</published>
    <updated>2014-10-13T22:03:11+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;2014/10/11 に行われた&lt;a href="http://phpcon.php.gr.jp/w/2014/"&gt;PHPカンファレンス2014&lt;/a&gt;で発表をしてきました。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/phpconference2014.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://gihyo.jp/news/report/01/phpcon2014/0001?page=2"&gt;Photo by gihyo.jp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;スライドは以下の内容です。&lt;/p&gt;

&lt;script async class="speakerdeck-embed" data-id="74562820350401328a4766ded83ef86d" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;p&gt;PHPカンファレンスでは公募セッションは最大30分のため、なぜ今回このようなタイトルを発表しようと思ったか、という背景については話ことができませんした。こちらのブログでは、スライドの共有と共に、その辺りの経緯について書いておきたいと思います。&lt;/p&gt;

&lt;h3&gt;なぜ今オブジェクト指向か？&lt;/h3&gt;

&lt;p&gt;オブジェクトデザインは原著から数えると、もう12年になろうとする訳です。これはセッションの中でも話したのですが、2003年当時はまだWebのフレームワークもまだ今日のようなものでなく、多くの会社は各社オレオレフレームワークを作っていた時代です。
オブジェクト指向が必要ないような使い捨てサイトならまだしも、受託やサービスなどソースコードを維持したり、機能アップをするような場面ではオブジェクト指向が必要だと考え、今のアジャイルムーブメントかそれ以上に語られていたはずです。&lt;/p&gt;

&lt;p&gt;オレオレフレームワークを作ったことがある人は、オブジェクト指向やデザインパターンをよく勉強してそのあり方を議論したものです。
そのような人たちが、現在の入門プログラマーに「オブジェクト指向がわかってない」と言っても、そもそも通じないと思ったのがきっかけでです。&lt;/p&gt;

&lt;p&gt;ここ4,5年の間にWebからプログラミングを始めた人（Webフレームワーク世代）は、すでに素晴らしいWebフレームワークがあり、その上でプログラミングをすることを要求されます。言語そのもの、たとえばPHPなら「イラストでよくわかるPHP はじめてのWebプログラミング入門」や「よくわかるPHPの教科書」あたりを読んでから、各フレームワークの本や公式チュートリアルを片手にアプリケーション開発を始めています。
つまりオレオレフレームワーク世代のオッサンが通過したオブジェクト指向やデザインパターンの経験に基づいてソースコードに手厳しいコメントを付けても、受けた方も辛いだけなのです。&lt;/p&gt;

&lt;h3&gt;今どのような弊害が起きているのか&lt;/h3&gt;

&lt;p&gt;で、このようなWebフレームワーク世代はCakePHPやその他のWebフレームワーク（MVC的なもの）を使って、MVCの枠に収めようとしてFatコントローラになったりしやすいのです。
なぜなら特定のディレクトリにフレームワークが指定した方法で書いていれば、良くわかんないけどうまく動いてしまうのです。フレームワークすげーな！という訳です。
それ以外の書き方は知らないし、どこにも書いてないのです。
結局、適切にクラス分割ができないため、結果として与えられた範囲の枠組みで問題はない、と考えているような状況を見かけるのです。
classってPHPの文法です、キリッ！とか言われたことはないですが、まぁ無くはないのかな…と。&lt;/p&gt;

&lt;p&gt;じゃぁフレームワークの本に、その概念や考え方を書くべきだという声もあるかもしれません。私もCakePHP本の執筆に携わったことがあり、耳の痛い話です。しかしフレームワークの本では、すべてのフレームワークについての説明もページ数的に困難な中、OOPやMVCの概念のような内容を解説するのは困難なことも事実です。&lt;/p&gt;

&lt;h3&gt;そこで話してみようと思った&lt;/h3&gt;

&lt;p&gt;もちろん、オブジェクト指向ムーブメント世代のオッサンであってもオブジェクト指向をみんな理解しているかというと、そういう訳ではありません（まぁ少なくともみんな読書会なんかして勉強はしていたような気がします）。
今時のWebフレームワーク世代だって、しっかり勉強している意識高い人はいっぱいいるし、知っています。
ただ最近プログラミングを始めた人は、技術の移り変わりが激しいし、言語やフレームワークはどんどんバージョンアップするし、なかなか基礎的な事に対する勉強時間を作るのが難しいのではないかな、と思うのです。
しかもオブジェクト指向の勉強って難しいし「銀の弾丸」は無いわけです。最近そういった勉強会の話もあまり聞きません。
ではどのあたりから始めると良いだろう？という当たりを付けられるセッションをしてみたいと思ったのです。&lt;/p&gt;

&lt;p&gt;私が技術支援で入った中で良く感じている問題はオブジェクト指向プログラミングというより、そもそものオブジェクト指向がうまく理解されていないと思ったので以下のポイントに絞った内容にしたいと思いました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;オブジェクトとは何なのか&lt;/li&gt;
&lt;li&gt;オブジェクトを導出するにはどうしたら良いのか&lt;/li&gt;
&lt;li&gt;今回のPHPカンファレンスのテーマは「知りたい，があなたを変えていく」&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらの要件に合うのは、責務駆動設計の中心的原理とテクニックを解説した「オブジェクトデザイン」の紹介が最適で、30分という時間に適している（知りたい==何か持ち帰って始めることができる）と思ったのです。&lt;/p&gt;

&lt;h3&gt;どうだったか&lt;/h3&gt;

&lt;p&gt;セッションをやっている間、いつも盛り上がっていないと不安なので、小ネタを差し込むのですが、皆さん真面目に聞きに来ていただいたので、講演者から見るとダダ滑りでした（個人的な感想です）。ただ&lt;a href="https://joind.in/talk/view/12043"&gt;joind.in&lt;/a&gt;のコメントを読ませていただいたり、顔見知りの方に確認した範囲では何かしら体験を持ち帰っていただけたようで「知りたい」につながったのかな、と思っています。&lt;/p&gt;

&lt;p&gt;もし私の講演を聴いていただいてコメントまだな方は、&lt;a href="https://joind.in/talk/view/12043"&gt;コチラに&lt;/a&gt;一言いただけると嬉しいです。&lt;a href="https://joind.in/talk/view/12043"&gt;joind.in&lt;/a&gt;は匿名でのコメントもできますので、ご安心ください。&lt;/p&gt;

&lt;p&gt;また、今回の目玉？！セッションであった「ウェブエンジニアに必要なセキュリティスキルとは 徳丸浩 x 大垣靖男」の対談セッションでも思ったのですが、お二人の話の大きな相違点のベースである&lt;code&gt;現実論&lt;/code&gt;と&lt;code&gt;理想論&lt;/code&gt;のケースはセキュリティだけではなく、オブジェクト指向についても同じだな、と思いました。
私はすべての人がオブジェクト指向を理解して進めるのが理想だと思うし、アジャイル原則の&lt;code&gt;私たち&lt;/code&gt;はオブジェクト指向を理解しているプログラマーであるべき、と思っています。ただすべての人がそうでないというのも理解できるので、理解度はともかくオブジェクト指向と向き合って欲しいなと思っています。そこから何かが変わると良いな、と。&lt;/p&gt;

&lt;h3&gt;裏話&lt;/h3&gt;

&lt;p&gt;実は、セッションを応募するとき、PHPカンファレンスでは重複して申し込めると聞いていたので、オブジェクト指向超入門（上）と、オブジェクト指向超入門（下）の2セッションにして合わせて60分で申し込もうと思ったのですが、それは通らなそう(www)と思って自重しました。
またどこかで60分セッションやれる機会があれば、やってみたいなと思うのでした。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>CakeFest2014に参加しました</title>
    <link rel="alternate" href="http://blog.url.com/2014/09/23/cakefest-2014-report.html"/>
    <id>http://blog.url.com/2014/09/23/cakefest-2014-report.html</id>
    <published>2014-09-23T05:19:00Z</published>
    <updated>2014-09-23T18:03:26+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://coedo-cakephp.doorkeeper.jp/events/15008"&gt;9/19に茅場町Co-Edoで行われたCakeFest2014報告会&lt;/a&gt;でも話した内容をベースに記事にしました。&lt;/p&gt;

&lt;p&gt;すでに同日に発表された&lt;a href="http://www.engineyard.co.jp/blog/2014/cakephp3-future-preview/"&gt;@yandoさんの記事「マドリードで見たCakePHP3の明るい未来」&lt;/a&gt;が秀逸なので、CakePHP3の動向については&lt;a href="http://www.engineyard.co.jp/blog/2014/cakephp3-future-preview/"&gt;その記事&lt;/a&gt;をご覧ください。&lt;/p&gt;

&lt;p&gt;では私は何を書くかというと、報告会でも話したCakeFest2014の全体感と、来年10周年を迎えるCakePHPを盛り上げる為にみんなでCakeFestに行こう！という気分になってもらえると良いな、というまとめになっています（ちょっとはCakePHP3についても書くよ）。&lt;/p&gt;

&lt;h3&gt;CakeFestの歴史&lt;/h3&gt;

&lt;p&gt;&lt;img src="/images/blog/cakefest_2014_1.png" /&gt;&lt;/p&gt;

&lt;p&gt;CakeFestは2008年に始まって、今回で8回目になります。
&lt;a href="http://lanyrd.com/search/?q=CakeFest"&gt;参考URL:lanyrd.com&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2008/02 フロリダ・オーランド&lt;/li&gt;
&lt;li&gt;2008/12 ブエノスアイレス（参考URLの年は間違っています）&lt;/li&gt;
&lt;li&gt;2009/07 ベルリン&lt;/li&gt;
&lt;li&gt;2010/09 シカゴ&lt;/li&gt;
&lt;li&gt;2011/09 マンチェスター&lt;/li&gt;
&lt;li&gt;2012/08 マンチェスター&lt;/li&gt;
&lt;li&gt;2013/08 サンフランシスコ&lt;/li&gt;
&lt;li&gt;2014/08 マドリッド&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;初年度を除いて、およそ1年に1回世界中からコミュニティのメンバーが集まる&lt;code&gt;お祭り&lt;/code&gt;です。&lt;/p&gt;

&lt;p&gt;2回目のブエノスアイレスを除いてアメリカとヨーロッパで開催されており、私が始めて参加した4回目のシカゴからは8月終わりor9月初めに開催されるようになりました。
コアデベロッパーは家族や彼女と来ていたりするので、夏休みも兼ねているのではないか、という&lt;code&gt;緩い&lt;/code&gt;イベントだった..だったのです。&lt;/p&gt;

&lt;p&gt;緩い理由は例えば&lt;a href="http://lanyrd.com/2012/cakefest/"&gt;2012年(マンチェスター)のスケジュール&lt;/a&gt;を見てもらえるとわかりますが、9時に始まって16時ぐらいには終了です。このときは2トラックだったこともあり、セッション数としては少なくはないのですが、泊まりのカンファレンスイベントとしては割とあっさり終了する感じです。このあとはLTやりたい人がいればやるみたいな、日本のキッチリしたイベントの仕切りやテキパキ感というよりは参加者がお茶やビールを片手に交流する時間がたっぷり取られているという感じだったのです。&lt;/p&gt;

&lt;h3&gt;2014年は違っていた&lt;/h3&gt;

&lt;p&gt;私もCFP（Call For Paper）にセッションの応募をしたのですが、落選してしまいました。
で、&lt;a href="http://lanyrd.com/2014/cakefest/"&gt;確定したスケジュール&lt;/a&gt;を見て、ビックリしたのです。
朝は9時からと例年通りですが、終わる時間が！！なんと21時ですよ。つまり12時間。これはちょっとしたPHP Matsuri状態ではないですか。&lt;/p&gt;

&lt;p&gt;今年はシングルトラックでしたが、あんまりBreakタイムがなかったので、各自の判断でカンファレンスルームの外で話したりしていた状況ではありました。&lt;/p&gt;

&lt;p&gt;なお私が知る限りのCakeFestの中では、最もイベントとしてのテキパキ感とかはあったように思います。これもコミュニティマネージャであるJames Watts氏の活躍があってこその事。CakeFestの仕切りも3回目という事でだいぶ慣れてきたのかなーとも思います。&lt;/p&gt;

&lt;h3&gt;CakePHPの中の人たち&lt;/h3&gt;

&lt;p&gt;そういえば、あまりCakePHPの中の人たちって使っていてもCakeFestに参加しないと知らないのではないかと思い、コアチームのメンバーの顔と名前が一致するように、2枚の写真で紹介します。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakefest_2014_2.png" /&gt;
&lt;a href="https://www.flickr.com/photos/afilina/sets/72157646706228796/"&gt;photo by Anna Fillina.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;左からJames Watts、Jose Gonzalez(@savant)、Larry Masters(@phpnut)（敬称略）&lt;/p&gt;

&lt;p&gt;こちらの写真は私がスペインに到着した夜の出来事なのですが、まぁお酒もだいぶ入っているところでの余興みたいな感じだったのでしょう。私はフライトの疲れでビールを1杯飲んで部屋に戻ってしまったので見ていなかったのですが、こんな感じでホテルのバースペースで盛り上がったり、そのあと朝4時まで繁華街へ飲みに行ったりしていたみたいです。
毎年朝方まで飲んでいる参加者がいるのもCakeFestの一部です（その影響か午前中はホテルの部屋から出て来ない人も多数ですがw）。&lt;/p&gt;

&lt;p&gt;で、写真の後どうなったか、というと&lt;a href="https://www.youtube.com/watch?v=M9RsahWsO2s&amp;amp;amp;feature=youtu.be"&gt;コチラの動画&lt;/a&gt;から確認できます。&lt;/p&gt;

&lt;p&gt;ここ数年はコアチームへのQ&amp;amp;Aセッションがあります。こちらでもCakePHPの中の人たちを確認することができます。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakefest_2014_3.png" /&gt;
&lt;a href="https://www.flickr.com/photos/afilina/sets/72157646706228796/"&gt;photo by Anna Fillina.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;左からMarc Ypes(@ceeram)、Mark Story、Mark Scherer(@dereuromark)、Larry Masters(@phpnut)、José L. Rodríguez(@jose&lt;em&gt;zap)、Jose Gonzalez(@savant)、Renan Gonçalves(@renan&lt;/em&gt;saddam)、James Watts（敬称略）&lt;/p&gt;

&lt;h3&gt;CakePHP1.3の終了と2系の今後&lt;/h3&gt;

&lt;p&gt;Q&amp;amp;Aセッションはカンファレンス1日目のお昼直後に実施されたのですが、午前中にMark Story氏からCakePHP3の話と、1.3のサポート終了の話があったので、その2つについて質問が集中していました。1.3のサポート終了に関しては、何とちょうど先週顧客にCakePHP1.3を使った案件の提案をしたばかりなのに、どうしたら良い？何とかならないの？！というビックリするようなQを聞きました。先日も1.3のアップデートがあったり、1.3自体非常に長い間使われているのだなぁと思いました。その後、質問をした人になんでこれから1.3使うの？と聞いたら、資産があるから、という事でした。
こちらのAは、ベストな方法はマイグレーションすることだけど、3ではなくCakePHP2にするのが良いという話と、1.3の件は通常のCakePHPとしてはムリだけど、CakeDCとして考えられなくもない。まぁビジネスだね、という回答でした。
とはいえ、たぶんCakeDCも1.3の面倒を見続けるのは現実解ではないので、マイグレーションのサポートをする事で解決をするのではないかなーと思われます。&lt;/p&gt;

&lt;p&gt;日本でもまだCakePHP1.xを使っているサイトなど残っていると思いますが、3へのジャンプは難しいと思うので、まず2系にしておくことが重要になるでしょう。
2系についてはまだ3年はサポートと今回明言されています。じゃぁまた3年後には3にしないといけないの？！という話はあるかもしれませんが、1から2系へはアップグレードシェルがあるのと、3のアップグレードシェルができたとして、2系からのアップグレードのみ対応であると推測されるので、まずは2系なのかなと思います。これは上記のコアチームのQ&amp;amp;Aでの回答からも妥当な判断と思います。&lt;/p&gt;

&lt;h3&gt;CakePHP3で気になっていたこと&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://coedo-cakephp.doorkeeper.jp/events"&gt;CakePHP3のもくもく会&lt;/a&gt;で、何度もCakePHP3を試しているのですが、昨年ビヘイビアって無くなるって言ってなかったか？と思い、ORM担当の大きいJoseこと@jose_zapに確認しました。答えとしては、いろいろ考えたけど、コールバックの関係もあって互換性を考え残すことにした。もちろんTraitにしてEventマネージャを使うアプローチは素晴らしいし、できればそちらを使ってほしいけど、コアとしてはビヘイビアも残すよ、ということでした。&lt;/p&gt;

&lt;h3&gt;恒例のリアルケーキ&lt;/h3&gt;

&lt;p&gt;&lt;img src="/images/blog/cakefest_2014_4.png" /&gt;&lt;/p&gt;

&lt;p&gt;今となっては恒例となったリアルケーキ。実はCakeFestで始めてケーキが登場したのは、2010年のシカゴだったと記憶しています。
キッカケは日本で開催されたCakePHPカンファレンス東京で、当時のCakePHP開発マネージャだった@gwoo氏を招いてCakePHP型のケーキを出したのがとてもウケが良く、それが本家でも採用されたと。CakeFestには日本コミュニティのDNAが含まれています！&lt;/p&gt;

&lt;p&gt;この直後、コアチームとして新しく入った@dereuromarkがファーストバイトならぬカップケーキ投げの手荒い歓迎を受けたり、サプライズイベントがあったり、楽しくケーキを食べながら交流を深めて解散となりました。&lt;/p&gt;

&lt;h3&gt;CakeFest2014で感じたこと&lt;/h3&gt;

&lt;p&gt;CakeFestに参加すると、良く知った常連さんと、始めての人がいて、なるべく始めて会った人と話すようにいつも心がけています。&lt;/p&gt;

&lt;p&gt;各国でのCakePHPの普及状況や、コミュニティの活動などの話を聞くのですが、ドイツから参加してきていた人の話によると、CakePHP(PHP)のイベントをやりたいけど、なかなか人が集まらなくて苦労している。日本ではどうなの？という話から、日本の状況を説明すると、とても日本のコミュニティが羨ましいという感想をもらいました。これはドイツ以外の参加者からも同様の反応をもらったのですが、まぁ日本というか東京など都市部には人が密集していてやりやすい状況なのかな、とも思います。そういった環境面やコミュニティ活動を積極的にやってくれる人がいるので都市部のエンジニアは特に恵まれた状況だと思います。もっと勉強会やイベントに出て交流しましょう！&lt;/p&gt;

&lt;p&gt;今年は(も)シングルトラックだったのでほぼ全てのセッションを見る事ができたのですが、CakePHPと関連するセッションは、コアチームに集中していて、他のセッションはPHP全般だったり、JavaScriptだったり、HTML(CSS)だったりとCakePHPに関する話題は例年以上に少なかったような気がします。
これはCakePHP2のライフサイクルがだいぶ長くなっていて新しい話題が少なめなのと、まだ3は早すぎるという状況もあったのではないかと思います。
来年はコアチーム以外からも3の話題がもっと出てくるのではないかと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://joind.in/event/view/1767"&gt;CakeFest2014のjoind.in&lt;/a&gt;にスライドのリンクがあるので、ぜひCakePHP3のセッションについては見て欲しいのと、公式のPodCastが配信されているので、そちらも聞くとCakePHP3について理解が深まると思います。&lt;/p&gt;

&lt;p&gt;CakePHPに関する話題以外で、ぜひスライドをチェックして欲しいのは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing code that lasts presented by Rafael Dohms&lt;/li&gt;
&lt;li&gt;Why You Can&amp;rsquo;t Test presented by Chris Hartjes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どちらもPHP界では有名人で、同じ内容を各国のカンファレンスで講演しているので、どこかで見ているかもしれませんが、一度はチェックしてみてください。&lt;/p&gt;

&lt;h3&gt;LTもやったし、BDDプラグインの人として声をかけられたり、交流できた&lt;/h3&gt;

&lt;p&gt;また初日のLTで&lt;a href="http://www.scribd.com/fullscreen/237573895?access_key=key-PU2ZrgYtFK3zBQXqkE2l&amp;amp;amp;allow_share=false&amp;amp;amp;escape=false&amp;amp;amp;show_recommendations=false&amp;amp;amp;view_mode=slideshow"&gt;&lt;code&gt;Data Generator for Testing CakePHP Application&lt;/code&gt;&lt;/a&gt;（いつものテストデータの作り方の英語バージョンです）をやりまして、反響もたくさんもらいました。
CakeFestのスピーカーの中には、特にCakeと関係ないけどPHPのセッションとして応募してくる人もいるので、他のフレームワークには対応しないの？とか、Fakerと連動するにはどうするの？などなど。
CakeFestではLTは当日募集で、手を挙げればもれなく喋れるので、海外カンファレンスでのプレゼン登竜門としては最適と思います。&lt;/p&gt;

&lt;p&gt;それと自分の自己紹介スライドのアイコンから、BDDプラグインの人でしょ？と声をかけられたりもして、Breakタイム少なかった割によく話したなーという印象でした。&lt;/p&gt;

&lt;p&gt;また例年以上？に日本自体に関心がある人がいて、日本語喋れるノルウェーからの参加者（漫画大好き）だったり、日本食について聞いてくる地元スペインの人だったり、3次会でカラオケ行こうと誘われたり、フクシマの話をしたり、PHP以外の話でも交流ができました。&lt;/p&gt;

&lt;p&gt;「海外のカンファレンスとか行ったことないし、大変そう」という方がほとんだと思います。私もお世辞にも英語得意でない（割と適当）けど、何とか交流できています。CakeFestであれば、ここ数年@yandoさんや私が参加していますし、行きたいと宣言すれば一緒に行く人が見つかるかもしれません。&lt;/p&gt;

&lt;p&gt;もし会社勤めのエンジニアだと休みが取れない、経費出ない、など難しい事情があるかもしれないのですが、ぜひ上司と交渉して来れるようになると良いなと思っています。参加して得られることは文章では書けないぐらい大きいです。&lt;/p&gt;

&lt;h3&gt;コミュニティマネージャからのメッセージ&lt;/h3&gt;

&lt;p&gt;最後にコミュニティマネージャであるJames Watts氏から、キーノートに関連して日本のコミュニティへメッセージをいただきましたので、動画をシェアします。
では来年のCakeFestで会いましょう！&lt;/p&gt;

&lt;p&gt;&lt;video id="video" class="vd" controls  poster="https://dl.dropboxusercontent.com/u/29781137/cakefest_2014/cakefest_2014.jpg" width="600"&gt;
&lt;source src="https://dl.dropboxusercontent.com/u/29781137/cakefest_2014/cakefest_2014.m4v"&gt;
&lt;/video&gt;&lt;/p&gt;

&lt;p&gt;最初のトラブルは、テラスの石畳と砂利の間に足を取られて転びそうになったのです&amp;hellip; &lt;/p&gt;
</content>
  </entry>
</feed>
