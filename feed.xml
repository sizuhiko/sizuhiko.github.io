<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2014-04-19T07:38:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Test the Web Forward Meetup (仮), Tokyo#2 に参加して Shadow DOM のテストを書いてきた</title>
    <link rel="alternate" href="http://blog.url.com/2014/04/19/twfm_2014_04.html"/>
    <id>http://blog.url.com/2014/04/19/twfm_2014_04.html</id>
    <published>2014-04-19T07:38:00Z</published>
    <updated>2014-04-19T17:31:21+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;html5jテスト部の活動「&lt;a href="http://html5j-testing.doorkeeper.jp/events/10161"&gt;Test the Web Forward Meetup (仮), Tokyo#2&lt;/a&gt;」に参加してきました。&lt;/p&gt;

&lt;p&gt;当日は1回目の反省をふまえて以下の仕様について実施することとなっていました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTMLのルビ（のパーサ周り）&lt;/li&gt;
&lt;li&gt;CSS Text Decoration&lt;/li&gt;
&lt;li&gt;Shadow DOM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;私は Shadow DOM を選択しました。理由はGoogle JapanのHayatoさんがSpecを書いているので、テストがマージされやすいんじゃないか？！という不純な動機と、仕様が難しいので参加者が少ないかな？という妄想からでした（ただ実際は一番人気でした！）。&lt;/p&gt;

&lt;p&gt;そもそもこの活動は何なのか？というと、&lt;code&gt;みんなでHTML5やCSS、API仕様のテストケースを書こうというミートアップです&lt;/code&gt;と書いてある通りです。
私たちWebに関わるデベロッパーであれば必ず利用するHTMLやCSS、ブラウザによって実装がマチマチでとか、IEがぁーとか言ってますよね。&lt;/p&gt;

&lt;p&gt;なぜそうなるのか？&lt;/p&gt;

&lt;p&gt;まずHTMLとかCSSはW3Cの仕様があってそれを各ブラウザベンダが実装するわけです（もちろん先に実装されているケースもあります）。ですが結果としてどのように見えるのか？という部分に関して言うと、特に&lt;code&gt;こうなるべき&lt;/code&gt;という具体的な結果が書いてある訳ではありません。そうなると各ベンダは自分の実装は正しいと思ってリリースするのですが、それぞれバラバラだったという結果が起きるのです。
そのため、W3Cではテストの充実に力を入れているのですが、現時点ではリソース不足であったり、そもそもスペックの理解不足という自体が起こります。W3Cのスペックを読んだことがあると何となく想像できるかな、と思います。
そこでTest the Web Forwardという公式イベントや、今回のようなコミュニティ主導のミートアップでテストコードを充実させようという機会が増えてきています。&lt;/p&gt;

&lt;h3&gt;テストの準備をする&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://testthewebforward.org/docs/github-101.html"&gt;Test the Web Forwardのドキュメント&lt;/a&gt;を見れば、今時のWebデベロッパーであれば問題なく環境を構築することができます。
pythonのバージョンが2.7系だったり、&lt;code&gt;pip install html5lib&lt;/code&gt; が必要なのに漏れていた（これについては今回のミートアップでPRが出されてマージされたはずです）り、ちょっと面倒なのですがまぁ問題ないでしょう。GitHub便利。そのうちVagrantファイルでも作ろうかなーと思っています。
ここまでは事前の準備としてやっておきました。&lt;/p&gt;

&lt;h3&gt;当日やったこと&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://w3c.github.io/webcomponents/spec/shadow/"&gt;W3Cのスペック&lt;/a&gt;を見ましょう。
当日はHayato Itoさんから仕様の説明を受けて進めるという流れだったのですが、それにしても仕様がむずい。
新しいテストケースはちょっと置いておき、既存のテストを流してみることにしました。すると１つエラーがあって、typoであることがわかったので&lt;a href="https://github.com/w3c/web-platform-tests/pull/861"&gt;Pull Request&lt;/a&gt;。これはすぐ取り込まれました。嬉しい！W3Cへの貢献ですよ！！&lt;/p&gt;

&lt;p&gt;続けて Fail しているテストについて、スペシャリストの方に確認して修正方針を聞いたりして、テストを黙々と書いていきます。
1日作業でしたが、2つのテスト失敗を修正してタイムアップ。&lt;/p&gt;

&lt;h3&gt;テストのやり方&lt;/h3&gt;

&lt;p&gt;テストには&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;refテスト
期待値:新しい仕様で書いたものと同じになるように既存の仕様で書いたもの、実際:新しい仕様で書いたもの、をスクリーンショットで比較する&lt;br&gt;&lt;/li&gt;
&lt;li&gt;domテスト
testharness.js という xUnit ベースのテスティングフレームワークが使える&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2通りのやり方があって、Shadow DOMはtestharness.jsでDOMのテストをする段階でした。
testharness.jsはxUnit系なんですが、equals(:actual, :expected) の記法になっていて、キモい！という話をしたら、開発者がmozilla系の方でfire方面ではそういう記述になっているという話を（FireFoxのcontributorの方から）伺うことができました。
これもミートアップでこその体験です。&lt;/p&gt;

&lt;p&gt;モダンなテストの書き方という意味では、サーバサイドスクリプトとか今時のJavaScriptのテスティングフレームワークの方がイケてる感じにできますが、これも歴史的な背景（DOMの細かい評価をするのにtestharness.jsが最適であるという理由）ということです。今後についてはわからないけど、各ブラウザベンダなどがテストするときに利用しているということで変更（例えばJasmineに変えるとか）には高い壁があるのかもしれないです。&lt;/p&gt;

&lt;h3&gt;最後に&lt;/h3&gt;

&lt;p&gt;W3Cの活動に貢献する作業は今後も続けて行きたいので、ミートアップなくてもテストコードを書き続けて行きたいとおもいました。
ただmetaデータの書き方とかちょっと特殊なところもあったので、新しくやる場合は既存のテストコードをいくつか参照して、書き方のテンプレート部分を把握した方が良いと思いました。&lt;/p&gt;

&lt;p&gt;それと今回はW3Cのテストスペシャリストとして Gérard Talbot 氏が初来日ということで基調講演を聴く事ができました。&lt;a href="http://test.csswg.org/suites/css2.1/nightly-unstable/html4/vertical-align-117a.htm"&gt;2年間かかって作ったという最高傑作テストケース&lt;/a&gt;を見てスペックのテストとは！を感じれたのも良かった。早速 Ahem フォントもインストールしました。&lt;/p&gt;

&lt;p&gt;ミートアップ終了後は懇親会もあったのですが、体調不良のため最後までは持たずに帰宅いたしました&amp;hellip;.&lt;/p&gt;

&lt;p&gt;会場を提供いただいた Adobe さん（ノベルティまでいただき感謝！）、スポンサー各社様の協力でとても楽しいイベント（部活）でした。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>CakePHP3 もくもく会#3 に参加して Bake してきた</title>
    <link rel="alternate" href="http://blog.url.com/2014/04/19/cake3_mokumoku_3.html"/>
    <id>http://blog.url.com/2014/04/19/cake3_mokumoku_3.html</id>
    <published>2014-04-19T05:04:00Z</published>
    <updated>2014-04-19T16:34:28+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;2013/4/4(金) に &lt;a href="http://www.coworking.tokyo.jp/"&gt;コワーキングスペース茅場町 Co-Edo（コエド）&lt;/a&gt; で行われた「&lt;a href="http://coedo-cakephp.doorkeeper.jp/events/10020"&gt;CakePHP3 もくもく会 #3&lt;/a&gt;」に参加しました。&lt;/p&gt;

&lt;p&gt;CakePHP3もdev preview2、せっかくの機会なので初Cake3を体験しようということです。&lt;/p&gt;

&lt;h3&gt;環境構築する&lt;/h3&gt;

&lt;p&gt;イベントページからリンクされていたCo-Edo謹製Vagrantを使っても良かったのですが、私はCakePHPのコアデベロッパも参加するコミュニティ &lt;a href="http://friendsofcake.com/"&gt;Friends Of Cake&lt;/a&gt; の &lt;a href="https://github.com/FriendsOfCake/vagrant-chef"&gt;Vagrant Chef&lt;/a&gt; を使いました。&lt;/p&gt;

&lt;p&gt;事前に用意するものは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.virtualbox.org/"&gt;Virtual Box&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です。概ね最新版で大丈夫でしょう。
ダウンロード＆インストールしたら、任意のディレクトリに先程のVagrant Chefをクローン（またはダウンロード）します。後は&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;cd vagrant-chef
vagrant up
&lt;/pre&gt;

&lt;p&gt;を実行してしばらく待ちましょう。Chefでインストールされるものは Vagrant Chef のREADMEに書いてあるので、そちらを参照してください。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;INFO: Chef Run complete in 541.542816 seconds
INFO: Running report handlers
INFO: Report handlers complete
&lt;/pre&gt;

&lt;p&gt;なメッセージが出て、コンソールが戻ってきたらインストールの完了です。
動作確認として、http://192.168.13.37/ にアクセスしてみてください。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakephp3_vagrant_chef.png" /&gt;&lt;/p&gt;

&lt;p&gt;デフォルト画面が出たら環境構築の完了です。&lt;/p&gt;

&lt;h3&gt;CakePHP3をインストールする&lt;/h3&gt;

&lt;p&gt;Vagrant ChefにはCakePHPをインストールするレシピも入っているのですが、Friends Of CakeにCakePHPの環境を作るスケルトンコマンドが別途用意されているので、レシピの編集は必要ないです。
生成したVagrant環境にログインします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;vagrant ssh
&lt;/pre&gt;

&lt;p&gt;ログイン直後&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;vagrant@precise64:/vagrant$ ls -la
total 20
drwxr-xr-x  1 vagrant vagrant  306 Apr 19 05:37 .
drwxr-xr-x 25 root    root    4096 Apr 19 05:37 ..
drwxr-xr-x  1 vagrant vagrant  102 Apr 19 05:37 app
drwxr-xr-x  1 vagrant vagrant  510 Apr 19 05:30 cookbooks
drwxr-xr-x  1 vagrant vagrant  442 Apr 19 05:30 .git
-rw-r--r--  1 vagrant vagrant   12 Apr 19 05:30 .gitignore
-rw-r--r--  1 vagrant vagrant 5489 Apr 19 05:30 README.markdown
drwxr-xr-x  1 vagrant vagrant  102 Apr 19 05:31 .vagrant
-rw-r--r--  1 vagrant vagrant 1179 Apr 19 05:30 Vagrantfile
&lt;/pre&gt;

&lt;p&gt;のようになっていて、すでにappディレクトリが存在します。ここには先程のデフォルト画面が入っているのですが、今回は新しくアプリを作成するのでappディレクトリは削除します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;rm -rf app
&lt;/pre&gt;

&lt;p&gt;環境構築でも利用した Friends Of Cake のリポジトリにはCakePHPのアプリケーションスケルトンを作成する app-template というリポジトリがあります。
すでにCakePHP3用のスケルトンも(cake3ブランチとして)用意されているので、GitHubのREADMEに書いてあるとおりのコマンドでCakePHPのアプリケーション環境を構築します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;composer -sdev create-project friendsofcake/app-template app dev-cake3
&lt;/pre&gt;

&lt;p&gt;app の部分がアプリケーション名です。Vagrant Chefを使った場合はappを指定してください。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;Do you want to remove the existing VCS (.git, .svn..) history? [Y,n]? 
&lt;/pre&gt;

&lt;p&gt;最後に上記のような確認メッセージが出てくるので、履歴が気にならなければそのままEnterを押して終了します。
インストールの確認として、http://192.168.13.37/ にアクセスしてみてください。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakephp3_installed.png" /&gt;&lt;/p&gt;

&lt;p&gt;おなじみのCakePHP画面が表示されます。tmpディレクトリが書き込みできないと警告されます。これはwebサーバのデフォルトuserがvagrantでなくwww-dataであるためですが、開発環境用なの気にせず&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;sudo chmod -R 777 app/tmp
&lt;/pre&gt;

&lt;p&gt;などのコマンドで権限を書き換えてください。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakephp3_tmp_ok.png" /&gt;&lt;/p&gt;

&lt;h3&gt;データベースを設定する&lt;/h3&gt;

&lt;p&gt;vagrant-chefを使うとデフォルトで database&lt;em&gt;name, test&lt;/em&gt;database_name というデータベースが生成されています。
ただ文字コードの指定などの問題もあると思うので、ここは自分でデータベースを作成します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;mysql -u root -p
&lt;/pre&gt;

&lt;p&gt;vagrant-chefのMySQL rootパスワードは、vagrant-chefのREADMEを参照ください（現時点ではbananasです）。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;mysql&amp;gt; CREATE DATABASE cake3_mokumoku CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
mysql&amp;gt; CREATE DATABASE test_cake3_mokumoku CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
&lt;/pre&gt;

&lt;p&gt;続けておなじみのpostsテーブルを作成します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;mysql&amp;gt; use cake3_mokumoku;
mysql&amp;gt; CREATE TABLE `posts` (
          `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
          `title` varchar(50) DEFAULT NULL,
          `body` text,
          `created` datetime DEFAULT NULL,
          `modified` datetime DEFAULT NULL,
          PRIMARY KEY (`id`)
        ) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;
&lt;/pre&gt;

&lt;p&gt;app-templateで作成したCakePHPアプリケーションは、&lt;a href="https://github.com/josegonzalez/php-dotenv"&gt;php-dotenv&lt;/a&gt;というライブラリを使って環境設定できるようになっています。
&lt;code&gt;app/App/Config/.env.default&lt;/code&gt; ファイルをコピーして &lt;code&gt;app/App/Config/.env&lt;/code&gt;ファイルを作成します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;// app/App/Config/.env
export DATABASE_URL="mysql://my_app:secret@localhost/my_app?encoding=utf8"
export DATABASE_TEST_URL="mysql://my_app:secret@localhost/test_myapp?encoding=utf8"
&lt;/pre&gt;

&lt;p&gt;の部分を&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;// mysql://ユーザ名:パスワード@URL/データベース名
export CAKEDATABASE_URL="mysql://root:bananas@localhost/cake3_mokumoku?encoding=utf8"
export CAKEDATABASE_TEST_URL="mysql://root:bananas@localhost/test_cake3_mokumoku?encoding=utf8"
&lt;/pre&gt;

&lt;p&gt;のように書き換えます。データベースの詳しい設定方法は &lt;a href="https://github.com/AD7six/php-dsn"&gt;AD7six/php-dsn&lt;/a&gt;を参照ください。
exportの名前を変更しているのは、nginxのfastcgiパラメータとしてvagrantインストール時に&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;fastcgi_param DATABASE_URL          "mysql://root:&amp;lt;%= node[:mysql][:server_root_password] %&amp;gt;@localhost/database_name?encoding=utf8";
fastcgi_param DATABASE_TEST_URL     "mysql://root:&amp;lt;%= node[:mysql][:server_root_password] %&amp;gt;@localhost/test_database_name?encoding=utf8";
&lt;/pre&gt;

&lt;p&gt;のような指定がされているため、設定値が重複してしまいfastcgi側が優先される仕組みとなっています。
このため異なる名前に変更しておきます。
合わせて、app.phpでDATABASE&lt;em&gt;URLを利用している箇所もCAKEDATABASE&lt;/em&gt;URLに変更します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;// app/Config/app.php#L211-
/**
 * Connection information used by the ORM to connect
 * to your application's datastores.
 */
    'Datasources' =&amp;gt; [
        'default' =&amp;gt; DbDsn::parse(env('CAKEDATABASE_URL')),

        /**
         * The test connection is used during the test suite.
         */
        'test' =&amp;gt; DbDsn::parse(env('CAKEDATABASE_TEST_URL'))
    ],
&lt;/pre&gt;

&lt;h3&gt;Cakeシェルを利用する&lt;/h3&gt;

&lt;p&gt;コンソールから&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;cd app/App
Console/cake -h
&lt;/pre&gt;

&lt;p&gt;とヘルプを表示してみたいのですが、もし&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;Exception: Shell class for "-working" could not be found. in [/vagrant/app/vendor/cakephp/cakephp/src/Console/ShellDispatcher.php, line 178]
&lt;/pre&gt;

&lt;p&gt;というエラーが表示されたら、app/App/Console/cake を編集して&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;exec php -q "$CONSOLE"/cake.php -working "$APP" "$@"
&lt;/pre&gt;

&lt;p&gt;の行を&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;exec php -q "$CONSOLE"/cake.php "$@"
&lt;/pre&gt;

&lt;p&gt;のように変更してください。現時点では -working オプションがあるとうまく動作しないためです。
うまく動作した場合は&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;Console/cake -h

Welcome to CakePHP v3.0.0-dev2 Console
---------------------------------------------------------------
App : App
Path: /vagrant/app/App/
---------------------------------------------------------------
Current Paths:

&lt;span class="k"&gt;*&lt;/span&gt; app: App
&lt;span class="k"&gt;*&lt;/span&gt; root: /vagrant/app
&lt;span class="k"&gt;*&lt;/span&gt; core: /vagrant/app/vendor/cakephp/cakephp

Available Shells:

&lt;span class="o"&gt;[&lt;/span&gt;CORE] bake, i18n, server, &lt;span class="nb"&gt;test&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;app] console

To run an app or core &lt;span class="nb"&gt;command&lt;/span&gt;, &lt;span class="nb"&gt;type &lt;/span&gt;cake shell_name &lt;span class="o"&gt;[&lt;/span&gt;args]
To run a plugin &lt;span class="nb"&gt;command&lt;/span&gt;, &lt;span class="nb"&gt;type &lt;/span&gt;cake Plugin.shell_name &lt;span class="o"&gt;[&lt;/span&gt;args]
To get &lt;span class="nb"&gt;help &lt;/span&gt;on a specific &lt;span class="nb"&gt;command&lt;/span&gt;, &lt;span class="nb"&gt;type &lt;/span&gt;cake shell_name --help
&lt;/pre&gt;

&lt;p&gt;のように表示されるはずです。&lt;/p&gt;

&lt;h3&gt;Bakeする&lt;/h3&gt;

&lt;p&gt;では早速Bakeしましょう&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$ Console/cake bake model Posts

Welcome to CakePHP v3.0.0-dev2 Console
---------------------------------------------------------------
App : App
Path: /vagrant/app/App/
---------------------------------------------------------------
One moment while associations are detected.

Baking table class for Posts...

Creating file /vagrant/app/App/Model/Table/PostsTable.php
Wrote `/vagrant/app/App/Model/Table/PostsTable.php`

Baking entity class for Post...

Creating file /vagrant/app/App/Model/Entity/Post.php
Wrote `/vagrant/app/App/Model/Entity/Post.php`

Baking test fixture for Posts...

Creating file /vagrant/app/Test/Fixture/PostFixture.php
Wrote `/vagrant/app/Test/Fixture/PostFixture.php`

Baking test case for App\Model\Table\PostsTable ...

Creating file /vagrant/app/Test/TestCase/Model/Table/PostsTableTest.php
Wrote `/vagrant/app/Test/TestCase/Model/Table/PostsTableTest.php`
&lt;/pre&gt;

&lt;p&gt;うまく動きます！！&lt;/p&gt;

&lt;p&gt;続けてコントローラとビューも&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$ Console/cake bake controller Posts
$ Console/cake bake view Posts
&lt;/pre&gt;

&lt;p&gt;で生成します。&lt;/p&gt;

&lt;p&gt;一通りbakeしたら、http://192.168.13.37/posts/ にアクセスしてみます。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakephp3_baked_posts.png" /&gt;&lt;/p&gt;

&lt;p&gt;おなじみのBake画面が表示されます。追加、変更、削除などもうまく動作するようです（執筆時においては）。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakephp3_baked_saved.png" /&gt;&lt;/p&gt;

&lt;h3&gt;最後に&lt;/h3&gt;

&lt;p&gt;このブログはもくもく会から2週間ぐらい経過してしまいましたが、今回再度新しい環境を作って試しています。
もくもく会のときも同様の手順で進めていたのですが、いくらかbake周辺でコードの変更があったようで、うまく動いていた箇所が動かなくなっていたり、動かなかった箇所が動いていたりします。
開発者用のプレビュー2ということで、今後もコードは変わって行くと思いますが、Bakeが動く事で取り急ぎ動作するプログラムのベースは作れるようになっています。
実際にアプリケーションを作ってみてCakePHP3の新機能について感想を書いてみたり、要望を出してみたりすることも実リリースまでの期間としては大切なことだと思うので、今回簡単ではありますがブログとして公開してみました。&lt;/p&gt;

&lt;p&gt;Co-Edo では今後も CakePHP3もくもく会が開かれると思うので、イベントページをチェックしておくと良いと思います。私も可能な範囲で参加していこうと思っています。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Composerのautoloadを使いこなす</title>
    <link rel="alternate" href="http://blog.url.com/2014/03/30/composer-autoload.html"/>
    <id>http://blog.url.com/2014/03/30/composer-autoload.html</id>
    <published>2014-03-30T09:22:00Z</published>
    <updated>2014-03-30T18:41:51+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Composerにはautoloadを自動生成する機能があり、これを利用するとrequire_onceなどを使わなくとも自動的にソースコードがロードされます。言葉のとおりautoloadですね。&lt;/p&gt;

&lt;p&gt;例えばCakePHPでは&lt;code&gt;App::uses()&lt;/code&gt;という記述で利用するクラスがどこにあるのか識別して、クラスをロードできるようにするのですが、これを使わなくても Composer のautoload機能を使うとクラスが利用可能になります。&lt;/p&gt;

&lt;p&gt;app/composer.json に以下のような定義を記述してみましょう。&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"autoload"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"classmap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Model"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Controller"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;ここで &lt;code&gt;autoloadだけ&lt;/code&gt; を更新するコマンドを実行します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;composer dumpautoload
&lt;/pre&gt;

&lt;p&gt;コマンド名からはちょっと想像がつきにくいのですが、これを実行すると &lt;code&gt;Generating autoload files&lt;/code&gt; という結果が表示されてautoload定義が更新されます。&lt;/p&gt;
&lt;pre class="highlight php"&gt;// app/Vendor/composer/autoload_classmap.php
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="c1"&gt;// autoload_classmap.php @generated by Composer
&lt;/span&gt;
&lt;span class="nv"&gt;$vendorDir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;__FILE__&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nv"&gt;$baseDir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$vendorDir&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;'AppController'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$baseDir&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/Controller/AppController.php'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'AppModel'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$baseDir&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/Model/AppModel.php'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'PagesController'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$baseDir&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/Controller/PagesController.php'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'Post'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$baseDir&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/Model/Post.php'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'PostsController'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$baseDir&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/Controller/PostsController.php'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;今回は予めpostsテーブルからbakeしてPostモデルとPostsコントローラを生成しておきました。
こうすると、App::uses()を記述しなくても、composerのautoloadがクラス名からPHPファイルを自動解決してくれます。App::uses()の記述が多過ぎてコードの見通しが悪い場合などに利用を検討されてはいかがでしょうか？&lt;/p&gt;

&lt;p&gt;この他にもComposerのautoload機能は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PSR-4&lt;/li&gt;
&lt;li&gt;PSR-0&lt;/li&gt;
&lt;li&gt;Files（ファイルを直接指定できる）&lt;/li&gt;
&lt;li&gt;include-path(どうしてもphp.ini的なincludeパスで解決しなくてはならない時のためにある)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったパス解決方法を用意していますので、namespaceが入ったものなどのサポートも万全です。&lt;/p&gt;

&lt;p&gt;詳しくは &lt;a href="https://getcomposer.org/doc/04-schema.md#autoload"&gt;Composerの公式ドキュメントのautoload&lt;/a&gt;を参照ください。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>テスト駆動web開発勉強会 Vol.1で発表しました</title>
    <link rel="alternate" href="http://blog.url.com/2014/03/22/web-testing-2014.html"/>
    <id>http://blog.url.com/2014/03/22/web-testing-2014.html</id>
    <published>2014-03-22T06:24:00Z</published>
    <updated>2014-03-22T16:17:20+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;2014/3/18に&lt;a href="http://blog.coworking.tokyo.jp/"&gt;コワーキングスペース茅場町Co-Edo&lt;/a&gt;で開催された「&lt;a href="http://tdd-web.doorkeeper.jp/events/9439"&gt;テスト駆動web開発勉強会 Vol.1&lt;/a&gt;」で「Webアプリケーションテスト手法2014」の発表をしました。&lt;/p&gt;

&lt;p&gt;第一回目ということと、1時間枠と限られた時間の中でCakePHPとJavaScriptについてのテストの話をしたので、ざっくりした内容となっています。&lt;/p&gt;

&lt;p&gt;今後ハンズオンなども計画しているようなので、DoorKeeperのページをチェックしておくと良いかなーと思います。
また当日は「&lt;a href="https://japheego.jp/"&gt;Java,PHPエンジニアの派遣、求人を探すならJapheego（ジャフィーゴ）&lt;/a&gt;」さんに懇親会スポンサーになっていただき、美味いビールとSUBWAYのサンドイッチをいただきました。感謝!
勉強会の懇親会はピザが多いのですが、連続すると飽きるのでたまには&lt;a href="http://demae-can.com/shop/menu/3007411/"&gt;SUBWAYのデリバリー&lt;/a&gt;とか良いと思いますよ！（SUBWAY大好きです）&lt;/p&gt;

&lt;div id="file_embed"&gt;
    &lt;div id="embedded_doc"&gt;&lt;p class="no_javascript"&gt;To see files inline you need to enable JavaScript.&lt;br /&gt;Yahoo has some &lt;a href="http://help.yahoo.com/l/us/yahoo/help/faq/browsers/browsers-63474.html" target="_blank"&gt;instructions for enabling JavaScript&lt;/a&gt; if you&amp;rsquo;re unsure how to do it.&lt;/p&gt;&lt;/div&gt;

    &lt;script type="text/javascript"&gt;
    var scribd_doc = scribd.Document.getDoc(213088053, 'key-c8og2igawuh9o7wx4j7');

    var onDocReady = function(e){
        // scribd_doc.api.setPage(3);
    }

    scribd_doc.addParam('jsapi_version', 2);
    scribd_doc.addEventListener('docReady', onDocReady);
    scribd_doc.addParam('height', 494);
    scribd_doc.addParam('width', 600);
    scribd_doc.write('embedded_doc');
    &lt;/script&gt;

    &lt;p class="download"&gt;&lt;a href="http://twileshare.com/uploads/WebTest201403_pub.pdf" class="big_green_button_link" title="Filename: WebTest201403_pub.pdf"&gt;Download this file&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;最後に、当日紹介したサンプルのCakePHPテストコードを掲載しておきます。&lt;/p&gt;

&lt;h5&gt;モデルのテスト例：&lt;/h5&gt;
&lt;pre class="highlight php"&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostTest&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;CakeTestCase&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nv"&gt;$fixture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'app.Post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'app.Comment'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ClassRegistry&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Post'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getMockForModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Post'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;getMockForModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'save'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="err"&gt;タイトルがない場合はバリデーションエラーになること&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="err"&gt;データベースへの保存に失敗した場合は&lt;/span&gt;&lt;span class="nx"&gt;false&lt;/span&gt;&lt;span class="err"&gt;が戻ること&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="err"&gt;データベースへの保存に成功した場合は&lt;/span&gt;&lt;span class="nx"&gt;true&lt;/span&gt;&lt;span class="err"&gt;が戻ること&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="err"&gt;データベースに新規登録できること&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;モデルの初期化方法には3つのやり方があり、通常は&lt;code&gt;ClassRegistry::init()&lt;/code&gt;で良いのですが、モデルをモックしたい場合は&lt;code&gt;getMockForModel()&lt;/code&gt;というCakeTestCaseが用意してくれているモデル専用のモックジェネレータを使います。第二引数にメソッドの配列を指定するとパーシャルモックとなり、特定のメソッドのみモックします。&lt;/p&gt;

&lt;h5&gt;コントローラのテスト例:&lt;/h5&gt;
&lt;pre class="highlight php"&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostsControllerTest&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;ControllerTestCase&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Posts'&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;
            &lt;span class="s1"&gt;'components'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'Session'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'RequestHandler'&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'isPost'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'models'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'Post'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'findById'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'delete'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'methods'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'redirect'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'render'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="sd"&gt;/**
     * @expectedException NotFoundException
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="err"&gt;存在しない記事を表示すると&lt;/span&gt;&lt;span class="nx"&gt;NotFound&lt;/span&gt;&lt;span class="err"&gt;例外になること&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;testAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/posts/view/999'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="sd"&gt;/**
     * @expectedException BadRequestException
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="err"&gt;保存が&lt;/span&gt;&lt;span class="nx"&gt;POST&lt;/span&gt;&lt;span class="err"&gt;以外で呼び出されたら&lt;/span&gt;&lt;span class="nx"&gt;BadResuest&lt;/span&gt;&lt;span class="err"&gt;例外になること&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;testAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/posts/save/1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'method'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'get'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="err"&gt;削除が成功したら&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="err"&gt;にリダイレクトする&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;expects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;once&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'delete'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;will&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;returnValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;expects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;once&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'redirect'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'index'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;testAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/posts/delete/1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'method'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'delete'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="err"&gt;新しいトピックを追加できたら画面にメッセージが戻ること&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;コントローラのテストをするとき、testActionメソッドを呼び出すわけですが、そのときコントローラ自体をモックするには&lt;code&gt;ControllerTestCase&lt;/code&gt;が用意してくれているコントローラ専用のモックジェネレータである&lt;code&gt;generate()&lt;/code&gt;を利用します。generateで作成したインスタンスをテストケースクラスの&lt;code&gt;controller&lt;/code&gt;メンバ変数にセットすることでControllerTestCaseがURLからディスパッチするときに、このモックオブジェクトを利用してくれます。&lt;/p&gt;

&lt;p&gt;コントローラから依存関係にある、コンポーネント、モデルについてそれぞれサンプルのようにモックでき、コントローラ自体のメソッドも&lt;code&gt;methods&lt;/code&gt;に列挙することでモックできます。例えば&lt;code&gt;redirect()&lt;/code&gt;や&lt;code&gt;render()&lt;/code&gt;などがよく使われると思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>CakePHPで動的にプレフィックスルーティングを追加したときに気をつけること</title>
    <link rel="alternate" href="http://blog.url.com/2014/03/08/cakephp-addprefix-here-problem.html"/>
    <id>http://blog.url.com/2014/03/08/cakephp-addprefix-here-problem.html</id>
    <published>2014-03-08T08:04:00Z</published>
    <updated>2014-03-08T18:10:44+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;!-- more --&gt;

&lt;p&gt;あるURLや特定のパラメータ、ユーザでアクセスされたとき、プレフィックスルーティングを付けたかったので、動的に付与したらハマったので小ネタを書いておきます。&lt;/p&gt;

&lt;h3&gt;動的にプレフィックスルーティングを追加するには&lt;/h3&gt;

&lt;p&gt;公式ドキュメントの解説のとおり、&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;// routes.php
Router::connect(
    "/site-proxy/:controller",
    array('action' =&amp;gt; 'index', 'prefix' =&amp;gt; 'site-proxy', 'site-proxy' =&amp;gt; true)
);

// core.phpなど
Configure::write('Routing.prefixes', array('site-proxy'));
&lt;/pre&gt;

&lt;p&gt;のように記述します。&lt;/p&gt;

&lt;p&gt;RouterTest.phpのテストコードを見たら&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$request = new CakeRequest();
$request-&amp;gt;addParams(array(
    'controller' =&amp;gt; 'registrations', 'action' =&amp;gt; 'admin_index',
    'plugin' =&amp;gt; null, 'prefix' =&amp;gt; 'admin', 'admin' =&amp;gt; true,
    'ext' =&amp;gt; 'html'
));
&lt;/pre&gt;

&lt;p&gt;みたいなコードがあったので、CakeRequest::addParams() を使って追加できることがわかります。&lt;/p&gt;

&lt;p&gt;実際コントローラで&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;$this-&amp;gt;request-&amp;gt;addParams(['prefix' =&amp;gt; 'site-proxy', 'site-proxy' =&amp;gt; true]);
&lt;/pre&gt;

&lt;p&gt;みたいに書くと、View上で $this-&amp;gt;html-&amp;gt;link() などで出力されるURLにプレフィックスルーティングが追加されます。&lt;/p&gt;

&lt;h3&gt;ハマりポイント&lt;/h3&gt;

&lt;p&gt;View上でフォームを作成するときに&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;echo $this-&amp;gt;Form-&amp;gt;create('Post');
&lt;/pre&gt;

&lt;p&gt;のように書くと思うのですが、このようにモデル名だけが指定されているときCakePHPではどのようにURLが生成されるか、というと&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;// FormHelper::create() L367付近
if ($options['action'] === null &amp;amp;&amp;amp; $options['url'] === null) {
    $options['action'] = $this-&amp;gt;request-&amp;gt;here(false);
} elseif (empty($options['url']) || is_array($options['url'])) {
&lt;/pre&gt;

&lt;p&gt;URLというオプションを指定しない場合は、 action は CakeRequest::here() の値になることがわかります。&lt;/p&gt;

&lt;p&gt;で、CakeRequest::here() とはどんなコードか見てみると&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;public function here($base = true) {
    $url = $this-&amp;gt;here;
    if (!empty($this-&amp;gt;query)) {
        $url .= '?' . http_build_query($this-&amp;gt;query, null, '&amp;amp;');
    }
    if (!$base) {
        $url = preg_replace('/^' . preg_quote($this-&amp;gt;base, '/') . '/', '', $url, 1);
    }
    return $url;
}
&lt;/pre&gt;

&lt;p&gt;のようになっていて、要は現在のURL（$this-&amp;gt;query）から再生成されるだけです。リクエストに入っているプレフィックスルーティングの設定は参照されず、プレフィックスなしのURLがformタグのactionに入ってしまいます。&lt;/p&gt;

&lt;h3&gt;まとめ&lt;/h3&gt;

&lt;p&gt;解決方法としては&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Form::create() で &lt;code&gt;url&lt;/code&gt; オプションを追加する&lt;/li&gt;
&lt;li&gt;&lt;p&gt;addParams するときに here を変更する&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;// 例）
$request-&amp;gt;addParams(array(
    'admin' =&amp;gt; true,
    'prefix' =&amp;gt; 'admin',
))-&amp;gt;addPaths(array(
    'here' =&amp;gt; '/admin/this/interesting/index',
))
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あたりが良さそうです。まぁ動的にプレフィックス付けるなんてあんまりやらないのかもしれないですが、何かの参考になれば&amp;hellip;    &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>VagrantでComposerからPHPUnitをインストールするときに注意したいこと</title>
    <link rel="alternate" href="http://blog.url.com/2014/03/08/composer-phpunit-windows-vagrant.html"/>
    <id>http://blog.url.com/2014/03/08/composer-phpunit-windows-vagrant.html</id>
    <published>2014-03-08T07:12:00Z</published>
    <updated>2014-03-08T18:10:40+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;!-- more --&gt;

&lt;p&gt;現在以下のような環境を設置して開発をしています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ホストOS: Windows7 &lt;/li&gt;
&lt;li&gt;仮想環境: Vagrant + VirtualBox&lt;/li&gt;
&lt;li&gt;ゲストOS: CentOS 6.4&lt;/li&gt;
&lt;li&gt;開発環境: Apache, PHP, MySQL, git, composer, CakePHP, Bdd,  &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;事件その1: Bddプラグインがインストールできなくなった&lt;/h3&gt;

&lt;p&gt;ある日、新しくcomposer installで環境を作っていた人が「Bddプラグインがうまくインストールできないんですけど&amp;hellip;」
という事で調べていたら Bddプラグインから依存関係にあったライブラリが行方不明になっていました。&lt;/p&gt;

&lt;p&gt;それは phpunit/Object_Freezer です。以前はpearにあって、あるときからgithubに移行していたはずなのに、どこにも痕跡を残さず消滅していました。
で、どこで使っているかというと、Bddプラグインの単体テストモジュールにあたるSpec-PHPです。
現在は Spec-PHP に同梱する形で解決しているのですが、以前はcomposer.jsonに&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;"pear-phpunit/Object_Freezer": "*"
&lt;/pre&gt;

&lt;p&gt;のように指定していました。ちょうど金曜日だったので、週末にこれらを解決してBddプラグインがうまくイントールできるようになった（私の自宅Mac OSX環境+BddExampleAppで確認）と安心して月曜日出社したのです。&lt;/p&gt;

&lt;h3&gt;事件その2: PHPUnitがインストールできない!&lt;/h3&gt;

&lt;p&gt;で、Vagrant環境で更新してみたら&amp;hellip;.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;composer update sizuhiko/Bdd
&lt;/pre&gt;

&lt;p&gt;失敗&amp;hellip;.&lt;/p&gt;

&lt;p&gt;しかも全然関係ないところ PHPUnit のインストールで失敗するよ！
ちょうどその週末にPHPUnit4.0のコードがGitHubのデフォルトになりはじめたあたりでした。&lt;/p&gt;

&lt;p&gt;でcomposer.jsonにはPHPUnitの記述が&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;"phpunit/phpunit": "3.7.*"
&lt;/pre&gt;

&lt;p&gt;のように入っています。一見PHPUnit4をインストールするわけではないので関係なさそうですが、 &lt;code&gt;composer install&lt;/code&gt; を実行すると&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;.....
  - Installing phpunit/php-token-stream (dev-master 292f4d5)
    Cloning 292f4d5772dad5a12775be69f4a8dd663b20f103

  - Installing phpunit/php-file-iterator (dev-master acd6903)
    Cloning acd690379117b042d1c8af1fafd61bde001bf6bb

  - Installing phpunit/php-code-coverage (1.2.x-dev 3a60a66)
    Cloning 3a60a660998e8d41d5ea81ff8d96ead546bce150

[RuntimeException]
Failed to execute git checkout '3a60a660998e8d41d5ea81ff8d96ead546bce150' &amp;amp;
&amp;amp; git reset -- hard '3a60a660998e8d41d5ea81ff8d96ead546bce150'

error: Untracked working tree file 'Tests/PHP/CodeCoverage/FilterTest,php'
would be overwritten by merge.
&lt;/pre&gt;

&lt;p&gt;のようにエラーになります。&lt;/p&gt;

&lt;h3&gt;事件その3: Issueが光の速さで取り消される&lt;/h3&gt;

&lt;p&gt;ともかく事は重大そうなので、PHPUnitにIssue登録した方が良いかなと思ったので、投稿したところ、ものの数秒でそれはcomposerとか環境の問題でPHPUnitじゃないよ、と返ってきました。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/sebastianbergmann/phpunit/issues/1144"&gt;Can&amp;rsquo;t install 3.7.x to Linux environment by composer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ちょっと慌てていたので、あまり確認しなかったのも良くないなと思い、ここから検証作業の開始です。&lt;/p&gt;

&lt;h3&gt;原因を調べてみた&lt;/h3&gt;

&lt;p&gt;まず、その週末にPHPUnitのgithubを見たところで、デフォルトブランチ(master)が4.0系になっているよ、という事に気がついていました。&lt;/p&gt;

&lt;p&gt;ここで composer がどのようにライブラリを取得するか考えてみたところ、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;packagist からリポジトリ情報をダウンロード&lt;/li&gt;
&lt;li&gt;phpunit/phpunit と一致するソースコードリポジトリからダウンロード（この場合はgithub）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone git@github.com:sebastianbergmann/phpunit.git&lt;/code&gt; が実行される&lt;/li&gt;
&lt;li&gt;リリースを指定しているので一致するタグがチェックアウトされる &lt;code&gt;git checkout ....&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この最後のステップで「Untracked working tree file」になり失敗するのです。&lt;/p&gt;

&lt;p&gt;PHPUnitのリポジトリを見てみると、3系まではディレクトリ名が Tests だったのですが、 4系では tests のように小文字に変更となっています。大文字、小文字問題か！と意気たったのが、先程の Issue なわけですが。&lt;/p&gt;

&lt;p&gt;自分の環境だけかなーと思って、隣の人にちょっとインストールしてみてもらえないか頼んでみたところ、成功&amp;hellip;. えぇぇー！&lt;/p&gt;

&lt;p&gt;その環境は Vagrant上のCentOSでなく、素のWindowsでした。
何かがおかしい&amp;hellip;.&lt;/p&gt;

&lt;p&gt;そこで偶然なぜか思ったのが、とりあえずディレクトリ変えてみるか、という事。とりわけ何か理由があった訳でなくたまたまそう思っただけなのです。&lt;/p&gt;

&lt;p&gt;composer update （この日は何度実行したろう&amp;hellip;.）  &amp;hellip;&amp;hellip; 成功した！！！！でも、なんで？！&lt;/p&gt;

&lt;h3&gt;違いに悩むと&amp;hellip;&lt;/h3&gt;

&lt;p&gt;成功したところ：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;素のWindows&lt;/li&gt;
&lt;li&gt;Vagrant仮想環境内の /tmp/work/app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;失敗したところ：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vagrantのsync&lt;em&gt;folderである /var/www/html/your&lt;/em&gt;app/app (CentOSから見えるディレクトリ)
windows上だと c:¥develop¥your_app¥app みたいなところ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もしかしてVagrantでマウントしているWindowsディスク上だと大文字、小文字の変更をトレースできなくなるのでは！！&lt;/p&gt;

&lt;p&gt;という結論に至り、他の人で同様にVagrantのsync_folder環境で試したらダメでした。&lt;/p&gt;

&lt;h3&gt;まとめ&lt;/h3&gt;

&lt;p&gt;ホストがwindowsでゲストがLinuxということはあると思うのですが、ディスク同期してそこにソースコードを置いてエディタはホストOS上で実行は仮想環境上みたいな開発するのは今後も増えてくると思います。
その中で今回のような事象に陥ることは composer + PHPUnit に限らず起きそうだなと思いました。&lt;/p&gt;

&lt;p&gt;上記のような &lt;code&gt;Failed to execute git checkout ...&lt;/code&gt; エラーが出た時に、あぁそういう事かと心構えができていれば慌てず、一旦ホストOS側で作業するとか、仮想環境上のsync_folder以外で作業するなどやりようがあるかな、と思います。&lt;/p&gt;

&lt;p&gt;まぁ慌てず騒がず、落ち着いて対応しましょうという良い教訓になりました。twitterなどでお騒がせしてすみませんでした&amp;hellip;&lt;/p&gt;
</content>
  </entry>
</feed>
