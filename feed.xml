<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2015-06-14T04:44:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>CakeFest2015に参加してきた</title>
    <link rel="alternate" href="http://blog.url.com/2015/06/14/cakefest2015.html"/>
    <id>http://blog.url.com/2015/06/14/cakefest2015.html</id>
    <published>2015-06-14T04:44:00Z</published>
    <updated>2015-06-14T15:29:38+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="/images/blog/cakefest2015.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;今年はCakePHP生誕10周年ということもあり、かねてよりアニバーサリーCakeFestとも言われていました。&lt;/p&gt;

&lt;p&gt;開催場所は世界一の都市ニューヨークです。
私個人でも初のニューヨークです。&lt;/p&gt;

&lt;h3&gt;今年の第一印象&lt;/h3&gt;

&lt;p&gt;初参加が多い。CakeFestでは毎年会う馴染みの人もいるのですが、今年は特に初参加が多かったようです。
参加者が多い。さすが10周年というべきか、ニューヨークなのでアメリカの人が多かったようです。&lt;/p&gt;

&lt;h3&gt;印象に残ったセッション&lt;/h3&gt;

&lt;p&gt;昨年までと同様に、CakePHPに関する主なセッションはコアチームから、その他Webに関するトピックをCFPで通ったスピーカーからという流れでした。
今年はコミュニティマネージャのJamesが急に来れなくなってしまい、イベントの仕切りに不安を覚えるスタートだったのですが、Larryが八面六臂の働きで素晴らしいCakeFestになりました。LarryがLTのタイムキーパーやったり、抽選会の司会やったり、それはそれは大活躍でした。&lt;/p&gt;

&lt;p&gt;コアチームの中でも&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mark Storyのセッション &lt;a href="http://www.slideshare.net/markstory/cakephp-30-and-beyond"&gt;CakePHP 3.0.0 and beyond (Conference)&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Jose Lorenzo Rodriguezのセッション &lt;a href="http://www.slideshare.net/josezap1/agile-database-access"&gt;Agile Database Access with CakePHP 3 (Conference)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;についてはCakePHPを利用する人には一読を薦める内容です。&lt;/p&gt;

&lt;h4&gt;Mark Storyのセッション&lt;/h4&gt;

&lt;p&gt;とは言えMarkのスライドはいつもの通りお題しか書いていないので、少し詳細にふれておきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CakePHP3の開発期間3年はとても長かった&lt;/li&gt;
&lt;li&gt;周辺の変化

&lt;ul&gt;
&lt;li&gt;PHPのバージョンも変わったし、機能も変わった

&lt;ul&gt;
&lt;li&gt;3年前のPHPは5.4.4(Released: 14 June 2012)あたりです。&lt;/li&gt;
&lt;li&gt;現在は5.6.9で、その間にはジェネレータや可変引数などが導入されました。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;他のフレームワークの流れも変わった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CakePHP3は2ヶ月で8万ダウンロードされた。すごいね。&lt;/li&gt;
&lt;li&gt;今後のバージョンの話（詳しくは&lt;a href="https://github.com/cakephp/cakephp/wiki"&gt;githubのロードマップ&lt;/a&gt;を見てね）

&lt;ul&gt;
&lt;li&gt;PSR-7対応は3.2の予定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;大きく変わったところ

&lt;ul&gt;
&lt;li&gt;Mailers：メール送信がこれまでよりも簡単になる&lt;/li&gt;
&lt;li&gt;CLI：出力フォーマットの機能が増える。例えばプログレスバーとか簡単に出せるようになる&lt;/li&gt;
&lt;li&gt;ORM：Joseが明日話すけど、関連のロードとかマッチングクエリが書けるようになるよ&lt;/li&gt;
&lt;li&gt;ElasticSearch：ORMと似た呼び出し方法が使えるようになる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;今後注力していくところ

&lt;ul&gt;
&lt;li&gt;プラグインのリリース&lt;/li&gt;
&lt;li&gt;3.x系の開発

&lt;ul&gt;
&lt;li&gt;これにより2系については3からのバックポートが中心となる&lt;/li&gt;
&lt;li&gt;3.x内での互換性は重視している&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PHP7&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Jose Lorenzo Rodriguezのセッション&lt;/h4&gt;

&lt;p&gt;Joseのセッションはコード多めで、解説だけではわかりづらいと思うのでサンプルコードが提供されています。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/lorenzo/cakephp3-advanced-examples"&gt;サンプルコード::github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;スライドの最初に出てくる3つのタイプのORM&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;いらっとする&lt;/li&gt;
&lt;li&gt;おもちゃみたいな&lt;/li&gt;
&lt;li&gt;流行の（通の）&lt;/li&gt;
&lt;li&gt;すばらしい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もちろんCakePHP3のORMは&lt;code&gt;すばらしい&lt;/code&gt;ものだよ。という流れで掴みはOKな展開。ちなみにQ&amp;amp;AでDoctrineは？という質問に「Hipster」と即座に回答していました。
ちなみに日本だとAgileはアジャイルと発音するけど、Joseのセッションではずっとエイジールと聞こえていた。&lt;/p&gt;

&lt;p&gt;スライドやサンプルを見てもらえると、CakePHP3のORMがかなり強力になっているのがわかると思います。
特に気になったのは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;タイプヒント&lt;/li&gt;
&lt;li&gt;カスタムファインダー&lt;/li&gt;
&lt;li&gt;集合検索&lt;/li&gt;
&lt;li&gt;多重階層の集合検索&lt;/li&gt;
&lt;li&gt;他のDBへのアソシエーション定義&lt;/li&gt;
&lt;li&gt;バーチャルフィールド&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あたりです。サンプルを使って実際に動かしてみるのが良いですね。まだ全部試せていないけど、CakePHP3もくもく会で少しずつ試せたら良いなーと思っています。&lt;/p&gt;

&lt;h3&gt;10周年&lt;/h3&gt;

&lt;p&gt;ノベルティが久々にたくさんあった。きっとシカゴ以来。&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p lang="tl" dir="ltr"&gt;Swag at &lt;a href="https://twitter.com/hashtag/CakeFest2015?src=hash"&gt;#CakeFest2015&lt;/a&gt; &lt;a href="http://t.co/gVbDL5ctPl"&gt;pic.twitter.com/gVbDL5ctPl&lt;/a&gt;&lt;/p&gt;&amp;mdash; CakePHP (@cakephp) &lt;a href="https://twitter.com/cakephp/status/604985701025869824"&gt;2015, 5月 31&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;で、私はそのシカゴから参加して6回目の参加となりました。
最後の抽選会でシカゴに参加した人、というときに私含め3人しか立たなかった（コアチームは除く）。さらにそのうち1人はマリアーノです。&lt;/p&gt;

&lt;p&gt;アニバーサリーということで最後の目玉商品は来年のCakeFest招待券！！。なんと交通費込み（上限あるけど）。
当選者は&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p lang="en" dir="ltr"&gt;The winners of free tickets to &lt;a href="https://twitter.com/hashtag/CakeFest2016?src=hash"&gt;#CakeFest2016&lt;/a&gt; &lt;a href="http://t.co/FvB3olZCgN"&gt;pic.twitter.com/FvB3olZCgN&lt;/a&gt;&lt;/p&gt;&amp;mdash; CakePHP (@cakephp) &lt;a href="https://twitter.com/cakephp/status/605408000073965568"&gt;2015, 6月 1&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;奥山さん！！！、来年はVIP待遇ですなー。来年はドイツらしいですよ。&lt;/p&gt;

&lt;h3&gt;感謝&lt;/h3&gt;

&lt;p&gt;10周年ということで、ここ数年は安藤さんと私の2人だったのを、もっと多くのCakePHPユーザにCakeFestに参加して欲しいと思い、様々なところでくどいぐらい誘いました（ご迷惑だった皆様すみません）。結果、私含め5人が日本から参加ということで、とても楽しかったです。&lt;/p&gt;

&lt;p&gt;安藤さんの紹介で、pivotal lab.にも訪問できたし、ピザ屋さんも（すごい）美味しかったです。&lt;/p&gt;

&lt;p&gt;また、日本でCakeRadioGaGaの中継を受け取ってくれたCo-Edoの田中さん、中継を見てくれた皆様、ありがとうございました。
別途報告会（もくもく会の中で？）、できたら良いなーと思っています。&lt;/p&gt;

&lt;p&gt;そのほかGoogle社の前で写真撮ったり、チェルシーマーケットでおみやげ買ったり、MOMA行ったり、ちゃんとニューヨークも楽しむことができました。&lt;/p&gt;

&lt;p&gt;最後に、CakeRadioGaGaの中継動画を。そういえばMarkとJoseに今年もメッセージちょうだいと言っていたのに、すっかり忘れたのは内緒です&amp;hellip;&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/VSwEo9VIi2A" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
</content>
  </entry>
  <entry>
    <title>CakePHP3 のアプリケーションを Behat でテストする</title>
    <link rel="alternate" href="http://blog.url.com/2015/05/17/cakephp3-behat.html"/>
    <id>http://blog.url.com/2015/05/17/cakephp3-behat.html</id>
    <published>2015-05-17T08:21:00Z</published>
    <updated>2015-05-17T19:08:06+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="/images/blog/cakephp3_behat.png" /&gt;&lt;/p&gt;

&lt;p&gt;CakePHP3の変更点として大きく取り上げられるのが、モデル層の変更でしょう。
しかしそれ以上に私たちが受けられる恩恵で大きいのが、PSR-2の採択です。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bakery.cakephp.org/2014/12/16/CakePHP-3-to-fully-adopt-PSR-2.html"&gt;CakePHP3 is fully adopt PSR-2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;例えばCakePHP2で単体テストを実行するときは、以下のように&lt;code&gt;cake&lt;/code&gt;コマンドを使って実行する必要がありました。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Console/cake test app Model/Articles
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cakeコマンド内でPHPUnitへの依存関係を解決し、PHPUnitからCakePHPのクラスが参照可能になるように作られていました。&lt;/p&gt;

&lt;p&gt;ところがCakePHP3からは、以下のように&lt;code&gt;phpunit&lt;/code&gt;コマンドを使って実行します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vendor/bin/phpunit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PSR-0のオートロードに対応したことで、PHPUnitからCakePHP3のクラスが参照可能になるのです。&lt;/p&gt;

&lt;h3&gt;はじめてみよう&lt;/h3&gt;

&lt;p&gt;同様の理由で、CakePHP2のアプリケーションをBehatでテストしたい場合は、私が作成した&lt;a href="https://github.com/sizuhiko/Bdd"&gt;Bdd Plugin&lt;/a&gt;を使ってBehatのステップ記述からCakePHPのクラスを参照可能になるようにしていました。&lt;/p&gt;

&lt;p&gt;しかしBehatにおいても直接実行したステップ定義から、CakePHP3のクラスが参照可能になるのです。&lt;/p&gt;

&lt;p&gt;CakePHP3のアプリケーションをどのようにBehatからアクセスするのか、CakePHP3のブログチュートリアルを例にサンプルアプリを作成しました。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/sizuhiko/cakephp3-bdd-example"&gt;cakephp3-bdd-example&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;サンプルアプリケーションは&lt;a href="/2015/04/19/cakebox-is-awesome.html"&gt;以前記事&lt;/a&gt;にもした&lt;a href="https://github.com/alt3/cakebox"&gt;Cakebox&lt;/a&gt;を使って構築しました。
またサンプルアプリケーションの実行にもCakeboxを使うと簡単に実行環境を構築することができます。&lt;/p&gt;

&lt;p&gt;サンプルアプリケーションのGithubページに書いてあるとおりの手順で進むことができます。
本ブログでは日本語で補足します。&lt;/p&gt;

&lt;h4&gt;必要なアプリケーションのインストール&lt;/h4&gt;

&lt;p&gt;以下のアプリケーションをホストOSにインストールします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VirtualBox&lt;/li&gt;
&lt;li&gt;Vagrant&lt;/li&gt;
&lt;li&gt;Cakebox&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;詳しくは&lt;a href="/2015/04/19/cakebox-is-awesome.html"&gt;Cakebox を使ってCakePHP3アプリケーションを作ってみよう&lt;/a&gt;の記事を参照してください。&lt;/p&gt;

&lt;h4&gt;サンプルアプリケーションのインストール&lt;/h4&gt;

&lt;p&gt;CakeboxのゲストOSにログインして、cakeboxコマンドでアプリケーションをインストールします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;localhost:cakebox $ vagrant ssh
Welcome to Ubuntu 14.04.1 LTS (GNU/Linux 3.13.0-24-generic x86_64)

vagrant@cakebox $ cakebox application add blog-tutorial.app --source https://github.com/sizuhiko/cakephp3-bdd-example.git --webroot blog-tutorial.app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると、以下のように表示されます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Creating application http://blog-tutorial.app

Configuring installer
Creating installation directory
Git installing user specified application sources
Creating virtual host
* Successfully created PHP-FPM virtual host
Creating databases
* Successfully created main database
* Successfully created test database
Configuring permissions
Updating configuration files
Application created using:
  database =&amp;gt; blog-tutorial_app
  framework_human =&amp;gt; user specified
  framework_short =&amp;gt; custom
  installation_method =&amp;gt; git
  path =&amp;gt; /home/vagrant/Apps/blog-tutorial.app
  source =&amp;gt; https://github.com/sizuhiko/cakephp3-bdd-example.git
  url =&amp;gt; blog-tutorial.app
  webroot =&amp;gt; blog-tutorial.app
Please note:
  =&amp;gt; Configuration files are not automatically updated for user specified applications.
  =&amp;gt; Make sure to manually update your database credentials, plugins, etc.

Remember to update your hosts file with: 10.33.10.10 http://blog-tutorial.app

Installation completed successfully
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;新規アプリケーションの構築と同じように、データベースやNginxの設定ファイルも生成してくれるので、すぐにアプリケーションを実行できる環境が整います。&lt;/p&gt;

&lt;p&gt;あとはアプリケーションのルートディレクトリに移動して、不足しているディレクトリを作ってcomposerでライブラリをインストールします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vagrant@cakebox $ cd Apps/blog-tutorial.app
vagrant@cakebox:~/Apps/blog-tutorial.app$ mkdir tmp 
vagrant@cakebox:~/Apps/blog-tutorial.app$ mkdir logs
vagrant@cakebox:~/Apps/blog-tutorial.app$ cp config/app.default.php config/app.php
vagrant@cakebox:~/Apps/blog-tutorial.app$ composer install 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;サンプルアプリケーションの環境設定&lt;/h4&gt;

&lt;h5&gt;データベース接続設定の変更&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;config/app.php&lt;/code&gt;のデータベース接続設定をCakeboxで生成された内容に変更します。
以下のとおり&lt;code&gt;username&lt;/code&gt;と&lt;code&gt;database&lt;/code&gt;の部分のみ変更します（それ以外はそのまま）。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    'Datasources' =&amp;gt; [
        'default' =&amp;gt; [
            // 省略
            'username' =&amp;gt; 'cakebox',
            'database' =&amp;gt; 'blog-tutorial_app',
            // 省略
        ],
        'test' =&amp;gt; [
            // 省略
            'username' =&amp;gt; 'cakebox',
            'database' =&amp;gt; 'test_blog-tutorial_app',
            // 省略
        ],
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;ホストOSのhostsファイルの変更&lt;/h5&gt;

&lt;p&gt;ホストOSのhostsファイルに指示されたように &lt;code&gt;10.33.10.10 blog-tutorial.app&lt;/code&gt; の行を追加します。&lt;/p&gt;

&lt;h5&gt;Cakebox環境のチューニング&lt;/h5&gt;

&lt;p&gt;Cakeboxのデフォルト設定ではBehatを使ってアプリケーションをテストしようとすると、いくつか動かない箇所があったので、設定値をチューニングします。
まずボックスファイルのメモリを2048Mにアップします（デフォルトは1024M）。
次にxdebug.iniのxdebug.max&lt;em&gt;nesting&lt;/em&gt;levelの値を調整します。READMEでは&lt;code&gt;500&lt;/code&gt;を設定しています。もう少し値は小さくても大丈夫かもしれないですが、とりあえず500あれば大丈夫です。&lt;/p&gt;

&lt;p&gt;具体的な設定例は、githubのREADMEを参照してください。&lt;/p&gt;

&lt;h5&gt;Webサーバの設定&lt;/h5&gt;

&lt;p&gt;Behatからアプリケーションをテストするときは、ブラウザから通常操作するのと同じようにWebサーバを通過します。
そのため、アプリケーションが通常操作としてアクセスされたのか、Behatのテストでアクセスされたのかを識別して環境を切り替えてあげないと、データベースのデータがテストによって変更するので、通常操作のデータが失われてしまいます。&lt;/p&gt;

&lt;p&gt;このあたりの話（理由や手法）は、過去に何度か記事にしていたり、書籍&lt;a href="http://www.amazon.co.jp/CakePHP%E3%81%A7%E5%AD%A6%E3%81%B6%E7%B6%99%E7%B6%9A%E7%9A%84%E3%82%A4%E3%83%B3%E3%83%86%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3-%E6%B8%A1%E8%BE%BA-%E4%B8%80%E5%AE%8F/dp/4844336789/ref=la_B004LVAF8Q_1_1?s=books&amp;amp;amp;ie=UTF8&amp;amp;amp;qid=1410066610&amp;amp;amp;sr=1-1"&gt;CakePHPで学ぶ継続的インテグレーション&lt;/a&gt;でも詳しく解説していますので、CakePHP2の内容ですが、一度手に取ってみてください。&lt;/p&gt;

&lt;p&gt;で、このサンプルはnginx用の設定ファイルを&lt;code&gt;blog-tutorial.app.test&lt;/code&gt;というファイルで用意しておいたので、これをCakeboxのnginxの設定ディレクトリにコピーして再起動するだけで大丈夫です。&lt;/p&gt;

&lt;p&gt;環境切り替え用に&lt;code&gt;blog-tutorial.app.test&lt;/code&gt;というホスト名でアクセスされたら、nginxで環境変数&lt;code&gt;CAKE_ENV&lt;/code&gt;に&lt;code&gt;test&lt;/code&gt;という文字列を設定するようにしています。
CakePHP3のアプリケーションでは&lt;code&gt;config/bootstrap.php&lt;/code&gt;で環境変数の設定値を見てDBの接続先が&lt;code&gt;test&lt;/code&gt;になるように設定します。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;if (getenv('CAKE_ENV') === 'test') {
    ConnectionManager::alias('test', 'default');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CakePHP3ではConnectionManagerのaliasという機能でdefaultへ接続しようとしたときに、実際はtestの接続内容を参照するように設定することができるので、この機能を利用し、間違ってdefaultのテーブルが書き変わらないようにしています。&lt;/p&gt;

&lt;p&gt;より詳しい手順や、設定ファイルの内容はgithubのREADMEや設定ファイルを参照してください。&lt;/p&gt;

&lt;p&gt;Behatから参照可能なホスト名として&lt;code&gt;blog-tutorial.app.test&lt;/code&gt;をCakeboxのVM側の&lt;code&gt;/etc/hosts&lt;/code&gt;に追加します。&lt;/p&gt;

&lt;h4&gt;データベースのマイグレーション&lt;/h4&gt;

&lt;p&gt;データベースの生成はマイグレーションコマンドで一発です。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bin/cake migrations migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Behatのテストを実行する&lt;/h4&gt;

&lt;p&gt;ここまで設定できれば、後はテストを実行するだけです。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vagrant@cakebox:~/Apps/blog-tutorial.app$ vendor/bin/behat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;おそらくすべてグリーンで成功するはずです。
うまくいかなかったら、お気軽にgithubのissueに&lt;code&gt;日本語で&lt;/code&gt;書いてください。&lt;/p&gt;

&lt;h3&gt;どうやったのか？&lt;/h3&gt;

&lt;p&gt;まずCakePHP3で最初に注目したのは、単体テストがPHPUnitのコマンドから実行できるようになっていたことです。
これは過去に外部の様々なツールやアプリケーションとCakePHPを結合するときに一番悩んでいたところでした。&lt;/p&gt;

&lt;p&gt;PHPUnitからCakePHP3にどのように連動しているのか？を調べることから始めました。
PHPUnitは実行すると、カレントディレクトリのphpunit.xml（もしくはphpunit.xml.dist）を参照します。&lt;/p&gt;

&lt;h4&gt;PHPUnitがCakePHP3を呼び出す仕組みを知る&lt;/h4&gt;

&lt;p&gt;CakePHP3ではアプリケーションスケルトンを生成すると、ルートディレクトリに&lt;code&gt;phpunit.xml.dist&lt;/code&gt;が生成されます。&lt;/p&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- phpunit.xml.dist --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;phpunit&lt;/span&gt;
    &lt;span class="na"&gt;colors=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
    &lt;span class="na"&gt;processIsolation=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;
    &lt;span class="na"&gt;stopOnFailure=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;
    &lt;span class="na"&gt;syntaxCheck=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;
    &lt;span class="na"&gt;bootstrap=&lt;/span&gt;&lt;span class="s"&gt;"./tests/bootstrap.php"&lt;/span&gt;  &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;(1)&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;php&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ini&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"memory_limit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"-1"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ini&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"apc.enable_cli"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/php&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Add any additional test suites you want to run here --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;testsuites&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;testsuite&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"App Test Suite"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;directory&amp;gt;&lt;/span&gt;./tests/TestCase&lt;span class="nt"&gt;&amp;lt;/directory&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/testsuite&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- Add plugin test suites here. --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/testsuites&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Setup a listener for fixtures (2) --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;listeners&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;listener&lt;/span&gt;
        &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"\Cake\TestSuite\Fixture\FixtureInjector"&lt;/span&gt;
        &lt;span class="na"&gt;file=&lt;/span&gt;&lt;span class="s"&gt;"./vendor/cakephp/cakephp/src/TestSuite/Fixture/FixtureInjector.php"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;arguments&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;object&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"\Cake\TestSuite\Fixture\FixtureManager"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/arguments&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/listener&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/listeners&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/phpunit&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このファイルを読むと、2つ重要な箇所があるのに気がつきます。&lt;/p&gt;

&lt;p&gt;まず(1)の &lt;code&gt;bootstrap=&amp;quot;./tests/bootstrap.php&amp;quot;&lt;/code&gt; という部分。
bootstrap属性にはPHPUnitが実行されるとき呼び出されるPHPコードを指定することができます。
ここからCakePHP3アプリケーションをテスト用にロードする場合、このファイルを呼び出せば外部ツールからCakePHP3が操作できるようになることがわかります。&lt;/p&gt;

&lt;p&gt;実はこのファイルを実際に見てみると、以下の1行しかありません。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;require dirname(__DIR__) . '/config/bootstrap.php';
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テストとは関係なく、アプリケーションの&lt;code&gt;config/bootstrap.php&lt;/code&gt;をロードしています。
おそらく将来テストに関する何か差分が必要になったときに、テスト側にだけ変更が発生すると思うので、テスト用にCakePHP3をロードする場合は&lt;code&gt;tests/bootstrap.php&lt;/code&gt;をロードしておいた方が良いでしょう。&lt;/p&gt;

&lt;p&gt;次に(2)のリスナー設定です。
PHPUnitのリスナーはPHPUnitのフックポイントでコールバックされる処理を記述できるクラスです。
CakePHP3ではフィクスチャ（DBのテストテーブルとデータを準備する仕組み）を投入するのに利用しています。
以下のように&lt;code&gt;FixtureInjector&lt;/code&gt;クラスのstartTestとendTestでテストケース開始／終了ごとにフィクスチャのロードとアンロードが対応するようになっています。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;class FixtureInjector implements PHPUnit_Framework_TestListener
{

    /**
     * Adds fixtures to a test case when it starts.
     *
     * @param \PHPUnit_Framework_Test $test The test case
     * @return void
     */
    public function startTest(PHPUnit_Framework_Test $test)
    {
        $test-&amp;gt;fixtureManager = $this-&amp;gt;_fixtureManager;
        if ($test instanceof TestCase) {
            $this-&amp;gt;_fixtureManager-&amp;gt;fixturize($test);
            $this-&amp;gt;_fixtureManager-&amp;gt;load($test);
        }
    }

    /**
     * Unloads fixtures from the test case.
     *
     * @param \PHPUnit_Framework_Test $test The test case
     * @param float $time current time
     * @return void
     */
    public function endTest(PHPUnit_Framework_Test $test, $time)
    {
        if ($test instanceof TestCase) {
            $this-&amp;gt;_fixtureManager-&amp;gt;unload($test);
        }
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;BehatからCakePHP3を呼び出す仕組みに流用する&lt;/h4&gt;

&lt;p&gt;ここまでの内容が外部ツールからCakePHP3のアプリケーションをテストするのに重要な部分です。
PHPUnitがCakePHP3を呼び出すのと同じようにする仕組みをBehatのFeatureContextクラスに用意します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;features/bootstrap/FeatureContext.php&lt;/code&gt;というBehatが読み込むファイルに記述します。
CakePHP2とBDDプラグインによるインテグレーションではBehatのバージョンが2系でしたが、CakePHP3との連携では最新の3系を利用しています。
Behat3からはBehat1系、2系で利用していたファイル構成と異なっています。従来、&lt;code&gt;support/bootstrap.php&lt;/code&gt;や&lt;code&gt;support/hooks.php&lt;/code&gt;あたりに書いていたコードはすべてContextクラス内に記述することになります。&lt;/p&gt;

&lt;p&gt;Behat3からはFeatureContextにブートストラップ記述を、それ以外のコンテキストは用途に応じて別のコンテキストクラスに分割する方がスマートに記述できそうです。
Behat2では複数のコンテキストクラスを使う場合、FeatureContextでインクルードしないといけなかったのですが、Behat3では&lt;code&gt;behat.yml&lt;/code&gt;上で記述できるのでより簡単になっています。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;class FeatureContext implements Context, SnippetAcceptingContext
{
    public function __construct()
    {
        require_once dirname(dirname(__DIR__)) . '/tests/bootstrap.php'; // (1)

        // Always connect test database
        ConnectionManager::alias('test', 'default'); // (2)

        Fabricate::config(function($config) { // (3)
            $config-&amp;gt;adaptor = new CakeFabricateAdaptor([
                CakeFabricateAdaptor::OPTION_FILTER_KEY =&amp;gt; true,
                CakeFabricateAdaptor::OPTION_VALIDATE   =&amp;gt; false
            ]);
        });

        $this-&amp;gt;fixtureInjector = new FixtureInjector(new FixtureManager()); //(4)
        $this-&amp;gt;fixture = new BddAllFixture();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;(1)は、phpunit.xmlのbootstrapと同様にCakePHP3の&lt;code&gt;tests/bootstrap.php&lt;/code&gt;を呼び出します。&lt;/li&gt;
&lt;li&gt;(2)は、Behatのステップ定義からテストデータを投入するときに、testの接続設定を参照するようにエイリアスを設定します。&lt;/li&gt;
&lt;li&gt;(3)は、テストデータジェネレータ&lt;a href="https://github.com/sizuhiko/cakephp-fabricate-adaptor"&gt;Fabricate&lt;/a&gt;の初期設定です。FabricateもCakePHP3対応されています。&lt;/li&gt;
&lt;li&gt;(4)は、phpunit.xmlのリスナー部分を模して、Behatのシナリオ毎にフィクスチャが動くようにFixtureInjectorのインスタンスを生成しています。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;BehatからCakePHP3のフィクスチャを利用する&lt;/h4&gt;

&lt;p&gt;(4)で書いたとおり、FixtureInjectorのインスタンスを生成したので、Behatのフックポイントを使ってシナリオ開始時にフィクスチャをロードし、シナリオ終了時にフィクスチャをアンロードするようにします。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    /** @BeforeScenario */
     public function beforeScenario(BeforeScenarioScope $scope)
     {
        $this-&amp;gt;fixtureInjector-&amp;gt;startTest($this-&amp;gt;fixture);
     }

     /** @AfterScenario */
     public function afterScenario(AfterScenarioScope $scope)
     {
        $this-&amp;gt;fixtureInjector-&amp;gt;endTest($this-&amp;gt;fixture, time());
     }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際にフィクスチャを利用するためには、&lt;code&gt;$this-&amp;gt;fixture&lt;/code&gt;のクラスがCakePHP3のTestCaseでなければならないので、&lt;code&gt;$fixtures&lt;/code&gt;という利用するフィクスチャファイルの配列を定義しただけのクラスを用意してFixtureInjectorに渡すようにします。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;class BddAllFixture extends TestCase {
    public $fixtures = [
        'Categories' =&amp;gt; 'app.categories',
        'Articles'   =&amp;gt; 'app.articles',
        'Users'      =&amp;gt; 'app.users',
        'Categories' =&amp;gt; 'app.categories'
    ];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このあたりの話も、書籍&lt;a href="http://www.amazon.co.jp/CakePHP%E3%81%A7%E5%AD%A6%E3%81%B6%E7%B6%99%E7%B6%9A%E7%9A%84%E3%82%A4%E3%83%B3%E3%83%86%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3-%E6%B8%A1%E8%BE%BA-%E4%B8%80%E5%AE%8F/dp/4844336789/ref=la_B004LVAF8Q_1_1?s=books&amp;amp;amp;ie=UTF8&amp;amp;amp;qid=1410066610&amp;amp;amp;sr=1-1"&gt;CakePHPで学ぶ継続的インテグレーション&lt;/a&gt;でも詳しく解説していますので、CakePHP2の内容ですが、一度手に取ってみてください。
CakePHP3になって、メソッドやクラスが一部変わりましたが、BehatとCakePHPをインテグレーションするためにおさえておかないといけないポイントはほとんど変わっていません。&lt;/p&gt;

&lt;p&gt;後はBehat3のドキュメント、CakePHP3のドキュメントを見ながら進めていくと、エンド to エンドのテストが容易に記述できるようになります。&lt;/p&gt;

&lt;h3&gt;さいごに&lt;/h3&gt;

&lt;p&gt;GithubのREADMEに書いた内容をすべて日本語にした訳ではないのですが、要所をかいつまんで重要な部分を解説しました。
より詳しい内容などはREADMEを見ていただければと思います。&lt;/p&gt;

&lt;p&gt;また、BDDプラグインのサンプルアプリにはあった、日本語のシナリオや、JavaScriptを使ったテストなど、Behat3になって大きく変わってはいませんが、サンプルアプリケーションに少しずつ載せられたらなぁと思っています。
何かうまく動かないなどあれば、気軽にGithubのissueに投稿お願いします（日本語でOKです）。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>AngularJSでngDialog中の値をngModelでバインドしたいとき注意すること</title>
    <link rel="alternate" href="http://blog.url.com/2015/05/02/angularjs-ngdialog-ngmodel-not-bind.html"/>
    <id>http://blog.url.com/2015/05/02/angularjs-ngdialog-ngmodel-not-bind.html</id>
    <published>2015-05-02T08:19:00Z</published>
    <updated>2015-05-02T17:48:57+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;AngularJS でモーダルダイアログを表示するために、何を使うでしょうか？
多くの場合 &lt;a href="https://github.com/likeastore/ngDialog"&gt;ngDialog&lt;/a&gt; というコンポーネントを使うのではないかと思います。&lt;/p&gt;

&lt;p&gt;で、ダイアログ上の値は、それを表示したコントローラのスコープにバインドする、という良くあるシナリオを想定してください。&lt;/p&gt;

&lt;p&gt;まずうまく&lt;a href="https://jsfiddle.net/sizuhiko/ox73fktc/1/"&gt;動作するサンプル&lt;/a&gt;を紹介します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Open Dialog&lt;/code&gt;というリンクをクリックして、ダイアログを表示したら、チェックボックスをON/OFFしてください。
ダイアログ背景のページで &lt;code&gt;check: true&lt;/code&gt; と &lt;code&gt;check: false&lt;/code&gt; がトグルするはずです。&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-ng-app=&lt;/span&gt;&lt;span class="s"&gt;"myApplication"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-ng-controller=&lt;/span&gt;&lt;span class="s"&gt;"MainController"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;ng-click=&lt;/span&gt;&lt;span class="s"&gt;"ShowNgDialog()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Open Dialog&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;check: {{FormData.allcheck}}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myApplication&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'myApplication'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'ngDialog'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="nx"&gt;myApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'MainController'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ngDialog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;allcheck&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ShowNgDialog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;ngDialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;            
            &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;div&amp;gt;&amp;lt;input type="checkbox" ng-model="FormData.allcheck"/&amp;gt;&amp;lt;/div&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;plain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;$scope&lt;/span&gt;

        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;    
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とても簡単な例ですが、AngularJSを使ってモーダルダイアログを表示して、チェックボックスの値をコントローラのスコープ変数 &lt;code&gt;FormData.allcheck&lt;/code&gt; にバインドしています。&lt;/p&gt;

&lt;h3&gt;なぜか変数だとバインドされない&lt;/h3&gt;

&lt;p&gt;一方で、こちらは&lt;a href="http://jsfiddle.net/sizuhiko/ox73fktc/2/"&gt;動作しないサンプル&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Open Dialog&lt;/code&gt;というリンクをクリックして、ダイアログを表示したら、チェックボックスをON/OFFしてください。
ダイアログ背景のページは &lt;code&gt;check: false&lt;/code&gt; のままです。&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-ng-app=&lt;/span&gt;&lt;span class="s"&gt;"myApplication"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-ng-controller=&lt;/span&gt;&lt;span class="s"&gt;"MainController"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;ng-click=&lt;/span&gt;&lt;span class="s"&gt;"ShowNgDialog()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Open Dialog&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;check: {{allcheck}}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myApplication&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'myApplication'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'ngDialog'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="nx"&gt;myApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'MainController'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ngDialog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allcheck&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ShowNgDialog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;ngDialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;            
            &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;div&amp;gt;&amp;lt;input type="checkbox" ng-model="allcheck"/&amp;gt;&amp;lt;/div&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;plain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;$scope&lt;/span&gt;

        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;    
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;変わったのは、コントローラのスコープ変数にバインドするオブジェクトです。&lt;/p&gt;

&lt;p&gt;うまく動作するのは &lt;code&gt;$scope.FormData={allcheck: false};&lt;/code&gt; のようにスコープのプロパティはオブジェクトで、オブジェクトに値を保持しているケースです。
一方うまく動作しないのは &lt;code&gt;$scope.allcheck = false;&lt;/code&gt; のようにスコープのプロパティに変数で値を保持しているケースです。&lt;/p&gt;

&lt;h3&gt;ngDialogでなければ変数でバインドできる&lt;/h3&gt;

&lt;p&gt;ngDialogでなく普通に表示される範囲にある場合は、&lt;a href="http://jsfiddle.net/sizuhiko/ox73fktc/3/"&gt;動作するサンプル&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;チェックボックスをON/OFFしてください。ページで &lt;code&gt;check: true&lt;/code&gt; と &lt;code&gt;check: false&lt;/code&gt; がトグルするはずです。&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-ng-app=&lt;/span&gt;&lt;span class="s"&gt;"myApplication"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-ng-controller=&lt;/span&gt;&lt;span class="s"&gt;"MainController"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;ng-model=&lt;/span&gt;&lt;span class="s"&gt;"allcheck"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;check: {{allcheck}}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myApplication&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'myApplication'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'ngDialog'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="nx"&gt;myApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'MainController'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ngDialog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allcheck&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;まとめ&lt;/h3&gt;

&lt;p&gt;ngDialogを使うときのちょっとした小ネタなのですが、解決策を見つけるまで結構時間がかかりました。
もし、ngDialogを使ってうまくデータバィンディングできない！という人の参考になればと思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>gulp-rev-replace を使ってリビジョン管理をするときに注意したいこと</title>
    <link rel="alternate" href="http://blog.url.com/2015/05/02/notice-gulp-rev-replace.html"/>
    <id>http://blog.url.com/2015/05/02/notice-gulp-rev-replace.html</id>
    <published>2015-05-02T06:51:00Z</published>
    <updated>2015-05-02T17:14:37+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;JavaScriptでモダンな開発をするとき、&lt;a href="http://gulpjs.com/"&gt;gulp&lt;/a&gt;というビルドシステムを使うと、簡単にビルド過程を自動化できます。
さらに、JavaScriptでアプリケーションを作ったとき、ライブラリはCDNなどから取得するとして、自分で作ったスクリプトファイルは１つのファイルにまとめてミニファイズする、ということをgulpのタスクで書くでしょう。
一般的にJavaScriptやCSSをHTML上に記述するとき、以下のようにします。&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/js/app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/css/app.css"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;リリースしたのにファイルの変更が読み込まれない&lt;/h3&gt;

&lt;p&gt;良くあるシーンとして、JavaScriptファイルやCSSファイルを差し替えたのに、変更がブラウザに反映されない、というケースです。
これはブラウザのキャッシュが有効になっていて、JavaScriptやCSSのファイルをWebサーバへ取得しに行かないために発生します。&lt;/p&gt;

&lt;p&gt;そこで、この課題に対応するため、以下のどちらかの方法を採用すると思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ファイル名のGETパラメータに、乱数を付加して &lt;code&gt;/js/app.js?_リビジョン番号&lt;/code&gt; のようにする&lt;/li&gt;
&lt;li&gt;ファイル名にリビジョン番号を入れて &lt;code&gt;/js/app-リビジョン番号.js&lt;/code&gt; のようにする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こうすると、リビジョンが変更になった（リリースした）ときにファイルが必ず読み込まれるようになります。&lt;/p&gt;

&lt;h3&gt;GETパラメータの付加は推奨されない&lt;/h3&gt;

&lt;p&gt;前記の対応のうち、GETパラメータにリビジョン番号を追加する方法はあまり推奨されません(参照:&lt;a href="http://www.amazon.co.jp/High-Performance-Web-Sites-Essential/dp/0596529309/ref=tmm_pap_title_0?ie=UTF8&amp;amp;amp;qid=1430550831&amp;amp;amp;sr=8-1"&gt;&lt;code&gt;High Performance Web Sites&lt;/code&gt;&lt;/a&gt;)。
この方法は、ブラウザやWebサーバがキャッシュを利用しないため、サイトの負荷につながります。&lt;/p&gt;

&lt;p&gt;もちろん毎回リクエストが来ても問題ないサイトや、利用者が想定されていれば問題ないかもしれないですが、利用できるのであればキャッシュが有効になっていてページが速く表示できた方が良いことはいうまでもありません。&lt;/p&gt;

&lt;p&gt;gulp-revを使ってGETパラメータにリビジョン番号を入れたい場合は、&lt;a href="https://github.com/bustardcelly/gulp-rev-append"&gt;gulp-rev-append&lt;/a&gt;を使うとクエリ文字列としてハッシュ値を入れられるようになります。&lt;/p&gt;

&lt;h3&gt;ビルド時にファイル名を変更する&lt;/h3&gt;

&lt;p&gt;推奨される方法は  &lt;code&gt;/js/app-リビジョン番号.js&lt;/code&gt; のように、ファイル名を変更することです。
gulpのタスク上に、&lt;code&gt;gulp-rev&lt;/code&gt;のREADMEに書いてあるとおりの方法で対応します。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;gulp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gulp'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;rev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gulp-rev'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// by default, gulp would pick `assets/css` as the base, &lt;/span&gt;
    &lt;span class="c1"&gt;// so we need to set it explicitly: &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'assets/css/*.css'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'assets/js/*.js'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'assets'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'build/assets'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;// copy original assets to build dir &lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'build/assets'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;// write rev'd assets to build dir &lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;manifest&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'build/assets'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// write manifest to build dir &lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プロジェクトによっては、このように単純な構成ではなく、複数のストリームを使ってビルドすることもあるでしょう。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'build_js'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'src/*.js'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sourcemaps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'bundle.js'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sourcemaps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'dist'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;manifest&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'dist'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;たとえばjsとcssを分けてビルドしなくてはいけないようなケースですね。
元ファイル名と、置き換えられたファイル名のマッピングを出力するために、&lt;code&gt;rev.manifest()&lt;/code&gt;というAPIを呼び出します。
出力先は、そのあとの&lt;code&gt;dest&lt;/code&gt;API呼び出しで指定します。ファイル名は省略時には &lt;code&gt;manifest.json&lt;/code&gt; というファイル名になります。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"app.css"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"app-098f6bcd.css"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"app.js"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"app-273c2cin.js"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;ファイル名の変更を反映する&lt;/h3&gt;

&lt;p&gt;HTMLファイルのjsやcssのファイル名を書き換えるのに使うのが、&lt;a href="https://github.com/jamesknelson/gulp-rev-replace"&gt;gulp-rev-replace&lt;/a&gt;です。
マニフェストファイルを入力として、HTMLファイルのビルド（コピー）過程で差し込むことができるようになっています。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"revreplace"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"revision"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;manifest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"./"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;distFolder&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"/rev-manifest.json"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;distFolder&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"/index.html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;revReplace&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;manifest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;manifest&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;distFolder&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;revReplace()&lt;/code&gt; というAPIを使って、指定したマニフェストの内容と一致する部分を置換します。&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/js/app-273c2cin.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/css/app-098f6bcd.css"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;とても便利、でも&amp;hellip;&lt;/h3&gt;

&lt;p&gt;私が遭遇したケースで説明しましょう。
ビルド済みファイル名が &lt;code&gt;domain.js&lt;/code&gt; というファイル名でそれにリビジョン番号を追加する必要がありました。
さらにドメイン名のチェック用に、&lt;a href="https://github.com/miguelmota/is-valid-domain"&gt;is-valid-domain.js&lt;/a&gt;というライブラリも読み込んでいました。&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/lib/is-valid-domain.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/js/domain.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでビルドしたところ&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/lib/is-valid-domain-リビジョン番号.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/js/domain-リビジョン番号.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようになってしまいました。&lt;code&gt;domain.js&lt;/code&gt; だけでなく、&lt;code&gt;is-valid-domain.js&lt;/code&gt; も変わってしまいます。
なぜこうなるか、ソースを見てみました。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;renames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;replaceOnce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unreved&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reved&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まぁですよね。ファイルを読み込んで &lt;code&gt;domain.js&lt;/code&gt; に一致するところで分割、&lt;code&gt;domain-リビジョン番号.js&lt;/code&gt; を追加して繰り返す、という実装です。
ファイルのどこに入っているか厳密に識別するのは困難（正規表現を使えばできなくはないかもしれないけど）です。&lt;/p&gt;

&lt;p&gt;で、このようなケースにならなそうなら、そのまま gulp-rev-replace を使ってもらえば問題ないと思います。
ライブラリの挙動がわかっていれば利用するのも安心ですね。&lt;/p&gt;

&lt;h3&gt;私は gulp-template を使いました&lt;/h3&gt;

&lt;p&gt;で、私は gulp-rev-replace 使うのやめました。&lt;/p&gt;

&lt;p&gt;ちょっと予期しない動作をするのは怖かったので、リビジョン番号が入って欲しいところを明示するようにしたかったのです。
そこで使ったのが &lt;a href="https://github.com/sindresorhus/gulp-template"&gt;gulp-template&lt;/a&gt; です。&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= name %&amp;gt;&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;%= =&amp;gt;&lt;/code&gt; で囲んだ部分に値を差し込むことができるので、以下のように記述します。&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/lib/is-valid-domain.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/js/&amp;lt;%= data['domain.js'] %&amp;gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そこにマニフェストJSONを&lt;code&gt;fs-extra&lt;/code&gt;で読み込んで、&lt;code&gt;template&lt;/code&gt;APIに流し込むようにします。
そのままだと、変換前JSファイル名が変数名になって取り出しずらいので、&lt;code&gt;variable&lt;/code&gt;オプションを指定して&lt;code&gt;data&lt;/code&gt;という変数名にバインドするようにします。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;gulp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gulp'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gulp-template'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'fs-extra'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'build_html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;manifest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readJsonSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'./'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;distFolder&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'/rev-manifest.json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;throws&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'src/*.html'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;manifest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'data'&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'dist'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;まとめ&lt;/h3&gt;

&lt;p&gt;静的ファイルのリビジョン管理って結構面倒なんですが、gulp使うと便利なライブラリあって簡単に実装できます。
今回は私が遭遇した特殊なケースかもしれないので、そのままgulp-revだけで完結できることも多々あるでしょう。
gulp-revや、その関連ライブラリには便利な機能がまだあるので、一度使ってみてください。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Cakebox を使ってCakePHP3アプリケーションを作ってみよう</title>
    <link rel="alternate" href="http://blog.url.com/2015/04/19/cakebox-is-awesome.html"/>
    <id>http://blog.url.com/2015/04/19/cakebox-is-awesome.html</id>
    <published>2015-04-19T06:19:00Z</published>
    <updated>2015-04-19T17:26:13+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;CakePHP3の開発環境を構築するのは、以前にも書いたとおり &lt;a href="https://github.com/FriendsOfCake/vagrant-chef"&gt;FriendsOfCake/vagrant-chef&lt;/a&gt; を便利に使っていたのですが、先日 Twitter の TL に流れてきた &lt;a href="https://github.com/alt3/cakebox"&gt;Cakebox&lt;/a&gt; というのが気になっていたので、使ってみました。&lt;/p&gt;

&lt;p&gt;結論としては「&lt;code&gt;CakePHPで何かつくってみたいなら、使わない理由がない&lt;/code&gt;」ということです。&lt;/p&gt;

&lt;h3&gt;Cakeboxとは&lt;/h3&gt;

&lt;p&gt;CakeboxはAlt&amp;lt;3 Because projects need loveというオランダのプロジェクトのリポジトリにあり、アムステルダムの&lt;a href="https://github.com/bravo-kernel"&gt;bravo-kernel&lt;/a&gt;氏が中心になって作っているようです。またCakePHPのコアデベロッパでもある&lt;a href="https://github.com/ceeram"&gt;ceeram&lt;/a&gt;氏もcontributeしているので、アムステルダムでは著名なプロジェクトなのかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://cakebox.readthedocs.org/en/latest/features/"&gt;Cakeboxの詳しいドキュメント&lt;/a&gt;に書いてあるとおり、chefでubuntuベースのboxファイルを生成し、cakeboxではそれを使ってvagrantとvirtualboxで起動する流れです。&lt;/p&gt;

&lt;p&gt;後で説明しますが、便利なコンソールアプリがあり、それ自体がCakePHP3でできているので、CakePHP3のアプリケーションサンプルとしても役立つのではないかと思います。&lt;/p&gt;

&lt;p&gt;boxファイルに入っているソフトウェアは上記ドキュメントに詳しく書いてあるので、そちらを参照してください。&lt;/p&gt;

&lt;h3&gt;なんと簡単、環境構築&lt;/h3&gt;

&lt;h4&gt;Cakeboxのインストール&lt;/h4&gt;

&lt;p&gt;最初にCakeboxをダウンロード（クローン）します。以下はCakeboxのREADMEに書いてあるままの内容です。
注意点として、以下の前提条件が必要となります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VirtualBox 4.0 以上&lt;/li&gt;
&lt;li&gt;Vagrant 1.6.0 以上&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どちらかが満たされていないと、まったく起動しないので注意してください（私は踏みましたw）。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/alt3/cakebox.git
&lt;span class="nb"&gt;cd &lt;/span&gt;cakebox
cp Cakebox.yaml.default Cakebox.yaml
vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定ファイル（yaml）には、詳細な設定を指定できるようですが、いったん何も設定しなくても問題はありませんでした。
以下のようなログが出力されます。
最初はCakeboxのboxファイルをCDNからダウンロードするので時間がかかります。
予め時間があり、回線に余裕があるときにvagrant upだけは済ませておくと良いですね。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Bringing machine &lt;span class="s1"&gt;'default'&lt;/span&gt; up with &lt;span class="s1"&gt;'virtualbox'&lt;/span&gt; provider...
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: Importing base box &lt;span class="s1"&gt;'cakebox'&lt;/span&gt;...
&lt;span class="c"&gt;# ... 省略&lt;/span&gt;
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: ---------------------------------------------------------------
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: Please wait... installing Cakebox Commands and Dashboard
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: ---------------------------------------------------------------
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: &lt;span class="k"&gt;*&lt;/span&gt; Self-updating Composer
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: &lt;span class="k"&gt;*&lt;/span&gt; Updating Composer cache permissions
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: &lt;span class="k"&gt;*&lt;/span&gt; Creating project
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: &lt;span class="k"&gt;*&lt;/span&gt; Composer installing
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: Installation completed successfully!
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: Running provisioner: shell...
    default: Running: inline script
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: ---------------------------------------------------------------
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: CakePHP v3.0.0 Console
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: ---------------------------------------------------------------
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: Self-updating cakebox
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: Self-updating Composer
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: &lt;span class="k"&gt;*&lt;/span&gt; Updating cache permissions
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: Updating Cakebox Commands and Dashboard
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: &lt;span class="k"&gt;*&lt;/span&gt; Detecting branch
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: &lt;span class="k"&gt;*&lt;/span&gt; Updating git repository
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: &lt;span class="k"&gt;*&lt;/span&gt; Updating composer packages
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: Updating CakePHP Code Sniffer
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: &lt;span class="k"&gt;*&lt;/span&gt; Composer updating
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: Updating HHVM configuration
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: &lt;span class="k"&gt;*&lt;/span&gt; Creating system start/stop links
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: &lt;span class="k"&gt;*&lt;/span&gt; Correcting HHVM session.save_path
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: &lt;span class="k"&gt;*&lt;/span&gt; Restarting service
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: Updating Elasticsearch configuration
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: &lt;span class="k"&gt;*&lt;/span&gt; Decreasing required memory
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: &lt;span class="k"&gt;*&lt;/span&gt; Updating initialization script
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: &lt;span class="k"&gt;*&lt;/span&gt; Stopping service
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: Self-update completed successfully
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: Running provisioner: shell...
    default: Running: inline script
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: ---------------------------------------------------------------
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: CakePHP v3.0.0 Console
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: ---------------------------------------------------------------
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: Setting Cakebox Dashboard protocol to http
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: Command completed successfully
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: Running provisioner: shell...
    default: Running: inline script
&lt;span class="c"&gt;# ... 省略&lt;/span&gt;

&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: Machine &lt;span class="s1"&gt;'default'&lt;/span&gt; has a post &lt;span class="sb"&gt;`&lt;/span&gt;vagrant up&lt;span class="sb"&gt;`&lt;/span&gt; message. This is a message
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: from the creator of the Vagrantfile, and not from Vagrant itself:
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: 
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: Your box is ready and waiting.
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: 
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; Login to your Dashboard by browsing to http://10.33.10.10
&lt;span class="gp"&gt;==&amp;gt; &lt;/span&gt;default: &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; Login to your virtual machine by running: vagrant ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;boxファイルのインストールが終わると、ダッシュボードアプリをインストールし、そのアプリのCLIを使ってアプリ自身と、各種モジュールを設定するようです。&lt;/p&gt;

&lt;p&gt;ここまで終わったら、指示どおり &lt;code&gt;http://10.33.10.10&lt;/code&gt; にアクセスしてみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakebox_init.png" /&gt;&lt;/p&gt;

&lt;p&gt;かっこいいダッシュボード画面が表示されました。こういうのがあるとテンション上がりますよね！&lt;/p&gt;

&lt;h4&gt;アプリケーションの構築&lt;/h4&gt;

&lt;p&gt;Cakeboxを使って開発環境が構築できたら、CakePHP3アプリケーションを構築してみましょう。&lt;code&gt;vagrant ssh&lt;/code&gt;でCakeboxにログインします。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;localhost:cakebox &lt;span class="nv"&gt;$ &lt;/span&gt;vagrant ssh
Welcome to Ubuntu 14.04.1 LTS &lt;span class="o"&gt;(&lt;/span&gt;GNU/Linux 3.13.0-24-generic x86_64&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CakeboxのREADMEに書いてあるとおり、&lt;code&gt;cakebox&lt;/code&gt;コマンドを使ってアプリケーションを生成します。とりあえずCakePHP3のブログチュートリアルを作ってみたいと思います。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="gp"&gt;vagrant@cakebox:~$ &lt;/span&gt;cakebox application add blog-tutorial.app
---------------------------------------------------------------
CakePHP v3.0.0 Console
---------------------------------------------------------------
Creating application http://blog-tutorial.app

Configuring installer
Creating installation directory
Composer installing CakePHP 3.x application sources
Creating virtual host
&lt;span class="k"&gt;*&lt;/span&gt; Successfully created PHP-FPM virtual host
Creating databases
&lt;span class="k"&gt;*&lt;/span&gt; Successfully created main database
&lt;span class="k"&gt;*&lt;/span&gt; Successfully created &lt;span class="nb"&gt;test &lt;/span&gt;database
Configuring permissions
Updating configuration files
Application created using:
  database &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; blog-tutorial_app
  framework &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; cakephp
  framework_human &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; CakePHP 3.x
  framework_short &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; cakephp3
  installation_method &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; composer
  majorversion &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; 3
  path &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /home/vagrant/Apps/blog-tutorial.app
  &lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; cakephp/app
  url &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; blog-tutorial.app
  webroot &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /home/vagrant/Apps/blog-tutorial.app/webroot

Remember to update your hosts file with: 10.33.10.10 http://blog-tutorial.app

Installation completed successfully
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;はい、終わり。&lt;code&gt;hostsファイルに追加してね&lt;/code&gt; というメッセージが出ているので、hostsファイルに追加します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ vim /etc/hosts

# この行を追加します
10.33.10.10 blog-tutorial.app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さっそく &lt;code&gt;http://blog-tutorial.app&lt;/code&gt; にアクセスしてみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakebox_createapp.png" /&gt;&lt;/p&gt;

&lt;p&gt;うわー、すげー。
ディレクトリの権限とか、DBの設定とか全部できちゃっているよ。
CakePHP3で &lt;code&gt;composer create-project&lt;/code&gt; やったことあればわかると思うのですが、ここまで設定するのもちょっと面倒です。&lt;/p&gt;

&lt;p&gt;Cakeboxのダッシュボード画面も見てみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakebox_createdapp_dashbord.png" /&gt;&lt;/p&gt;

&lt;p&gt;アプリケーションが1つ、データベースが2つ、バーチャルホストが2つ（最初は1なので1つ増えてます）になっています。
つまり &lt;code&gt;cakebox application add&lt;/code&gt; 実行すると&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CakePHP3の &lt;code&gt;composer create-project&lt;/code&gt; でスケルトン作って&lt;/li&gt;
&lt;li&gt;nginxのsite-availablesにバーチャルホスト追加して&lt;/li&gt;
&lt;li&gt;DB（mysql）にdefaultとtestの2つのDBを作って&lt;/li&gt;
&lt;li&gt;CakePHP3のconfigをモロモロ設定、パーミッションも設定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;してくれるというわけです。なんと便利、そして簡単なんでしょう。
&lt;a href="http://book.cakephp.org/3.0/en/tutorials-and-examples/blog/blog.html"&gt;blogチュートリアルの1ページ目&lt;/a&gt;のうち、&lt;code&gt;Creating the Blog Database&lt;/code&gt; のテーブル生成以外のステップは（nginxの設定まで）コマンド一つで終わりです。&lt;/p&gt;

&lt;h3&gt;ブログチュートリアルのテーブル作成&lt;/h3&gt;

&lt;p&gt;せっかくなので、マイグレーションプラグインを使って、テーブルを生成します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vagrant@cakebox:~$ cd Apps/blog-tutorial.app/
vagrant@cakebox:~/Apps/blog-tutorial.app$ ./bin/cake migrations create CreateArticles
Welcome to CakePHP v3.0.1 Console
---------------------------------------------------------------
App : src
Path: /home/vagrant/Apps/blog-tutorial.app/src/
---------------------------------------------------------------
using migration path /home/vagrant/Apps/blog-tutorial.app/config/Migrations
using migration base class Phinx\Migration\AbstractMigration
using default template
created ./config/Migrations/20150419074519_create_articles.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;upとdownを以下のように記述します。&lt;/p&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;up&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'articles'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'limit'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
              &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'body'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'text'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'created'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'datetime'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;addColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'modified'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'datetime'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;down&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;dropTable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'articles'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;マイグレーションを実行してテーブルを作成します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vagrant@cakebox:~/Apps/blog-tutorial.app$ ./bin/cake migrations migrate

Welcome to CakePHP v3.0.1 Console
---------------------------------------------------------------
App : src
Path: /home/vagrant/Apps/blog-tutorial.app/src/
---------------------------------------------------------------
using migration path /home/vagrant/Apps/blog-tutorial.app/config/Migrations
using environment default
using adapter mysql
using database blog-tutorial_app

 == 20150419074519 CreateArticles: migrating
 == 20150419074519 CreateArticles: migrated 0.1178s

All Done. Took 0.1780s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでチュートリアルの1ページ目は終了です。&lt;/p&gt;

&lt;h3&gt;ブログチュートリアルを進めよう&lt;/h3&gt;

&lt;p&gt;チュートリアルって環境構築ではまるケースが多い（特に今まで使ったことないフレームワークとか特に）のですが、このように簡単に始められるのは大きいですね。
あとは&lt;a href="http://book.cakephp.org/3.0/en/tutorials-and-examples/blog/part-two.html"&gt;パート２&lt;/a&gt;の内容を、進めていけば大丈夫です。
ここではチュートリアルそのものを解説するわけではないので、ワープします。
指定されたファイルに、そのままコピペしていけば大丈夫です。&lt;/p&gt;

&lt;p&gt;コピペしたあとにテストという投稿を追加してみた結果が以下のとおりです。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/cakebox_tutorial_part2.png" /&gt;&lt;/p&gt;

&lt;h3&gt;さいごに&lt;/h3&gt;

&lt;p&gt;Cakeboxを使ってブログチュートリアルを進めてみましたが、もし今までCakePHPを使ったことがなくても、CakePHP2は使っていたけど、3はまだ、という人にも環境構築のステップが簡略されているのは、とても大きいと思います。&lt;/p&gt;

&lt;p&gt;実はCakebox &lt;code&gt;Multi-Framework PHP Development Environment&lt;/code&gt; と書いてあるとおり、CakePHP3だけのためにあるわけではないようです。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Fresh preconfigured PHP framework applications&lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;cakebox application add mycake3.app
&lt;span class="gp"&gt;$ &lt;/span&gt;cakebox application add mycake2.app --majorversion 2
&lt;span class="gp"&gt;$ &lt;/span&gt;cakebox application add mylaravel.app --framework laravel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なんとCakePHP2もいけるし、今話題の laravel5 の環境も作れるみたいですよ！
これは現時点でのサポート状況ということで、今後増えていくことも想定されます。
これはもう Cakebox を試してみるしかないですね。&lt;/p&gt;

&lt;p&gt;そんなCakePHP3ですが、&lt;a href="https://coedo-cakephp.doorkeeper.jp/events/23199"&gt;CakePHP3 もくもく会（勉強会） #14&lt;/a&gt; が 2015-04-28（火）19:00 - 21:30　に Co-Edoで開催されます。
PHP勉強会と日程かぶっていますが、もしCakePHP3に興味があればこちらにも参加してみてください。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>BambooのChatWork通知プラグインを作成しました</title>
    <link rel="alternate" href="http://blog.url.com/2015/03/14/bamboo-chatwork-add-on.html"/>
    <id>http://blog.url.com/2015/03/14/bamboo-chatwork-add-on.html</id>
    <published>2015-03-14T08:45:00Z</published>
    <updated>2015-03-14T21:00:46+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;現在作業支援している現場では Atlassian JIRA,Bitbucket,Bambooと、コミュニケーションツールとしてChatWorkを使っています。
CIツールであるBambooは通知機能としてEmail,HipChat,IMに対応しているのですが、汎用的な通知機能は持っていないので、ChatWorkプラグインを自作してみました。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/sizuhiko/bamboo-chatwork-notification"&gt;Bamboo ChatWork Plugin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここではBambooのプラグインを作る手順と、そのときにハマったポイントなどを解説します。&lt;/p&gt;

&lt;h3&gt;はじめに&lt;/h3&gt;

&lt;p&gt;BambooのプラグインをAtlassian SDKをインストールします。
&lt;a href="https://developer.atlassian.com/docs/getting-started/set-up-the-atlassian-plugin-sdk-and-build-a-project"&gt;Set up the Atlassian Plugin SDK and Build a Project&lt;/a&gt;からプラットフォームにあったSDKをインストールします。&lt;/p&gt;

&lt;p&gt;SDKをインストールしたら&lt;a href="https://developer.atlassian.com/docs/getting-started/set-up-the-atlassian-plugin-sdk-and-build-a-project/explore-the-installed-sdk-and-the-atlas-commands"&gt;Step 3: Try an atlas command&lt;/a&gt;のとおり以下のコマンドを実行します。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mkdir 作業ディレクトリ名
&lt;span class="nb"&gt;cd &lt;/span&gt;作業ディレクトリ名
atlas-run-standalone --product bamboo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;atlas-run-standalone&lt;/code&gt;を実行すると、大量の&lt;code&gt;maven install&lt;/code&gt;が動きます。
かなり時間がかかるので、ネットワークが速い環境と、時間にゆとりがあるときに実行した方が良いです。&lt;/p&gt;

&lt;h3&gt;プラグインのスケルトンを生成する&lt;/h3&gt;

&lt;p&gt;以下のコマンドを実行してください。
&lt;code&gt;sh
atlas-create-bamboo-plugin
&lt;/code&gt;
以下の表の入力を求められるので、適切に入力します。
&lt;table&gt;
&lt;tr&gt;&lt;th&gt;Define value for groupId&lt;/th&gt;&lt;td&gt;作成するプラグインのパッケージパスを指定&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Define value for artifactId&lt;/th&gt;&lt;td&gt;作成するプラグインの名前を指定&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Define value for version&lt;/th&gt;&lt;td&gt;作成するプラグインのバージョンを指定&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Define value for package&lt;/th&gt;&lt;td&gt;groupIdとartifactIdを結合した値を指定&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
入力した内容はpom.xmlに反映されるだけなので、後でpom.xmlを編集すれば大丈夫です。&lt;/p&gt;

&lt;p&gt;プラグイン名のディレクトリに&lt;code&gt;pom.xml&lt;/code&gt; と &lt;code&gt;src/main&lt;/code&gt; フォルダに以下のファイルが自動生成されます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;{Define value for package}のパス/MyPluginComponent.java&lt;/li&gt;
&lt;li&gt;{Define value for package}のパス/MyPluginComponentImpl.java&lt;/li&gt;
&lt;li&gt;/resources/atlassian-plugin.xml&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;正直、自動生成されたコードは役に立たないので、削除してしまって良いでしょう。
&lt;code&gt;atlassian-plugin.xml&lt;/code&gt;はデフォルト値になっているので、適切に編集します（これは後で大丈夫です）。&lt;/p&gt;

&lt;p&gt;以下のコマンドを入力して、プラグイン環境を実行します。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;プラグインの名前
atlas-run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;atlas-run&lt;/code&gt;を実行すると、大量の&lt;code&gt;maven install&lt;/code&gt;が動きます。
かなり時間がかかるので、ネットワークが速い環境と、時間にゆとりがあるときに実行した方が良いです（２度目）。&lt;/p&gt;

&lt;h3&gt;プラグインを実装する&lt;/h3&gt;

&lt;p&gt;Bambooの通知プラグインとして、最初からインストールされているものはHipChat通知プラグインです。
とりあえずプラグインを作るための情報があまりに少ないので（Wikiを見て進めても肝心な箇所ほどJavaDocを見ろになってしまう。だがJavaDocを見てもわかるはずがない）、通知プラグインを作りたいと思った人はHitChatプラグインまたは、私の作ったChatWorkプラグインをコピー＆ペーストするのがお勧めです。&lt;/p&gt;

&lt;p&gt;私もまず&lt;a href="https://bitbucket.org/atlassian/bamboo-hipchat-plugin"&gt;HipChatプラグインのソースコード&lt;/a&gt;を参考にしました。&lt;/p&gt;

&lt;p&gt;HipChatプラグインやChatWorkプラグインのコードを見るとわかりますが、実装するファイルはわずかです。
&lt;code&gt;src/main&lt;/code&gt;ディレクトリに以下のファイルを配備します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AbstractNotificationRecipientを継承した通知プラグインの設定画面コントローラ&lt;/li&gt;
&lt;li&gt;NotificationTransportを実装した通知プラグインの通知コントローラ&lt;/li&gt;
&lt;li&gt;resources/atlassian-plugin.xml（プラグインの設定ファイル）&lt;/li&gt;
&lt;li&gt;Freemaker形式のテンプレートファイル（設定入力画面、設定表示画面、通知メッセージなど）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;実装する量は多くなく、コツさえ掴めば通知プラグインを作るのは難しくありません。コツさえ掴めば&amp;hellip;ですが。&lt;/p&gt;

&lt;h4&gt;通知プラグインの設定画面コントローラを作成する&lt;/h4&gt;

&lt;p&gt;ChatWorkプラグインでは、&lt;a href="https://github.com/sizuhiko/bamboo-chatwork-notification/blob/master/src/main/java/jp/tokyo/open/bamboo/plugin/chatwork/ChatworkNotificationRecipient.java"&gt;ChatworkNotificationRecipient.java&lt;/a&gt;というクラスを作成しました。
作成したというよりはHipChatプラグインの&lt;a href="https://bitbucket.org/atlassian/bamboo-hipchat-plugin/src/212f5e97f1f97a93535cec3cf074adc9ed5525be/src/main/java/com/atlassian/bamboo/hipchat/HipchatNotificationRecipient.java?at=master"&gt;HipchatNotificationRecipient.java&lt;/a&gt;を丸々コピーして微修正した程度です。&lt;/p&gt;

&lt;p&gt;実際に差分を見るとわかりますが、クラス名など変更した程度です。&lt;/p&gt;

&lt;p&gt;このコントローラに対応する画面は&lt;a href="https://github.com/sizuhiko/bamboo-chatwork-notification/blob/master/src/main/resources/atlassian-plugin.xml#L24-L28"&gt;atlassian-plugin.xml&lt;/a&gt;で指定します。&lt;/p&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;notificationRecipient&lt;/span&gt; &lt;span class="na"&gt;key=&lt;/span&gt;&lt;span class="s"&gt;"recipient.chatwork"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"Chatwork Recipient"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"jp.tokyo.open.bamboo.plugin.chatwork.ChatworkNotificationRecipient"&lt;/span&gt; &lt;span class="na"&gt;weight=&lt;/span&gt;&lt;span class="s"&gt;"10"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;ChatWork&lt;span class="nt"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;resource&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"freemarker"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"edit"&lt;/span&gt; &lt;span class="na"&gt;location=&lt;/span&gt;&lt;span class="s"&gt;"templates/plugins/notifications/chatwork/editNotification.ftl"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;resource&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"freemarker"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"view"&lt;/span&gt; &lt;span class="na"&gt;location=&lt;/span&gt;&lt;span class="s"&gt;"templates/plugins/notifications/chatwork/viewNotification.ftl"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/notificationRecipient&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;resource&lt;/code&gt;の&lt;code&gt;name&lt;/code&gt;が&lt;code&gt;edit&lt;/code&gt;である場合、設定編集画面のファイルパスを指定します。
&lt;code&gt;view&lt;/code&gt;の場合は、導入済み通知プラグインが設定一覧に表示される画面部品のファイルパスを指定します。&lt;/p&gt;

&lt;p&gt;実際の画面を見てみましょう&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[@ww.textfield labelKey="chatwork.api.token" name="chatWorkApiToken" value="${chatWorkApiToken!}" required='true'/]
[@ww.textfield labelKey="chatwork.room" name="chatWorkRoom" value="${chatWorkRoom!}" required='true'/]
[@ww.checkbox labelKey="chatwork.notify" name="chatWorkNotifyUsers" value="${chatWorkNotifyUsers!?string}"/]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これはFreemakerというテンプレートエンジンを使っているのですが、なんとなく想像できるレベルです。
HTMLと似ています。labelKeyはリソースファイルに定義した内容をバインドするので国際化対応できます。&lt;/p&gt;

&lt;h5&gt;ここで&lt;code&gt;コツ１&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;Freemakerのテンプレート上の&lt;code&gt;name&lt;/code&gt;属性と、コントローラクラスの&lt;a href="https://github.com/sizuhiko/bamboo-chatwork-notification/blob/master/src/main/java/jp/tokyo/open/bamboo/plugin/chatwork/ChatworkNotificationRecipient.java#L32-L34"&gt;設定入力画面の項目名&lt;/a&gt;
がマッピングされています。&lt;/p&gt;

&lt;p&gt;この画面はBambooで通知設定を入力するときに以下のようなHTMLに変換されます。&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"chatWorkApiToken"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"xxxxx"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"chatWorkRoom"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"oooooo"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"check"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"chatWorkNotifyUsers"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;想像どおりですか？
注意しなければならないのは「設定画面にはすべてのプラグインのHTMLが並ぶ」ということです。
えっ？何を言っているかわからない？ではどのようになっているかというと以下のようなHTMLになるのです。&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hipchat-plugin"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"display:none"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"apiToken"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"xxxxx"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"room"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"oooooo"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"check"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"notifyUsers"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"chatwork-plugin"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"chatWorkApiToken"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"xxxxx"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"chatWorkRoom"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"oooooo"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"check"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"chatWorkNotifyUsers"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このようなフォームが生成されていて、選択した通知の部分だけが見えるようになるのです。
カンの良い人は気付いたかもしれません。
私は最初HipChatプラグインをコピペして、項目名を変更していなかったので、以下のようなHTMLが生成されていて、うまくフォームから値を取得できませんでした。&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hipchat-plugin"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"display:none"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"apiToken"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"xxxxx"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"room"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"oooooo"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"check"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"notifyUsers"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"chatwork-plugin"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"apiToken"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"xxxxx"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"room"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"oooooo"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"check"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"notifyUsers"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同一フォームに同じname属性を持つHTMLが生成されて、submitされるのでコントローラのpopulateメソッドのMapに正しく値が入らなくなっていました。
なのでなるべく重複しない名前を指定しておくことが重要です。
ところが標準の通知プラグインであるHipChatが一等地の名前を持っているのです。Bambooとしてどのような名前規則を推奨しているのかドキュメントには記載していないので、パッケージ名を付加するなどの工夫が必要です。&lt;/p&gt;

&lt;p&gt;なお保存すると、保存完了メッセージが表示されるのですが、このメッセージのカスタマイズ方法はわかっていません。
そもそもカスタマイズできるのか調査中ですが、Bambooのコードはオープンソースではないので&amp;hellip;(ry&lt;/p&gt;

&lt;h4&gt;通知プラグインの通知コントローラを作成してChatWorkに通知する&lt;/h4&gt;

&lt;p&gt;ChatWorkプラグインでは、&lt;a href="https://github.com/sizuhiko/bamboo-chatwork-notification/blob/master/src/main/java/jp/tokyo/open/bamboo/plugin/chatwork/ChatworkNotificationTransport.java"&gt;ChatworkNotificationTransport.java&lt;/a&gt;というクラスを作成しました。
作成したというよりはHipChatプラグインの&lt;a href="https://bitbucket.org/atlassian/bamboo-hipchat-plugin/src/212f5e97f1f97a93535cec3cf074adc9ed5525be/src/main/java/com/atlassian/bamboo/hipchat/HipchatNotificationTransport.java?at=master"&gt;HipchatNotificationTransport.java&lt;/a&gt;を丸々コピーして修正しました。&lt;/p&gt;

&lt;p&gt;まず通知には通知メッセージが必要ですよね。
通知メッセージをFreemakerのテンプレートで記述したいのですが、ここで圧倒的なドキュメント不足に遭遇します。
ほぼ自力での解決はムリなので、Bambooの標準テンプレートをコピペして作業した方が良いでしょう。&lt;/p&gt;

&lt;p&gt;HipChatプラグインのソースコードを見ると、特に通知クラスを作ったり、通知のテンプレートを指定することはしていないようです。
Bambooの通知機能はHipChatに連携することに依存していて、HipChatはBamboo標準のテンプレートを使っています。
&lt;a href="https://developer.atlassian.com/display/BAMBOODEV/Notification+Plugin+Modules"&gt;通知プラグインを作るためのドキュメント&lt;/a&gt;を確認します。
&lt;a href="https://developer.atlassian.com/display/BAMBOODEV/Building+a+Notification+Plugin"&gt;Building a Notification Plugin&lt;/a&gt;を読むと、カスタムリスナーを登録する手順が書いてありますが、独自の通知タイプを作らない限りこのとおりやらなくても大丈夫です。
実際、私もカスタムリスナーを作成してドキュメント通りやってみたのですが、うまく動作しませんでした。atlassian-plugin.xmlにリスナー定義を追加してやってみたりしたのですが&amp;hellip;.&lt;/p&gt;

&lt;h5&gt;ここで&lt;code&gt;コツ２&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;そこでChatWorkプラグインでは、&lt;a href="https://github.com/sizuhiko/bamboo-chatwork-notification/blob/master/src/main/java/jp/tokyo/open/bamboo/plugin/chatwork/ChatworkNotificationRecipient.java#L136"&gt;ChatworkNotificationRecipientからChatworkNotificationTransportのインスタンスを作成するとき&lt;/a&gt;に、&lt;code&gt;TemplateRenderer&lt;/code&gt;というFreemakerのテンプレートを操作できるインスタンスを渡すようにしました。ChatworkNotificationTransportで独自に取得することはできないようです。
ChatworkNotificationRecipientではDIによって値がセットされるようになっているようです（ドキュメントなし）。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ChatworkNotificationTransport::sendNotification()&lt;/code&gt;メソッドが送信指示として呼び出されるので、TemplateRendererを使って独自テンプレートを呼び出して文字列に変換します。
文字列変換したメッセージをChatWork APIを使って指定したルームに送信するだけです。&lt;/p&gt;

&lt;p&gt;以下の部分がChatWork用に実装したコードです。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    static String getChatworkApiURL(String room) {
        return CHATWORK_API_URL.replaceAll("\\{room_id\\}", room);
    }


    private String getChatworkContent() {
        String templateLocation = "templates/plugins/notifications/chatwork/BuildCompleted.ftl";
        return templateRenderer.render(templateLocation, populateContext());
    }

    private Map&amp;lt;String, Object&amp;gt; populateContext()
    {
        Map&amp;lt;String, Object&amp;gt; context = Maps.newHashMap();
        context.put("build", plan);
        context.put("buildSummary", resultsSummary);
        return context;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;getChatworkContent()&lt;/code&gt;を使ってFreemakerテンプレートからメッセージを取得します。
実際のテンプレートファイルは以下のよな内容です。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[#-- @ftlvariable name="build" type="com.atlassian.bamboo.build.Buildable" --]
[#-- @ftlvariable name="buildSummary" type="com.atlassian.bamboo.resultsummary.BuildResultsSummary" --]
[#include "/notification-templates/notificationCommons.ftl"]
[#include "/notification-templates/notificationCommonsText.ftl" ]
[#assign authors = buildSummary.uniqueAuthors/]

[#if buildSummary.successful][#lt]
[info][title][@buildNotificationTitleText build buildSummary/] was SUCCESSFUL[/title]
[@showRestartCount buildSummary/]
[#if buildSummary.testResultsSummary.totalTestCaseCount &amp;gt;0] [@showTestSummary buildSummary.testResultsSummary/][/#if].
[#if authors?has_content] [@showAuthorSummary authors/][/#if][#lt]
${baseUrl}/browse/${buildSummary.planResultKey}/
[/info]
[#else][#lt]
[info][title][@buildNotificationTitleText build buildSummary/] has FAILED[/title]
[@showRestartCount buildSummary/]
[#if buildSummary.testResultsSummary.totalTestCaseCount &amp;gt;0] [@showTestSummary buildSummary.testResultsSummary/][/#if].
[#if authors?has_content] [@showAuthorSummary authors/][/#if][#lt]
${baseUrl}/browse/${buildSummary.planResultKey}/
[/info]
[/#if][#lt]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先ほども書きましたが、これをJavaDocの情報を元に生成するのはほぼムリ、というか完全にムリです。
最初の手順でインストールしたSDKの中に実際のBambooがインストールされるので、Bambooのwarファイルが展開された&lt;code&gt;WEB-INF/classes/notification-templates&lt;/code&gt;のBuildCompleted.ftlファイルの内容をコピペして、ChatWorkメッセージ記法に合わせて修正しています。&lt;/p&gt;

&lt;p&gt;後はSDKで実行したBambooにプラグインをインストールして、デバッグしながら確認するのが近道です。&lt;/p&gt;

&lt;h4&gt;プラグインをビルドする&lt;/h4&gt;

&lt;p&gt;プラグインは管理画面からjarファイルとしてアップロードします。
そのためコンソールから以下のコマンドを実行します。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;プラグインの名前
atlas-mvn clean package
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;atlas-mvnはmvnのラッパーのようなのですが、mvnを直接実行するのでなく、こちらのコマンドを使った方が良いみたいです。
あとは通常のmavenのビルドと一緒ですが、初回はまた大量のmvn installが動くのでネットワークと時間には余裕を持って挑みましょう。&lt;/p&gt;

&lt;p&gt;ビルドが終わるとtargetディレクトリにjarファイルが生成されます。&lt;/p&gt;

&lt;h3&gt;さいごに&lt;/h3&gt;

&lt;p&gt;ChatWork通知プラグインとHipChat通知プラグインの差分はほんとうにわずかで、それほど難しいものではありません。
Bambooの通知プラグインモジュールで得た経験は以下のようなところです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ドキュメント読めばなんとなくわかるけど、「詳しくはJavaDocへ」でつまづく（心が折れる）&lt;/li&gt;
&lt;li&gt;入力画面など生成されたものはブラウザのデバッガを使って、名前空間がバッティングしていないか確認が必要&lt;/li&gt;
&lt;li&gt;EclipseのJDなどを使って、Bamboo自体のソースコードをリバースして調べながら実装しないとムリ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;プロジェクト都合じゃないとなかなかBambooとか使ったりする機会がないのですが、もしBamboo使うことになって通知プラグインを作りたいと思った方は参考にしていただければと思います。&lt;/p&gt;

&lt;p&gt;長くなったので、このあたりで終わりにしますが、他にもいろいろわかったことはあるので、また気が向いたら書こうかなと思います。&lt;/p&gt;
</content>
  </entry>
</feed>
