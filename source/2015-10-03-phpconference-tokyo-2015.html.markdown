---
title: PHPカンファレンス2015で発表しました	
date: 2015-10-03 04:50 UTC
tags:
- PHP
- PHPcon
- PHPcon2015
- Composer
- DataGenerator
---

2015/10/03 に行われた[PHPカンファレンス2015](http://phpcon.php.gr.jp/2015/)で発表をしてきました。

スライドは以下の内容です。

<script async class="speakerdeck-embed" data-slide="2" data-id="6747f5a70f5444188f8db70b4492736a" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

PHPカンファレンスでは公募セッションは最大30分のため、すべてのページについて話すことができませんした。

セッションはじまるときにComposerの利用状況についてヒアリングしたところ、半数以上の方が「これからComposerを使う人」だったため、
入門部分を中心に解説しました。	

このブログでは、スライドの共有と共に、話せなかった部分ついて（とうまくいかなかったデモも）書いておきたいと思います。

### Composerと、その歴史

PHPで開発をするのに、デファクトスタンダードになったといって良いComposer。

Composerは2012年3月1日に生まれました。最初のリリース番号は1.0.0のアルファ1です。
現在も1.0-devというバージョンで日々アップデートが行われています。
2012年というのはすごい最近ですよね。たった3年前です。ではその前はどうだったのか？少しふりかえってみたいと思います。

#### Composerの前はどうだったのか？

PHPにはじめて拡張モジュールやライブラリの置き場所ができたのは1999年、pearという名前でした。
perlのCPANに影響を受けていて、あくまでコードリポジトリという位置づけでした。
ComposerがDependency Managementであるのとは異なります。2006年にはPHP5.3に対応したpear2とpyrusが登場しました。
しかしpearは厳密なコードレビューからオープンソースのリポジトリでありながら「誰もが自由に公開できる場所」とはいいづらいものでした。
そこで2008年にnequalが立ち上げたのがopenpearです。pearパッケージを誰もが自由に公開できるような場所となりました。リポジトリはsvnでした。
あのsotarokさんのコメントがトップページにあります「夢のような話だ」、まさにそのとおりでした。しかし時代はgit、githubになり、2012年にcomposerが生まれたのです。

#### Composerを正しく理解する

ComposerはDependencyManagementです。
例えばYumやAptといったパッケージ管理とは違います。pearはこちらに近かったかもしれません。
npmやbundlerといったものに影響を受けていて、プロジェクト単位で依存関係を管理します。

#### Composerが必須になる流れ

さてpearを使っていた中で、一番インストールしたことがあるパッケージといえば何でしたか？
私はどんなプロジェクトでも必ず必要だったのはPHPUnitではないかと思います。PHPUnitインストールしたことがありますか？
pearでやるとかなり面倒なんですよね、複数バージョン入れ分けなくてはいけないなんて事はなかったですか？（地獄でしたよねw）

昨年、PHPUnitはPEARから卒業しました。スライドではそのときのSebastionBergmannのツイートを引用しました。
つい最近サルベージしたので、アイコンは当時写真だったと思うのですが、今はイラストですね（良く似ていますww）。

具体的には、csvから始まって、pearに移って、2009年にはgithubに移って、今日ではpearから卒業する、長らくありがとうという内容です。
PHPUnit3.7.0からComposrで取得可能です。

#### Composerより昔のやり方

例えばPHPUnitを例にとって、Composerより前はどんな方法だったか思い出してみましょう。
スライドではPHPUnitのpearを使った導入方法を掲載しました。1つ1つはもう気にしなくて良いのですが、長いですよね。
たいてい秘伝のレシピにしているか、ググってコピペするか、会社でドキュメント化しているか、そんなところだったと思います。

秘伝のレシピの場合、もちろんコマンド1つかもしれないですが、初めてプロジェクトに入った人がわかるわけではないですね。
複数バージョンを同居させるとかになると、pyrus使ったりしてもう少し違う感じにはなるかと思います。
あと、iniのインクルードパスを設定しないとファイルが読み込めなかったですよね

#### Composerになった（今どきの）やり方

Composerになって、初めて入れるときはrequire、他の人はinstallコマンドを実行するだけで良くなりました。
なんて簡単なんだろう、環境設定マニュアルとか必要ないレベルですよね。
composer使ったことあるひとなら、git cloneしたリポジトリにcomposer.jsonがある段階でinstallを実行するはずです。
（phpunitはrequire --devじゃないとか？いうのはそのとおりですが、今回は省略しています）


### PHPで正しく開発するには

今日ではこのようにPHPでもモダンな開発をするベースが整っています。
PHPでは[PHP The Right Way](http://ja.phptherightway.com)というページに、そのすべてがまとまっています。
もちろんComposerについても書いてあります。
`PHP The Right Way` は PHPerが幸せになる為の道しるべを示してくれています。
もちろん各国の有志によって翻訳されているので、すぐ読めます。かならず読んでみてください。

スライドの高速道路出口は [高速道路風標識ジェネレーター](http://pro10.sakura.ne.jp/kousoku/) を使ってみたかっただけで、深い意味はありません。


#### オートローディング

PHP The Right Wayではコーディングスタイルや名前空間といったことにも言及しています。
どちらにもPSR-4という記述がありますが、PSR-4はオートロードについての標準です。現在はPSR-0を含んでいるので、PSR-0でなくPSR-4を参照するのが良いでしょう。

#### オートロードとComposerの関係について

PHPでクラスをオートロードするには、__autoloadを実装して、クラスが見つからないときに指示してあげるか、spl_autoload_registerで予めクラスのパスを登録しておくという２通りのやり方があります。

「ちなみにこの方法でオートロードを実装したことがある人はいますか？」という問いにはどなたも手があがりませんでした。これはそのとおりだと思います。Composer以前ではほぼ気にする人はいなかったでしょう。

もしフレームワークを使ってアプリケーションを実装している人は、フレームワークがオートロードの仕組みを用意してくれていたりするので、より意識しないかなと思います。

### デモ

本番ではうまくいかなかったのですが、こちらで解説します。（カンファレンスあるあるですね）

#### インストール

スライドの内容を参考にcomposerをインストールします。
composerはプロジェクトのローカルでなく、パスの通っているところに配置してください。
Right Wayにも書いてあります。
Windowsを利用の方は[公式ドキュメント](https://getcomposer.org/doc/00-intro.md#installation-windows)を参照ください。

[GitHubのリポジトリ](https://github.com/sizuhiko/phpcon2015_demo)からソースコードを取得します。

``` sh
git clone git@github.com:sizuhiko/phpcon2015_demo.git
```

#### プロジェクト情報の入力

まず`composer init`コマンドでプロジェクト情報を入力します。
requireやrequire-devは必要ないので、`no`を入力すれば大丈夫です。

#### インストールコマンドの実行

`init`コマンドを実行したら、`composer install`コマンドを実行します。最初は何もありません。
`vendor`ディレクトリが生成されるはずです。

#### 実行してみる

`php -S localhost:8000 src/router.php` というコマンドを実行します。
ブラウザから[サンプルページ](http://localhost:8000)を実行してください。

`Welcome to PHP` と表示されるはずです。

次に`Say\Hello`クラスを実行してみます。[/hello](http://localhost:8000/hello)にアクセスします。

```
Fatal error: Class 'Say\Hello' not found in /phpcon2015_demo/src/router.php on line 19
```

というエラーが表示されるはずです。
ソースコードでは以下のように指定していますが、オートロードが定義されていないのでクラスは見つかりません。

``` php
use Say\Hello;
```

そこで、`composer.json`を編集して、以下のように`require`の下に追記します。

``` json
    "require": {},
    "autoload": {
        "psr-4": {
            "Say\\": "src/Say"
        }
    }

```

変更を保存したら、`composer dumpautoload` というコマンドを実行します。

再度`Say\Hello`クラスを実行してみます。[/hello](http://localhost:8000/hello)にアクセスします。
すると、ブラウザに

```
Hello
```

と表示されるはずです。
今度は[/emoji](http://localhost:8000/emoji)にアクセスします。
先ほどと同じようなエラーが表示されるので、`composer.json`を編集します。

``` json
    "autoload": {
        "psr-4": {
            "Say\\": "src/Say",
            "Write\\": "src/Write"
        }
    }
```

変更を保存したら、`composer dumpautoload` というコマンドを実行します。

再度`Write/Emoji`クラスを実行してみます。[/emoji](http://localhost:8000/emoji)にアクセスします。
すると、ブラウザに

```
(^o^)
```

と表示されるはずです。

このようにオートロードについて自分で記述しなくても、名前空間の宣言を`composer.json`でおこなうと自動的にクラスをロードしてくれるようになります。

### More Tips

この先は解説できなかった部分なので補足します。

#### リポジトリ管理

これについては第94回 PHP勉強会＠東京〜PHPカンファレンス2015開催直前スペシャル〜で話しました。[スタジオアルカナのレポート](http://www.s-arcana.co.jp/blog/2015/10/01/2899)に詳しいログが残っていますので、そちらを参照ください。


#### スクリプト

Composerの強力な機能にスクリプト（フック）の実行があります。
`install`や`update`など`composer`のコマンド実行前と実行後に、スクリプトを実行できます。

- pre-install-cmd
- post-install-cmd

のようなイベント名です。
実行できるスクリプトは通常のCLIとPHPのクラスです。

例えば `composer.json` で以下のように記述します。

``` json
    "post-install-cmd": [
        "MyVendor\\MyClass::warmCache",
        "phpunit -c app/"
    ],
```

より詳しい情報は[公式サイト](https://getcomposer.org/doc/articles/scripts.md)を参照して欲しいのですが、これの使い方は２つ考えられます。

１つ目は、すでに存在するライブラリに対するプロキシとしたい場合です。
公開されているライブラリをForkしたり、コピーしてくることなく、独自の変更を加えたい場合や、ライブラリをインストールした後で独自のconfigを追加したい場合など、社内で複数のプロジェクトにまたがって同じカスタマイズをしたい場合は有効です。それぞれのプロジェクトではプロキシした`composer.json`のあるリポジトリを指定するだけで、元のライブラリを修正することなく、同じようにカスタマイズ状態を利用できます。

２つ目は、フレームワークやライブラリを作った場合です。現在多くのフレームワークはアプリケーションテンプレートとして、`composer create-project`に対応したスケルトンを用意しています。何もなければそれを取得すれば良いのですが、もちろん`create-project`コマンドにもフックポイントが用意されているので、`install`後には環境設定ファイルなどがコピーされるようになっています。

### まとめ

このようにComposerはpearでできていたパッケージ（コードリポジトリ）管理から、より多くの機能を持って、現在のアプリケーション開発になくてはならないものとなっています。

このセッションでComposerを使うようになってくれる人が増えることを期待してまとめとしたいと思います。

### おまけ

LTのスライドも公開します。

<script async class="speakerdeck-embed" data-slide="2" data-id="3eea01f6480c4c5996cc0c988435a63a" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


